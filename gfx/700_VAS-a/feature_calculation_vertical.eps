%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: feature_calculation_vertical.pdf
%%Creator: Adobe Acrobat 11.0.0
%%For: mwichtlh
%%CreationDate: 01.04.2015, 16:54:01
%%BoundingBox: 0 0 596 207
%%HiResBoundingBox: 0 0 596 207
%%CropBox: 0 0 596 207
%%LanguageLevel: 3
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 759 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2015-03-25T10:08:06+01:00"
   xmp:CreatorTool="TeX"
   xmp:ModifyDate="2015-03-25T10:08:06+01:00"
   pdfx:PTEX.Fullbanner="This is pdfTeX, Version 3.1415926-2.5-1.40.14 (TeX Live 2013/Debian) kpathsea version 6.1.1"
   pdf:Producer="pdfTeX-1.40.14"
   pdf:Trapped="False"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -207 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 207 li
596 207 li
596 0 li
cp
clp
gsave
-36 245 mo
635 245 li
635 -36 li
-36 -36 li
-36 245 li
clp
-36 -36 mo
635.85 -36 li
635.85 245.7 li
-36 245.7 li
-36 -36 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
274.05 164.25 mo
50.04 164.25 li
49.0714 164.248 48.2417 163.455 48.24 162.45 cv
48.24 44.5501 li
48.2417 43.5447 49.0714 42.7518 50.04 42.7501 cv
274.05 42.7501 li
275.067 42.7545 275.845 43.5327 275.85 44.5501 cv
275.85 162.45 li
275.845 163.467 275.067 164.246 274.05 164.25 cv
211.005 152.888 mo
211.837 153.81 212.445 154.957 212.445 156.668 cv
212.445 158.377 211.837 159.525 211.005 160.448 cv
211.702 160.448 li
212.557 159.525 213.165 158.377 213.165 156.668 cv
213.165 154.957 212.557 153.81 211.702 152.888 cv
211.005 152.888 li
200.61 160.448 mo
200.61 160.448 li
199.755 159.525 199.17 158.377 199.17 156.668 cv
199.17 154.957 199.755 153.81 200.61 152.888 cv
199.912 152.888 li
199.08 153.81 198.45 154.935 198.45 156.645 cv
198.45 158.377 199.058 159.502 199.912 160.448 cv
200.61 160.448 li
192.443 159.278 mo
191.722 159.39 li
191.857 159.907 192.195 160.222 192.713 160.357 cv
192.999 160.418 193.253 160.447 193.479 160.447 cv
195.926 160.447 194.981 157.06 195.187 154.485 cv
194.512 154.485 li
194.467 154.688 194.49 154.98 194.467 155.205 cv
194.227 154.789 193.817 154.417 193.195 154.417 cv
193.177 154.417 193.158 154.417 193.14 154.418 cv
191.902 154.44 191.543 155.362 191.543 156.622 cv
191.543 157.86 191.857 158.783 193.072 158.783 cv
193.793 158.783 194.197 158.445 194.445 157.972 cv
194.445 158.648 li
194.593 159.456 193.967 159.901 193.368 159.901 cv
192.967 159.901 192.578 159.702 192.443 159.278 cv
135.765 159.278 mo
135.045 159.39 li
135.18 159.907 135.517 160.222 136.035 160.357 cv
136.322 160.418 136.576 160.447 136.801 160.447 cv
139.249 160.447 138.304 157.06 138.51 154.485 cv
137.835 154.485 li
137.79 154.688 137.813 154.98 137.79 155.205 cv
137.55 154.789 137.139 154.417 136.517 154.417 cv
136.499 154.417 136.481 154.417 136.463 154.418 cv
135.225 154.44 134.865 155.362 134.865 156.622 cv
134.865 157.86 135.18 158.783 136.395 158.783 cv
137.115 158.783 137.52 158.445 137.767 157.972 cv
137.767 158.648 li
137.916 159.456 137.289 159.901 136.69 159.901 cv
136.289 159.901 135.9 159.702 135.765 159.278 cv
206.662 157.275 mo
205.92 157.433 li
206.032 157.883 206.28 158.242 206.662 158.467 cv
207.086 158.719 207.701 158.857 208.32 158.857 cv
209.476 158.857 210.644 158.373 210.6 157.23 cv
210.487 154.868 207.247 156.24 206.933 154.553 cv
206.944 153.935 207.588 153.652 208.255 153.652 cv
208.948 153.652 209.665 153.957 209.722 154.507 cv
210.465 154.395 li
210.398 154.192 210.33 153.99 210.218 153.833 cv
209.888 153.348 209.074 153.08 208.263 153.08 cv
207.192 153.08 206.126 153.547 206.19 154.598 cv
206.347 156.937 209.835 155.498 209.835 157.253 cv
209.835 157.955 209.108 158.277 208.349 158.277 cv
207.552 158.277 206.72 157.921 206.662 157.275 cv
158.152 157.275 mo
157.41 157.433 li
157.522 157.883 157.77 158.242 158.152 158.467 cv
158.576 158.719 159.191 158.857 159.81 158.857 cv
160.966 158.857 162.134 158.373 162.09 157.23 cv
161.978 154.868 158.737 156.24 158.422 154.553 cv
158.433 153.935 159.078 153.652 159.745 153.652 cv
160.438 153.652 161.155 153.957 161.213 154.507 cv
161.955 154.395 li
161.887 154.192 161.82 153.99 161.707 153.833 cv
161.378 153.348 160.564 153.08 159.753 153.08 cv
158.682 153.08 157.616 153.547 157.68 154.598 cv
157.837 156.937 161.325 155.498 161.325 157.253 cv
161.325 157.955 160.598 158.277 159.839 158.277 cv
159.042 158.277 158.21 157.921 158.152 157.275 cv
144.322 156.15 mo
142.969 156.15 141.616 156.171 141.637 157.568 cv
141.637 158.377 142.132 158.827 142.943 158.85 cv
142.963 158.851 142.982 158.851 143.002 158.851 cv
143.792 158.851 144.143 158.411 144.473 157.95 cv
144.438 158.527 144.838 158.805 145.345 158.805 cv
145.491 158.805 145.645 158.783 145.8 158.737 cv
145.8 158.287 li
145.727 158.305 145.662 158.313 145.603 158.313 cv
145.277 158.313 145.151 158.061 145.17 157.68 cv
145.17 155.835 li
145.17 154.845 144.562 154.395 143.55 154.395 cv
142.582 154.395 141.952 154.733 141.84 155.565 cv
142.582 155.633 li
142.605 155.092 142.987 154.957 143.527 154.935 cv
144.247 154.935 144.517 155.362 144.45 156.15 cv
144.407 156.15 144.365 156.15 144.322 156.15 cv
175.981 154.395 mo
175.963 154.395 175.945 154.395 175.927 154.395 cv
174.645 154.395 174.015 155.137 174.015 156.622 cv
174.038 157.972 174.577 158.85 175.905 158.85 cv
177.232 158.85 177.862 158.04 177.84 156.622 cv
177.84 155.245 177.336 154.395 175.981 154.395 cv
171.481 154.395 mo
171.463 154.395 171.445 154.395 171.427 154.395 cv
170.145 154.395 169.515 155.137 169.515 156.622 cv
169.537 157.972 170.077 158.85 171.405 158.85 cv
172.732 158.85 173.362 158.04 173.34 156.622 cv
173.34 155.245 172.836 154.395 171.481 154.395 cv
152.212 154.395 mo
151.155 154.395 150.638 155.16 150.638 156.645 cv
150.66 157.972 151.02 158.85 152.212 158.85 cv
152.91 158.85 153.315 158.58 153.54 158.063 cv
153.607 158.242 153.562 158.535 153.607 158.76 cv
154.283 158.76 li
154.26 152.888 li
153.54 152.888 li
153.562 155.137 li
153.292 154.688 152.91 154.395 152.212 154.395 cv
123.323 154.395 mo
121.995 154.395 121.432 155.227 121.41 156.6 cv
121.388 158.018 122.062 158.85 123.368 158.85 cv
124.268 158.85 124.853 158.467 125.1 157.837 cv
124.47 157.657 li
124.34 158.026 123.98 158.311 123.431 158.311 cv
123.41 158.311 123.389 158.311 123.368 158.31 cv
122.49 158.287 122.175 157.68 122.175 156.78 cv
125.212 156.78 li
125.257 155.34 124.74 154.395 123.323 154.395 cv
178.29 154.485 mo
178.29 155.003 li
178.785 155.003 li
178.785 157.86 li
178.785 158.579 179.224 158.835 179.749 158.835 cv
179.947 158.835 180.157 158.799 180.36 158.737 cv
180.36 158.198 li
180.238 158.24 180.117 158.263 180.005 158.263 cv
179.703 158.263 179.472 158.096 179.505 157.702 cv
179.505 155.003 li
180.292 155.003 li
180.292 154.485 li
179.505 154.485 li
179.505 153.518 li
179.032 153.518 li
178.83 154.485 li
178.29 154.485 li
118.935 154.485 mo
118.935 155.003 li
119.43 155.003 li
119.43 157.86 li
119.43 158.579 119.869 158.835 120.394 158.835 cv
120.592 158.835 120.802 158.799 121.005 158.737 cv
121.005 158.198 li
120.883 158.24 120.762 158.263 120.65 158.263 cv
120.348 158.263 120.117 158.096 120.15 157.702 cv
120.15 155.003 li
120.938 155.003 li
120.938 154.485 li
120.15 154.485 li
120.15 153.518 li
119.677 153.518 li
119.475 154.485 li
118.935 154.485 li
201.308 153.18 mo
201.308 158.76 li
202.05 158.76 li
202.05 156.51 li
205.155 156.51 li
205.155 155.88 li
202.05 155.88 li
202.05 153.81 li
205.245 153.81 li
205.245 153.18 li
201.308 153.18 li
189.144 154.957 mo
189.797 154.957 189.967 155.358 189.967 156.037 cv
189.967 158.76 li
190.687 158.76 li
190.533 157.033 191.314 154.393 189.433 154.393 cv
189.402 154.393 189.37 154.393 189.337 154.395 cv
188.617 154.418 188.213 154.71 187.965 155.205 cv
187.898 155.025 187.942 154.71 187.92 154.485 cv
187.245 154.485 li
187.267 158.76 li
187.987 158.76 li
188.1 157.253 187.47 155.003 189.09 154.957 cv
189.108 154.957 189.126 154.957 189.144 154.957 cv
185.467 154.485 mo
185.467 158.76 li
186.187 158.76 li
186.187 154.485 li
185.467 154.485 li
184.41 158.76 mo
184.41 158.76 li
184.253 157.005 185.063 154.395 183.06 154.395 cv
182.318 154.395 181.957 154.733 181.688 155.205 cv
181.71 152.888 li
180.99 152.888 li
180.99 158.76 li
181.71 158.76 li
181.822 157.253 181.192 154.957 182.812 154.957 cv
182.832 154.957 182.851 154.957 182.869 154.957 cv
183.522 154.957 183.734 155.338 183.69 156.037 cv
183.69 158.76 li
184.41 158.76 li
168.66 158.76 mo
168.66 158.76 li
168.481 157.086 169.321 154.394 167.469 154.394 cv
167.453 154.394 167.438 154.395 167.422 154.395 cv
166.725 154.418 166.365 154.733 166.117 155.205 cv
166.03 154.66 165.516 154.411 164.983 154.411 cv
164.415 154.411 163.826 154.694 163.71 155.205 cv
163.642 155.025 163.687 154.71 163.665 154.485 cv
162.99 154.485 li
163.013 158.76 li
163.71 158.76 li
163.845 157.298 163.215 155.048 164.7 154.957 cv
164.73 154.955 164.758 154.954 164.786 154.954 cv
165.385 154.954 165.487 155.414 165.487 156.037 cv
165.487 158.76 li
166.185 158.76 li
166.32 157.32 165.667 155.025 167.175 154.957 cv
167.191 154.957 167.207 154.957 167.223 154.957 cv
167.855 154.957 167.962 155.401 167.962 156.037 cv
167.962 158.76 li
168.66 158.76 li
148.239 154.957 mo
148.892 154.957 149.062 155.358 149.062 156.037 cv
149.062 158.76 li
149.782 158.76 li
149.628 157.033 150.409 154.393 148.528 154.393 cv
148.497 154.393 148.465 154.393 148.432 154.395 cv
147.712 154.418 147.308 154.71 147.06 155.205 cv
146.992 155.025 147.038 154.71 147.015 154.485 cv
146.34 154.485 li
146.362 158.76 li
147.082 158.76 li
147.195 157.253 146.565 155.003 148.185 154.957 cv
148.203 154.957 148.221 154.957 148.239 154.957 cv
132.467 154.957 mo
133.119 154.957 133.29 155.358 133.29 156.037 cv
133.29 158.76 li
134.01 158.76 li
133.855 157.033 134.637 154.393 132.756 154.393 cv
132.725 154.393 132.692 154.393 132.66 154.395 cv
131.94 154.418 131.535 154.71 131.287 155.205 cv
131.22 155.025 131.265 154.71 131.242 154.485 cv
130.568 154.485 li
130.59 158.76 li
131.31 158.76 li
131.422 157.253 130.792 155.003 132.413 154.957 cv
132.431 154.957 132.449 154.957 132.467 154.957 cv
128.79 154.485 mo
128.79 158.76 li
129.51 158.76 li
129.51 154.485 li
128.79 154.485 li
126.112 154.485 mo
126.135 158.76 li
126.855 158.76 li
126.939 157.25 126.456 155.056 127.811 155.056 cv
127.91 155.056 128.018 155.068 128.137 155.092 cv
128.137 154.44 li
128.026 154.414 127.922 154.403 127.827 154.403 cv
127.247 154.403 126.948 154.841 126.833 155.362 cv
126.765 155.137 126.81 154.755 126.788 154.485 cv
126.112 154.485 li
117.585 152.888 mo
117.585 158.76 li
118.305 158.76 li
118.305 152.888 li
117.585 152.888 li
115.808 154.485 mo
115.808 158.76 li
116.528 158.76 li
116.528 154.485 li
115.808 154.485 li
111.015 153.18 mo
111.015 158.76 li
111.758 158.76 li
111.758 156.51 li
114.862 156.51 li
114.862 155.88 li
111.758 155.88 li
111.758 153.81 li
114.952 153.81 li
114.952 153.18 li
111.015 153.18 li
185.467 152.888 mo
185.467 153.562 li
186.187 153.562 li
186.187 152.888 li
185.467 152.888 li
128.79 152.888 mo
128.79 153.562 li
129.51 153.562 li
129.51 152.888 li
128.79 152.888 li
115.808 152.888 mo
115.808 153.562 li
116.528 153.562 li
116.528 152.888 li
115.808 152.888 li
175.95 158.31 mo
175.935 158.31 175.92 158.31 175.905 158.31 cv
174.982 158.287 174.758 157.59 174.758 156.622 cv
174.758 155.655 174.982 154.935 175.95 154.935 cv
176.917 154.935 177.097 155.655 177.097 156.622 cv
177.097 157.597 176.901 158.31 175.95 158.31 cv
171.45 158.31 mo
171.435 158.31 171.42 158.31 171.405 158.31 cv
170.482 158.287 170.258 157.59 170.258 156.622 cv
170.258 155.655 170.482 154.935 171.45 154.935 cv
172.417 154.935 172.597 155.655 172.597 156.622 cv
172.597 157.597 172.401 158.31 171.45 158.31 cv
143.1 158.31 mo
142.65 158.31 142.38 158.018 142.38 157.568 cv
142.38 156.533 143.482 156.69 144.45 156.645 cv
144.517 157.657 144.023 158.242 143.1 158.31 cv
152.392 158.287 mo
151.515 158.287 151.38 157.522 151.38 156.622 cv
151.38 155.7 151.515 154.935 152.415 154.935 cv
152.429 154.935 152.443 154.934 152.457 154.934 cv
153.344 154.934 153.54 155.647 153.54 156.577 cv
153.54 157.568 153.338 158.287 152.392 158.287 cv
193.32 158.265 mo
192.42 158.265 192.285 157.545 192.285 156.622 cv
192.285 155.7 192.443 154.935 193.32 154.935 cv
194.13 154.935 194.445 155.677 194.445 156.622 cv
194.445 157.545 194.13 158.265 193.32 158.265 cv
136.643 158.265 mo
135.743 158.265 135.607 157.545 135.607 156.622 cv
135.607 155.7 135.765 154.935 136.643 154.935 cv
137.452 154.935 137.767 155.677 137.767 156.622 cv
137.767 157.545 137.452 158.265 136.643 158.265 cv
124.492 156.218 mo
122.175 156.218 li
122.175 155.97 122.242 155.745 122.31 155.587 cv
122.498 155.148 122.905 154.944 123.318 154.944 cv
123.939 154.944 124.574 155.406 124.492 156.218 cv
/1 
[/DeviceRGB] /CSA add_res
.819608 .941176 .698039 rgb
f
274.052 165.15 mo
274.052 165.15 274.051 165.15 274.05 165.15 cv
50.04 165.15 li
48.5787 165.149 47.3425 163.965 47.34 162.45 cv
47.34 44.5501 li
47.79 44.5501 li
47.79 162.45 li
47.79 163.71 48.8249 164.7 50.04 164.7 cv
274.05 164.7 li
275.31 164.7 276.3 163.71 276.3 162.45 cv
276.3 44.5501 li
276.3 43.29 275.31 42.3001 274.05 42.3001 cv
50.04 42.3001 li
48.8249 42.3001 47.79 43.29 47.79 44.5501 cv
47.79 44.5501 li
47.34 44.5501 li
47.3425 43.0355 48.5787 41.8509 50.04 41.8501 cv
274.05 41.8501 li
274.051 41.8501 274.052 41.8501 274.052 41.8501 cv
274.8 41.8501 275.479 42.1471 275.966 42.6343 cv
276.453 43.1211 276.751 43.8013 276.75 44.5501 cv
276.75 162.45 li
276.751 163.199 276.453 163.879 275.966 164.366 cv
275.479 164.853 274.8 165.15 274.052 165.15 cv
.698039 .698039 .698039 rgb
f
274.05 164.7 mo
50.04 164.7 li
48.8249 164.7 47.79 163.71 47.79 162.45 cv
47.79 44.5501 li
48.24 44.5501 li
47.79 44.5501 li
47.79 43.29 48.8249 42.3001 50.04 42.3001 cv
274.05 42.3001 li
275.31 42.3001 276.3 43.29 276.3 44.5501 cv
276.3 162.45 li
276.3 163.71 275.31 164.7 274.05 164.7 cv
48.24 44.5501 mo
48.24 162.45 li
48.2417 163.455 49.0714 164.248 50.04 164.25 cv
274.05 164.25 li
275.067 164.246 275.845 163.467 275.85 162.45 cv
275.85 44.5501 li
275.845 43.5327 275.067 42.7545 274.05 42.7501 cv
50.04 42.7501 li
49.0714 42.7518 48.2417 43.5447 48.24 44.5501 cv
48.24 44.5501 li
.572549 .658823 .486274 rgb
f
111.758 158.76 mo
111.015 158.76 li
111.015 153.18 li
114.952 153.18 li
114.952 153.81 li
111.758 153.81 li
111.758 155.88 li
114.862 155.88 li
114.862 156.51 li
111.758 156.51 li
111.758 158.76 li
f
116.528 158.76 mo
115.808 158.76 li
115.808 154.485 li
116.528 154.485 li
116.528 158.76 li
116.528 153.562 mo
115.808 153.562 li
115.808 152.888 li
116.528 152.888 li
116.528 153.562 li
f
118.305 158.76 mo
117.585 158.76 li
117.585 152.888 li
118.305 152.888 li
118.305 158.76 li
f
120.394 158.835 mo
119.869 158.835 119.43 158.579 119.43 157.86 cv
119.43 155.003 li
118.935 155.003 li
118.935 154.485 li
119.475 154.485 li
119.677 153.518 li
120.15 153.518 li
120.15 154.485 li
120.938 154.485 li
120.938 155.003 li
120.15 155.003 li
120.15 157.702 li
120.117 158.096 120.348 158.263 120.65 158.263 cv
120.762 158.263 120.883 158.24 121.005 158.198 cv
121.005 158.737 li
120.802 158.799 120.592 158.835 120.394 158.835 cv
f
123.368 158.85 mo
122.062 158.85 121.388 158.018 121.41 156.6 cv
121.432 155.227 121.995 154.395 123.323 154.395 cv
124.74 154.395 125.257 155.34 125.212 156.78 cv
122.175 156.78 li
122.175 157.68 122.49 158.287 123.368 158.31 cv
123.389 158.311 123.41 158.311 123.431 158.311 cv
123.98 158.311 124.34 158.026 124.47 157.657 cv
125.1 157.837 li
124.853 158.467 124.268 158.85 123.368 158.85 cv
123.318 154.944 mo
122.905 154.944 122.498 155.148 122.31 155.587 cv
122.242 155.745 122.175 155.97 122.175 156.218 cv
124.492 156.218 li
124.574 155.406 123.939 154.944 123.318 154.944 cv
f
126.855 158.76 mo
126.135 158.76 li
126.112 154.485 li
126.788 154.485 li
126.81 154.755 126.765 155.137 126.833 155.362 cv
126.948 154.841 127.247 154.403 127.827 154.403 cv
127.922 154.403 128.026 154.414 128.137 154.44 cv
128.137 155.092 li
128.018 155.068 127.91 155.056 127.811 155.056 cv
126.456 155.056 126.939 157.25 126.855 158.76 cv
f
129.51 158.76 mo
128.79 158.76 li
128.79 154.485 li
129.51 154.485 li
129.51 158.76 li
129.51 153.562 mo
128.79 153.562 li
128.79 152.888 li
129.51 152.888 li
129.51 153.562 li
f
134.01 158.76 mo
133.29 158.76 li
133.29 156.037 li
133.29 155.358 133.119 154.957 132.467 154.957 cv
132.449 154.957 132.431 154.957 132.413 154.957 cv
130.792 155.003 131.422 157.253 131.31 158.76 cv
130.59 158.76 li
130.568 154.485 li
131.242 154.485 li
131.265 154.71 131.22 155.025 131.287 155.205 cv
131.535 154.71 131.94 154.418 132.66 154.395 cv
132.692 154.393 132.725 154.393 132.756 154.393 cv
134.637 154.393 133.855 157.033 134.01 158.76 cv
f
136.801 160.447 mo
136.576 160.447 136.322 160.418 136.035 160.357 cv
135.517 160.222 135.18 159.907 135.045 159.39 cv
135.765 159.278 li
135.9 159.702 136.289 159.901 136.69 159.901 cv
137.289 159.901 137.916 159.456 137.767 158.648 cv
137.767 157.972 li
137.52 158.445 137.115 158.783 136.395 158.783 cv
135.18 158.783 134.865 157.86 134.865 156.622 cv
134.865 155.362 135.225 154.44 136.463 154.418 cv
136.481 154.417 136.499 154.417 136.517 154.417 cv
137.139 154.417 137.55 154.789 137.79 155.205 cv
137.813 154.98 137.79 154.688 137.835 154.485 cv
138.51 154.485 li
138.304 157.06 139.249 160.447 136.801 160.447 cv
136.643 154.935 mo
135.765 154.935 135.607 155.7 135.607 156.622 cv
135.607 157.545 135.743 158.265 136.643 158.265 cv
137.452 158.265 137.767 157.545 137.767 156.622 cv
137.767 155.677 137.452 154.935 136.643 154.935 cv
f
143.002 158.851 mo
142.982 158.851 142.963 158.851 142.943 158.85 cv
142.132 158.827 141.637 158.377 141.637 157.568 cv
141.616 156.171 142.969 156.15 144.322 156.15 cv
144.365 156.15 144.407 156.15 144.45 156.15 cv
144.517 155.362 144.247 154.935 143.527 154.935 cv
142.987 154.957 142.605 155.092 142.582 155.633 cv
141.84 155.565 li
141.952 154.733 142.582 154.395 143.55 154.395 cv
144.562 154.395 145.17 154.845 145.17 155.835 cv
145.17 157.68 li
145.151 158.061 145.277 158.313 145.603 158.313 cv
145.662 158.313 145.727 158.305 145.8 158.287 cv
145.8 158.737 li
145.645 158.783 145.491 158.805 145.345 158.805 cv
144.838 158.805 144.438 158.527 144.473 157.95 cv
144.143 158.411 143.792 158.851 143.002 158.851 cv
144.45 156.645 mo
143.482 156.69 142.38 156.533 142.38 157.568 cv
142.38 158.018 142.65 158.31 143.1 158.31 cv
144.023 158.242 144.517 157.657 144.45 156.645 cv
f
149.782 158.76 mo
149.062 158.76 li
149.062 156.037 li
149.062 155.358 148.892 154.957 148.239 154.957 cv
148.221 154.957 148.203 154.957 148.185 154.957 cv
146.565 155.003 147.195 157.253 147.082 158.76 cv
146.362 158.76 li
146.34 154.485 li
147.015 154.485 li
147.038 154.71 146.992 155.025 147.06 155.205 cv
147.308 154.71 147.712 154.418 148.432 154.395 cv
148.465 154.393 148.497 154.393 148.528 154.393 cv
150.409 154.393 149.628 157.033 149.782 158.76 cv
f
152.212 158.85 mo
151.02 158.85 150.66 157.972 150.638 156.645 cv
150.638 155.16 151.155 154.395 152.212 154.395 cv
152.91 154.395 153.292 154.688 153.562 155.137 cv
153.54 152.888 li
154.26 152.888 li
154.283 158.76 li
153.607 158.76 li
153.562 158.535 153.607 158.242 153.54 158.063 cv
153.315 158.58 152.91 158.85 152.212 158.85 cv
152.457 154.934 mo
152.443 154.934 152.429 154.935 152.415 154.935 cv
151.515 154.935 151.38 155.7 151.38 156.622 cv
151.38 157.522 151.515 158.287 152.392 158.287 cv
153.338 158.287 153.54 157.568 153.54 156.577 cv
153.54 155.647 153.344 154.934 152.457 154.934 cv
f
159.81 158.857 mo
159.191 158.857 158.576 158.719 158.152 158.467 cv
157.77 158.242 157.522 157.883 157.41 157.433 cv
158.152 157.275 li
158.21 157.921 159.042 158.277 159.839 158.277 cv
160.598 158.277 161.325 157.955 161.325 157.253 cv
161.325 155.498 157.837 156.937 157.68 154.598 cv
157.616 153.547 158.682 153.08 159.753 153.08 cv
160.564 153.08 161.378 153.348 161.707 153.833 cv
161.82 153.99 161.887 154.192 161.955 154.395 cv
161.213 154.507 li
161.155 153.957 160.438 153.652 159.745 153.652 cv
159.078 153.652 158.433 153.935 158.422 154.553 cv
158.737 156.24 161.978 154.868 162.09 157.23 cv
162.134 158.373 160.966 158.857 159.81 158.857 cv
f
168.66 158.76 mo
167.962 158.76 li
167.962 156.037 li
167.962 155.401 167.855 154.957 167.223 154.957 cv
167.207 154.957 167.191 154.957 167.175 154.957 cv
165.667 155.025 166.32 157.32 166.185 158.76 cv
165.487 158.76 li
165.487 156.037 li
165.487 155.414 165.385 154.954 164.786 154.954 cv
164.758 154.954 164.73 154.955 164.7 154.957 cv
163.215 155.048 163.845 157.298 163.71 158.76 cv
163.013 158.76 li
162.99 154.485 li
163.665 154.485 li
163.687 154.71 163.642 155.025 163.71 155.205 cv
163.826 154.694 164.415 154.411 164.983 154.411 cv
165.516 154.411 166.03 154.66 166.117 155.205 cv
166.365 154.733 166.725 154.418 167.422 154.395 cv
167.438 154.395 167.453 154.394 167.469 154.394 cv
169.321 154.394 168.481 157.086 168.66 158.76 cv
f
171.405 158.85 mo
170.077 158.85 169.537 157.972 169.515 156.622 cv
169.515 155.137 170.145 154.395 171.427 154.395 cv
171.445 154.395 171.463 154.395 171.481 154.395 cv
172.836 154.395 173.34 155.245 173.34 156.622 cv
173.362 158.04 172.732 158.85 171.405 158.85 cv
171.45 154.935 mo
170.482 154.935 170.258 155.655 170.258 156.622 cv
170.258 157.59 170.482 158.287 171.405 158.31 cv
171.42 158.31 171.435 158.31 171.45 158.31 cv
172.401 158.31 172.597 157.597 172.597 156.622 cv
172.597 155.655 172.417 154.935 171.45 154.935 cv
f
175.905 158.85 mo
174.577 158.85 174.038 157.972 174.015 156.622 cv
174.015 155.137 174.645 154.395 175.927 154.395 cv
175.945 154.395 175.963 154.395 175.981 154.395 cv
177.336 154.395 177.84 155.245 177.84 156.622 cv
177.862 158.04 177.232 158.85 175.905 158.85 cv
175.95 154.935 mo
174.982 154.935 174.758 155.655 174.758 156.622 cv
174.758 157.59 174.982 158.287 175.905 158.31 cv
175.92 158.31 175.935 158.31 175.95 158.31 cv
176.901 158.31 177.097 157.597 177.097 156.622 cv
177.097 155.655 176.917 154.935 175.95 154.935 cv
f
179.749 158.835 mo
179.224 158.835 178.785 158.579 178.785 157.86 cv
178.785 155.003 li
178.29 155.003 li
178.29 154.485 li
178.83 154.485 li
179.032 153.518 li
179.505 153.518 li
179.505 154.485 li
180.292 154.485 li
180.292 155.003 li
179.505 155.003 li
179.505 157.702 li
179.472 158.096 179.703 158.263 180.005 158.263 cv
180.117 158.263 180.238 158.24 180.36 158.198 cv
180.36 158.737 li
180.157 158.799 179.947 158.835 179.749 158.835 cv
f
184.41 158.76 mo
183.69 158.76 li
183.69 156.037 li
183.734 155.338 183.522 154.957 182.869 154.957 cv
182.851 154.957 182.832 154.957 182.812 154.957 cv
181.192 154.957 181.822 157.253 181.71 158.76 cv
180.99 158.76 li
180.99 152.888 li
181.71 152.888 li
181.688 155.205 li
181.957 154.733 182.318 154.395 183.06 154.395 cv
185.063 154.395 184.253 157.005 184.41 158.76 cv
f
186.187 158.76 mo
185.467 158.76 li
185.467 154.485 li
186.187 154.485 li
186.187 158.76 li
186.187 153.562 mo
185.467 153.562 li
185.467 152.888 li
186.187 152.888 li
186.187 153.562 li
f
190.687 158.76 mo
189.967 158.76 li
189.967 156.037 li
189.967 155.358 189.797 154.957 189.144 154.957 cv
189.126 154.957 189.108 154.957 189.09 154.957 cv
187.47 155.003 188.1 157.253 187.987 158.76 cv
187.267 158.76 li
187.245 154.485 li
187.92 154.485 li
187.942 154.71 187.898 155.025 187.965 155.205 cv
188.213 154.71 188.617 154.418 189.337 154.395 cv
189.37 154.393 189.402 154.393 189.433 154.393 cv
191.314 154.393 190.533 157.033 190.687 158.76 cv
f
193.479 160.447 mo
193.253 160.447 192.999 160.418 192.713 160.357 cv
192.195 160.222 191.857 159.907 191.722 159.39 cv
192.443 159.278 li
192.578 159.702 192.967 159.901 193.368 159.901 cv
193.967 159.901 194.593 159.456 194.445 158.648 cv
194.445 157.972 li
194.197 158.445 193.793 158.783 193.072 158.783 cv
191.857 158.783 191.543 157.86 191.543 156.622 cv
191.543 155.362 191.902 154.44 193.14 154.418 cv
193.158 154.417 193.177 154.417 193.195 154.417 cv
193.817 154.417 194.227 154.789 194.467 155.205 cv
194.49 154.98 194.467 154.688 194.512 154.485 cv
195.187 154.485 li
194.981 157.06 195.926 160.447 193.479 160.447 cv
193.32 154.935 mo
192.443 154.935 192.285 155.7 192.285 156.622 cv
192.285 157.545 192.42 158.265 193.32 158.265 cv
194.13 158.265 194.445 157.545 194.445 156.622 cv
194.445 155.677 194.13 154.935 193.32 154.935 cv
f
200.61 160.448 mo
199.912 160.448 li
199.058 159.502 198.45 158.377 198.45 156.645 cv
198.45 154.935 199.08 153.81 199.912 152.888 cv
200.61 152.888 li
199.755 153.81 199.17 154.957 199.17 156.668 cv
199.17 158.377 199.755 159.525 200.61 160.448 cv
f
202.05 158.76 mo
201.308 158.76 li
201.308 153.18 li
205.245 153.18 li
205.245 153.81 li
202.05 153.81 li
202.05 155.88 li
205.155 155.88 li
205.155 156.51 li
202.05 156.51 li
202.05 158.76 li
f
208.32 158.857 mo
207.701 158.857 207.086 158.719 206.662 158.467 cv
206.28 158.242 206.032 157.883 205.92 157.433 cv
206.662 157.275 li
206.72 157.921 207.552 158.277 208.349 158.277 cv
209.108 158.277 209.835 157.955 209.835 157.253 cv
209.835 155.498 206.347 156.937 206.19 154.598 cv
206.126 153.547 207.192 153.08 208.263 153.08 cv
209.074 153.08 209.888 153.348 210.218 153.833 cv
210.33 153.99 210.398 154.192 210.465 154.395 cv
209.722 154.507 li
209.665 153.957 208.948 153.652 208.255 153.652 cv
207.588 153.652 206.944 153.935 206.933 154.553 cv
207.247 156.24 210.487 154.868 210.6 157.23 cv
210.644 158.373 209.476 158.857 208.32 158.857 cv
f
211.702 160.448 mo
211.005 160.448 li
211.837 159.525 212.445 158.377 212.445 156.668 cv
212.445 154.957 211.837 153.81 211.005 152.888 cv
211.702 152.888 li
212.557 153.81 213.165 154.957 213.165 156.668 cv
213.165 158.377 212.557 159.525 211.702 160.448 cv
f
420.21 174.6 mo
337.635 174.6 li
336.618 174.595 335.839 173.817 335.835 172.8 cv
335.835 6.29996 li
335.839 5.28265 336.618 4.50443 337.635 4.49997 cv
420.21 4.49997 li
421.227 4.50443 422.005 5.28265 422.01 6.29996 cv
422.01 172.8 li
422.005 173.817 421.227 174.595 420.21 174.6 cv
405.202 162.967 mo
406.035 163.89 406.642 165.037 406.642 166.747 cv
406.642 168.458 406.035 169.605 405.202 170.527 cv
405.9 170.527 li
406.755 169.605 407.363 168.458 407.363 166.747 cv
407.363 165.037 406.755 163.89 405.9 162.967 cv
405.202 162.967 li
394.38 170.527 mo
394.38 170.527 li
393.525 169.605 392.94 168.458 392.94 166.747 cv
392.94 165.037 393.525 163.89 394.38 162.967 cv
393.682 162.967 li
392.85 163.89 392.22 165.015 392.22 166.725 cv
392.22 168.458 392.827 169.582 393.682 170.527 cv
394.38 170.527 li
366.188 164.565 mo
366.342 166.291 365.582 168.932 367.464 168.932 cv
367.495 168.932 367.527 168.931 367.56 168.93 cv
368.28 168.908 368.662 168.593 368.91 168.097 cv
368.977 168.278 368.932 168.615 368.955 168.84 cv
369.63 168.84 li
369.607 164.565 li
368.91 164.565 li
368.797 166.095 369.405 168.323 367.785 168.367 cv
367.767 168.368 367.749 168.368 367.732 168.368 cv
367.057 168.368 366.907 167.945 366.907 167.265 cv
366.907 164.565 li
366.188 164.565 li
374.971 166.23 mo
373.617 166.23 372.263 166.251 372.285 167.647 cv
372.285 168.458 372.78 168.908 373.59 168.93 cv
373.61 168.931 373.63 168.931 373.649 168.931 cv
374.44 168.931 374.791 168.491 375.12 168.03 cv
375.085 168.607 375.485 168.885 375.993 168.885 cv
376.138 168.885 376.292 168.863 376.447 168.817 cv
376.447 168.367 li
376.375 168.385 376.309 168.393 376.25 168.393 cv
375.925 168.393 375.798 168.141 375.817 167.76 cv
375.817 165.915 li
375.817 164.925 375.21 164.475 374.197 164.475 cv
373.23 164.475 372.6 164.813 372.487 165.645 cv
373.23 165.713 li
373.253 165.172 373.635 165.037 374.175 165.015 cv
374.895 165.015 375.165 165.443 375.098 166.23 cv
375.055 166.23 375.013 166.23 374.971 166.23 cv
358.366 166.23 mo
357.012 166.23 355.658 166.251 355.68 167.647 cv
355.68 168.458 356.175 168.908 356.985 168.93 cv
357.005 168.931 357.025 168.931 357.044 168.931 cv
357.835 168.931 358.186 168.491 358.515 168.03 cv
358.48 168.607 358.88 168.885 359.388 168.885 cv
359.533 168.885 359.687 168.863 359.842 168.817 cv
359.842 168.367 li
359.77 168.385 359.704 168.393 359.645 168.393 cv
359.32 168.393 359.193 168.141 359.212 167.76 cv
359.212 165.915 li
359.212 164.925 358.605 164.475 357.593 164.475 cv
356.625 164.475 355.995 164.813 355.882 165.645 cv
356.625 165.713 li
356.647 165.172 357.03 165.037 357.57 165.015 cv
358.29 165.015 358.56 165.443 358.493 166.23 cv
358.45 166.23 358.408 166.23 358.366 166.23 cv
402.476 163.192 mo
400.964 163.192 399.633 164.255 399.735 166.028 cv
399.825 167.805 400.657 168.93 402.457 168.93 cv
403.717 168.93 404.46 168.3 404.865 167.445 cv
404.257 167.13 li
403.898 167.76 403.47 168.3 402.502 168.3 cv
401.152 168.3 400.5 167.378 400.5 166.028 cv
400.5 164.7 401.13 163.8 402.457 163.8 cv
403.313 163.8 403.875 164.182 404.1 164.813 cv
404.82 164.565 li
404.64 164.115 404.37 163.732 403.942 163.53 cv
403.462 163.301 402.96 163.192 402.476 163.192 cv
382.778 164.475 mo
382.761 164.475 382.743 164.475 382.725 164.475 cv
381.443 164.475 380.813 165.217 380.813 166.702 cv
380.835 168.052 381.375 168.93 382.702 168.93 cv
384.03 168.93 384.66 168.12 384.637 166.702 cv
384.637 165.326 384.133 164.475 382.778 164.475 cv
363.83 164.5 mo
362.822 164.5 361.811 165.338 361.958 166.702 cv
362.092 168.008 362.475 168.93 363.803 168.93 cv
364.77 168.93 365.332 168.39 365.467 167.558 cv
364.747 167.512 li
364.703 168.052 364.32 168.367 363.78 168.367 cv
362.902 168.367 362.7 167.58 362.7 166.68 cv
362.7 165.78 362.88 165.037 363.78 165.037 cv
364.342 165.037 364.612 165.352 364.703 165.825 cv
365.423 165.758 li
365.377 165.578 365.355 165.42 365.265 165.263 cv
364.905 164.738 364.368 164.5 363.83 164.5 cv
352.661 163.192 mo
351.149 163.192 349.818 164.255 349.92 166.028 cv
350.01 167.805 350.842 168.93 352.642 168.93 cv
353.902 168.93 354.645 168.3 355.05 167.445 cv
354.443 167.13 li
354.082 167.76 353.655 168.3 352.687 168.3 cv
351.337 168.3 350.685 167.378 350.685 166.028 cv
350.685 164.7 351.315 163.8 352.642 163.8 cv
353.497 163.8 354.06 164.182 354.285 164.813 cv
355.005 164.565 li
354.825 164.115 354.555 163.732 354.128 163.53 cv
353.647 163.301 353.145 163.192 352.661 163.192 cv
376.56 164.565 mo
376.56 165.082 li
377.055 165.082 li
377.055 167.94 li
377.055 168.659 377.494 168.915 378.019 168.915 cv
378.217 168.915 378.427 168.879 378.63 168.817 cv
378.63 168.278 li
378.508 168.32 378.387 168.343 378.275 168.343 cv
377.973 168.343 377.742 168.177 377.775 167.782 cv
377.775 165.082 li
378.563 165.082 li
378.563 164.565 li
377.775 164.565 li
377.775 163.598 li
377.302 163.598 li
377.1 164.565 li
376.56 164.565 li
395.077 163.26 mo
395.077 168.84 li
395.82 168.84 li
395.82 166.59 li
398.925 166.59 li
398.925 165.96 li
395.82 165.96 li
395.82 163.89 li
399.015 163.89 li
399.015 163.26 li
395.077 163.26 li
387.414 165.037 mo
388.067 165.037 388.237 165.438 388.237 166.117 cv
388.237 168.84 li
388.958 168.84 li
388.802 167.114 389.584 164.473 387.703 164.473 cv
387.672 164.473 387.64 164.474 387.608 164.475 cv
386.887 164.497 386.482 164.79 386.235 165.285 cv
386.167 165.105 386.212 164.79 386.19 164.565 cv
385.515 164.565 li
385.537 168.84 li
386.257 168.84 li
386.37 167.332 385.74 165.082 387.36 165.037 cv
387.378 165.037 387.396 165.037 387.414 165.037 cv
379.237 164.565 mo
379.237 168.84 li
379.957 168.84 li
379.957 164.565 li
379.237 164.565 li
370.71 162.967 mo
370.71 168.84 li
371.43 168.84 li
371.43 162.967 li
370.71 162.967 li
360.382 162.967 mo
360.382 168.84 li
361.102 168.84 li
361.102 162.967 li
360.382 162.967 li
379.237 162.967 mo
379.237 163.643 li
379.957 163.643 li
379.957 162.967 li
379.237 162.967 li
372.645 160.222 mo
372.645 160.763 li
372.794 160.793 372.931 160.807 373.06 160.807 cv
373.786 160.807 374.2 160.353 374.467 159.817 cv
376.402 154.845 li
375.66 154.845 li
374.445 158.355 li
373.162 154.845 li
372.398 154.845 li
374.085 159.098 li
373.862 159.706 373.584 160.242 372.887 160.242 cv
372.811 160.242 372.731 160.236 372.645 160.222 cv
354.42 153.472 mo
352.598 153.472 351.652 154.507 351.652 156.307 cv
351.652 158.04 352.53 159.052 354.172 159.187 cv
354.32 160.035 354.95 160.656 355.852 160.656 cv
356.052 160.656 356.266 160.625 356.49 160.56 cv
356.49 160.042 li
356.349 160.071 356.217 160.085 356.094 160.085 cv
355.455 160.085 355.07 159.709 354.937 159.142 cv
356.4 158.94 357.187 157.927 357.187 156.307 cv
357.187 154.507 356.243 153.472 354.42 153.472 cv
395.37 154.845 mo
395.525 156.571 394.765 159.212 396.647 159.212 cv
396.678 159.212 396.71 159.211 396.742 159.21 cv
397.462 159.187 397.845 158.872 398.092 158.378 cv
398.16 158.557 398.115 158.895 398.137 159.12 cv
398.812 159.12 li
398.79 154.845 li
398.092 154.845 li
397.98 156.375 398.587 158.602 396.968 158.648 cv
396.949 158.648 396.932 158.648 396.914 158.648 cv
396.24 158.648 396.09 158.225 396.09 157.545 cv
396.09 154.845 li
395.37 154.845 li
358.087 154.845 mo
358.242 156.571 357.483 159.212 359.364 159.212 cv
359.395 159.212 359.427 159.211 359.46 159.21 cv
360.18 159.187 360.562 158.872 360.81 158.378 cv
360.877 158.557 360.832 158.895 360.855 159.12 cv
361.53 159.12 li
361.508 154.845 li
360.81 154.845 li
360.697 156.375 361.305 158.602 359.685 158.648 cv
359.667 158.648 359.649 158.648 359.632 158.648 cv
358.957 158.648 358.808 158.225 358.808 157.545 cv
358.808 154.845 li
358.087 154.845 li
391.126 156.51 mo
389.772 156.51 388.418 156.531 388.44 157.927 cv
388.44 158.737 388.935 159.187 389.745 159.21 cv
389.765 159.21 389.785 159.211 389.805 159.211 cv
390.595 159.211 390.946 158.771 391.275 158.31 cv
391.24 158.887 391.64 159.165 392.148 159.165 cv
392.293 159.165 392.447 159.143 392.602 159.098 cv
392.602 158.648 li
392.53 158.665 392.464 158.673 392.405 158.673 cv
392.08 158.673 391.953 158.421 391.973 158.04 cv
391.973 156.195 li
391.973 155.205 391.365 154.755 390.352 154.755 cv
389.385 154.755 388.755 155.092 388.642 155.925 cv
389.385 155.992 li
389.408 155.452 389.79 155.318 390.33 155.295 cv
391.05 155.295 391.32 155.722 391.252 156.51 cv
391.21 156.51 391.168 156.51 391.126 156.51 cv
365.093 156.51 mo
363.739 156.51 362.386 156.531 362.408 157.927 cv
362.408 158.737 362.902 159.187 363.712 159.21 cv
363.733 159.21 363.752 159.211 363.772 159.211 cv
364.562 159.211 364.913 158.771 365.242 158.31 cv
365.207 158.887 365.608 159.165 366.115 159.165 cv
366.261 159.165 366.415 159.143 366.57 159.098 cv
366.57 158.648 li
366.497 158.665 366.432 158.673 366.373 158.673 cv
366.047 158.673 365.921 158.421 365.94 158.04 cv
365.94 156.195 li
365.94 155.205 365.332 154.755 364.32 154.755 cv
363.352 154.755 362.723 155.092 362.61 155.925 cv
363.352 155.992 li
363.375 155.452 363.758 155.318 364.297 155.295 cv
365.017 155.295 365.288 155.722 365.22 156.51 cv
365.178 156.51 365.136 156.51 365.093 156.51 cv
404.28 154.755 mo
402.952 154.755 402.39 155.587 402.367 156.96 cv
402.345 158.378 403.02 159.21 404.325 159.21 cv
405.225 159.21 405.81 158.828 406.057 158.198 cv
405.428 158.018 li
405.297 158.386 404.937 158.671 404.387 158.671 cv
404.367 158.671 404.346 158.671 404.325 158.67 cv
403.448 158.648 403.133 158.04 403.133 157.14 cv
406.17 157.14 li
406.215 155.7 405.698 154.755 404.28 154.755 cv
385.852 154.755 mo
384.525 154.755 383.962 155.587 383.94 156.96 cv
383.917 158.378 384.593 159.21 385.897 159.21 cv
386.797 159.21 387.382 158.828 387.63 158.198 cv
387 158.018 li
386.87 158.386 386.51 158.671 385.96 158.671 cv
385.939 158.671 385.919 158.671 385.897 158.67 cv
385.02 158.648 384.705 158.04 384.705 157.14 cv
387.742 157.14 li
387.787 155.7 387.27 154.755 385.852 154.755 cv
392.715 154.845 mo
392.715 155.362 li
393.21 155.362 li
393.21 158.22 li
393.21 158.939 393.649 159.195 394.175 159.195 cv
394.372 159.195 394.582 159.159 394.785 159.098 cv
394.785 158.557 li
394.663 158.6 394.542 158.623 394.43 158.623 cv
394.128 158.623 393.897 158.456 393.93 158.063 cv
393.93 155.362 li
394.717 155.362 li
394.717 154.845 li
393.93 154.845 li
393.93 153.877 li
393.457 153.877 li
393.255 154.845 li
392.715 154.845 li
370.237 154.845 mo
370.237 155.362 li
370.733 155.362 li
370.733 158.22 li
370.733 158.939 371.172 159.195 371.697 159.195 cv
371.895 159.195 372.104 159.159 372.307 159.098 cv
372.307 158.557 li
372.186 158.6 372.064 158.623 371.952 158.623 cv
371.65 158.623 371.42 158.456 371.452 158.063 cv
371.452 155.362 li
372.24 155.362 li
372.24 154.845 li
371.452 154.845 li
371.452 153.877 li
370.98 153.877 li
370.777 154.845 li
370.237 154.845 li
399.892 154.845 mo
399.915 159.12 li
400.635 159.12 li
400.719 157.61 400.236 155.416 401.591 155.416 cv
401.689 155.416 401.798 155.428 401.917 155.452 cv
401.917 154.8 li
401.806 154.775 401.702 154.763 401.607 154.763 cv
401.027 154.763 400.728 155.201 400.612 155.722 cv
400.545 155.498 400.59 155.115 400.568 154.845 cv
399.892 154.845 li
379.35 153.54 mo
379.35 159.12 li
380.092 159.12 li
380.092 156.87 li
383.197 156.87 li
383.197 156.24 li
380.092 156.24 li
380.092 154.17 li
383.287 154.17 li
383.287 153.54 li
379.35 153.54 li
368.888 154.845 mo
368.888 159.12 li
369.607 159.12 li
369.607 154.845 li
368.888 154.845 li
367.11 153.248 mo
367.11 159.12 li
367.83 159.12 li
367.83 153.248 li
367.11 153.248 li
368.888 153.248 mo
368.888 153.922 li
369.607 153.922 li
369.607 153.248 li
368.888 153.248 li
382.747 168.391 mo
382.732 168.391 382.717 168.39 382.702 168.39 cv
381.78 168.367 381.555 167.67 381.555 166.702 cv
381.555 165.735 381.78 165.015 382.747 165.015 cv
383.715 165.015 383.895 165.735 383.895 166.702 cv
383.895 167.678 383.699 168.391 382.747 168.391 cv
373.747 168.39 mo
373.297 168.39 373.027 168.097 373.027 167.647 cv
373.027 166.613 374.13 166.77 375.098 166.725 cv
375.165 167.737 374.67 168.323 373.747 168.39 cv
357.143 168.39 mo
356.693 168.39 356.422 168.097 356.422 167.647 cv
356.422 166.613 357.525 166.77 358.493 166.725 cv
358.56 167.737 358.065 168.323 357.143 168.39 cv
389.902 158.67 mo
389.452 158.67 389.182 158.378 389.182 157.927 cv
389.182 156.892 390.285 157.05 391.252 157.005 cv
391.32 158.018 390.825 158.602 389.902 158.67 cv
363.87 158.67 mo
363.42 158.67 363.15 158.378 363.15 157.927 cv
363.15 156.892 364.252 157.05 365.22 157.005 cv
365.288 158.018 364.792 158.602 363.87 158.67 cv
354.42 158.58 mo
353.047 158.557 352.417 157.657 352.417 156.307 cv
352.417 154.957 353.047 154.08 354.42 154.08 cv
355.77 154.08 356.422 154.957 356.422 156.307 cv
356.422 157.657 355.837 158.58 354.42 158.58 cv
405.45 156.577 mo
403.133 156.577 li
403.133 156.33 403.2 156.105 403.267 155.948 cv
403.456 155.508 403.863 155.304 404.275 155.304 cv
404.897 155.304 405.531 155.766 405.45 156.577 cv
387.022 156.577 mo
384.705 156.577 li
384.705 156.33 384.772 156.105 384.84 155.948 cv
385.028 155.508 385.435 155.304 385.848 155.304 cv
386.469 155.304 387.104 155.766 387.022 156.577 cv
.819608 .941176 .698039 rgb
f
420.212 175.5 mo
420.211 175.5 420.211 175.5 420.21 175.5 cv
337.635 175.5 li
336.886 175.501 336.206 175.203 335.719 174.716 cv
335.231 174.229 334.934 173.549 334.935 172.8 cv
334.935 6.29996 li
335.385 6.29996 li
335.385 172.8 li
335.385 174.06 336.375 175.05 337.635 175.05 cv
420.21 175.05 li
421.47 175.05 422.46 174.06 422.46 172.8 cv
422.46 6.29996 li
422.46 5.04007 421.47 4.04998 420.21 4.04998 cv
337.635 4.04998 li
336.375 4.04998 335.385 5.04007 335.385 6.29996 cv
335.385 6.29996 li
334.935 6.29996 li
334.934 5.55135 335.231 4.87102 335.719 4.38425 cv
336.206 3.89694 336.885 3.59998 337.633 3.59998 cv
337.634 3.59998 337.634 3.59998 337.635 3.59998 cv
420.21 3.59998 li
420.959 3.5995 421.639 3.89653 422.126 4.38425 cv
422.613 4.87102 422.911 5.55135 422.91 6.29996 cv
422.91 172.8 li
422.911 173.549 422.613 174.229 422.126 174.716 cv
421.639 175.203 420.96 175.5 420.212 175.5 cv
.698039 .698039 .698039 rgb
f
420.21 175.05 mo
337.635 175.05 li
336.375 175.05 335.385 174.06 335.385 172.8 cv
335.385 6.29996 li
335.835 6.29996 li
335.385 6.29996 li
335.385 5.04007 336.375 4.04998 337.635 4.04998 cv
420.21 4.04998 li
421.47 4.04998 422.46 5.04007 422.46 6.29996 cv
422.46 172.8 li
422.46 174.06 421.47 175.05 420.21 175.05 cv
335.835 6.29996 mo
335.835 172.8 li
335.839 173.817 336.618 174.595 337.635 174.6 cv
420.21 174.6 li
421.227 174.595 422.005 173.817 422.01 172.8 cv
422.01 6.29996 li
422.005 5.28265 421.227 4.50443 420.21 4.49997 cv
337.635 4.49997 li
336.618 4.50443 335.839 5.28265 335.835 6.29996 cv
335.835 6.29996 li
.572549 .658823 .486274 rgb
f
355.852 160.656 mo
354.95 160.656 354.32 160.035 354.172 159.187 cv
352.53 159.052 351.652 158.04 351.652 156.307 cv
351.652 154.507 352.598 153.472 354.42 153.472 cv
356.243 153.472 357.187 154.507 357.187 156.307 cv
357.187 157.927 356.4 158.94 354.937 159.142 cv
355.07 159.709 355.455 160.085 356.094 160.085 cv
356.217 160.085 356.349 160.071 356.49 160.042 cv
356.49 160.56 li
356.266 160.625 356.052 160.656 355.852 160.656 cv
354.42 154.08 mo
353.047 154.08 352.417 154.957 352.417 156.307 cv
352.417 157.657 353.047 158.557 354.42 158.58 cv
355.837 158.58 356.422 157.657 356.422 156.307 cv
356.422 154.957 355.77 154.08 354.42 154.08 cv
f
359.364 159.212 mo
357.483 159.212 358.242 156.571 358.087 154.845 cv
358.808 154.845 li
358.808 157.545 li
358.808 158.225 358.957 158.648 359.632 158.648 cv
359.649 158.648 359.667 158.648 359.685 158.648 cv
361.305 158.602 360.697 156.375 360.81 154.845 cv
361.508 154.845 li
361.53 159.12 li
360.855 159.12 li
360.832 158.895 360.877 158.557 360.81 158.378 cv
360.562 158.872 360.18 159.187 359.46 159.21 cv
359.427 159.211 359.395 159.212 359.364 159.212 cv
f
363.772 159.211 mo
363.752 159.211 363.733 159.21 363.712 159.21 cv
362.902 159.187 362.408 158.737 362.408 157.927 cv
362.386 156.531 363.739 156.51 365.093 156.51 cv
365.136 156.51 365.178 156.51 365.22 156.51 cv
365.288 155.722 365.017 155.295 364.297 155.295 cv
363.758 155.318 363.375 155.452 363.352 155.992 cv
362.61 155.925 li
362.723 155.092 363.352 154.755 364.32 154.755 cv
365.332 154.755 365.94 155.205 365.94 156.195 cv
365.94 158.04 li
365.921 158.421 366.047 158.673 366.373 158.673 cv
366.432 158.673 366.497 158.665 366.57 158.648 cv
366.57 159.098 li
366.415 159.143 366.261 159.165 366.115 159.165 cv
365.608 159.165 365.207 158.887 365.242 158.31 cv
364.913 158.771 364.562 159.211 363.772 159.211 cv
365.22 157.005 mo
364.252 157.05 363.15 156.892 363.15 157.927 cv
363.15 158.378 363.42 158.67 363.87 158.67 cv
364.792 158.602 365.288 158.018 365.22 157.005 cv
f
367.83 159.12 mo
367.11 159.12 li
367.11 153.248 li
367.83 153.248 li
367.83 159.12 li
f
369.607 159.12 mo
368.888 159.12 li
368.888 154.845 li
369.607 154.845 li
369.607 159.12 li
369.607 153.922 mo
368.888 153.922 li
368.888 153.248 li
369.607 153.248 li
369.607 153.922 li
f
371.697 159.195 mo
371.172 159.195 370.733 158.939 370.733 158.22 cv
370.733 155.362 li
370.237 155.362 li
370.237 154.845 li
370.777 154.845 li
370.98 153.877 li
371.452 153.877 li
371.452 154.845 li
372.24 154.845 li
372.24 155.362 li
371.452 155.362 li
371.452 158.063 li
371.42 158.456 371.65 158.623 371.952 158.623 cv
372.064 158.623 372.186 158.6 372.307 158.557 cv
372.307 159.098 li
372.104 159.159 371.895 159.195 371.697 159.195 cv
f
373.06 160.807 mo
372.931 160.807 372.794 160.793 372.645 160.763 cv
372.645 160.222 li
372.731 160.236 372.811 160.242 372.887 160.242 cv
373.584 160.242 373.862 159.706 374.085 159.098 cv
372.398 154.845 li
373.162 154.845 li
374.445 158.355 li
375.66 154.845 li
376.402 154.845 li
374.467 159.817 li
374.2 160.353 373.786 160.807 373.06 160.807 cv
f
380.092 159.12 mo
379.35 159.12 li
379.35 153.54 li
383.287 153.54 li
383.287 154.17 li
380.092 154.17 li
380.092 156.24 li
383.197 156.24 li
383.197 156.87 li
380.092 156.87 li
380.092 159.12 li
f
385.897 159.21 mo
384.593 159.21 383.917 158.378 383.94 156.96 cv
383.962 155.587 384.525 154.755 385.852 154.755 cv
387.27 154.755 387.787 155.7 387.742 157.14 cv
384.705 157.14 li
384.705 158.04 385.02 158.648 385.897 158.67 cv
385.919 158.671 385.939 158.671 385.96 158.671 cv
386.51 158.671 386.87 158.386 387 158.018 cv
387.63 158.198 li
387.382 158.828 386.797 159.21 385.897 159.21 cv
385.848 155.304 mo
385.435 155.304 385.028 155.508 384.84 155.948 cv
384.772 156.105 384.705 156.33 384.705 156.577 cv
387.022 156.577 li
387.104 155.766 386.469 155.304 385.848 155.304 cv
f
389.805 159.211 mo
389.785 159.211 389.765 159.21 389.745 159.21 cv
388.935 159.187 388.44 158.737 388.44 157.927 cv
388.418 156.531 389.772 156.51 391.126 156.51 cv
391.168 156.51 391.21 156.51 391.252 156.51 cv
391.32 155.722 391.05 155.295 390.33 155.295 cv
389.79 155.318 389.408 155.452 389.385 155.992 cv
388.642 155.925 li
388.755 155.092 389.385 154.755 390.352 154.755 cv
391.365 154.755 391.973 155.205 391.973 156.195 cv
391.973 158.04 li
391.953 158.421 392.08 158.673 392.405 158.673 cv
392.464 158.673 392.53 158.665 392.602 158.648 cv
392.602 159.098 li
392.447 159.143 392.293 159.165 392.148 159.165 cv
391.64 159.165 391.24 158.887 391.275 158.31 cv
390.946 158.771 390.595 159.211 389.805 159.211 cv
391.252 157.005 mo
390.285 157.05 389.182 156.892 389.182 157.927 cv
389.182 158.378 389.452 158.67 389.902 158.67 cv
390.825 158.602 391.32 158.018 391.252 157.005 cv
f
394.175 159.195 mo
393.649 159.195 393.21 158.939 393.21 158.22 cv
393.21 155.362 li
392.715 155.362 li
392.715 154.845 li
393.255 154.845 li
393.457 153.877 li
393.93 153.877 li
393.93 154.845 li
394.717 154.845 li
394.717 155.362 li
393.93 155.362 li
393.93 158.063 li
393.897 158.456 394.128 158.623 394.43 158.623 cv
394.542 158.623 394.663 158.6 394.785 158.557 cv
394.785 159.098 li
394.582 159.159 394.372 159.195 394.175 159.195 cv
f
396.647 159.212 mo
394.765 159.212 395.525 156.571 395.37 154.845 cv
396.09 154.845 li
396.09 157.545 li
396.09 158.225 396.24 158.648 396.914 158.648 cv
396.932 158.648 396.949 158.648 396.968 158.648 cv
398.587 158.602 397.98 156.375 398.092 154.845 cv
398.79 154.845 li
398.812 159.12 li
398.137 159.12 li
398.115 158.895 398.16 158.557 398.092 158.378 cv
397.845 158.872 397.462 159.187 396.742 159.21 cv
396.71 159.211 396.678 159.212 396.647 159.212 cv
f
400.635 159.12 mo
399.915 159.12 li
399.892 154.845 li
400.568 154.845 li
400.59 155.115 400.545 155.498 400.612 155.722 cv
400.728 155.201 401.027 154.763 401.607 154.763 cv
401.702 154.763 401.806 154.775 401.917 154.8 cv
401.917 155.452 li
401.798 155.428 401.689 155.416 401.591 155.416 cv
400.236 155.416 400.719 157.61 400.635 159.12 cv
f
404.325 159.21 mo
403.02 159.21 402.345 158.378 402.367 156.96 cv
402.39 155.587 402.952 154.755 404.28 154.755 cv
405.698 154.755 406.215 155.7 406.17 157.14 cv
403.133 157.14 li
403.133 158.04 403.448 158.648 404.325 158.67 cv
404.346 158.671 404.367 158.671 404.387 158.671 cv
404.937 158.671 405.297 158.386 405.428 158.018 cv
406.057 158.198 li
405.81 158.828 405.225 159.21 404.325 159.21 cv
404.275 155.304 mo
403.863 155.304 403.456 155.508 403.267 155.948 cv
403.2 156.105 403.133 156.33 403.133 156.577 cv
405.45 156.577 li
405.531 155.766 404.897 155.304 404.275 155.304 cv
f
352.642 168.93 mo
350.842 168.93 350.01 167.805 349.92 166.028 cv
349.818 164.255 351.149 163.192 352.661 163.192 cv
353.145 163.192 353.647 163.301 354.128 163.53 cv
354.555 163.732 354.825 164.115 355.005 164.565 cv
354.285 164.813 li
354.06 164.182 353.497 163.8 352.642 163.8 cv
351.315 163.8 350.685 164.7 350.685 166.028 cv
350.685 167.378 351.337 168.3 352.687 168.3 cv
353.655 168.3 354.082 167.76 354.443 167.13 cv
355.05 167.445 li
354.645 168.3 353.902 168.93 352.642 168.93 cv
f
357.044 168.931 mo
357.025 168.931 357.005 168.931 356.985 168.93 cv
356.175 168.908 355.68 168.458 355.68 167.647 cv
355.658 166.251 357.012 166.23 358.366 166.23 cv
358.408 166.23 358.45 166.23 358.493 166.23 cv
358.56 165.443 358.29 165.015 357.57 165.015 cv
357.03 165.037 356.647 165.172 356.625 165.713 cv
355.882 165.645 li
355.995 164.813 356.625 164.475 357.593 164.475 cv
358.605 164.475 359.212 164.925 359.212 165.915 cv
359.212 167.76 li
359.193 168.141 359.32 168.393 359.645 168.393 cv
359.704 168.393 359.77 168.385 359.842 168.367 cv
359.842 168.817 li
359.687 168.863 359.533 168.885 359.388 168.885 cv
358.88 168.885 358.48 168.607 358.515 168.03 cv
358.186 168.491 357.835 168.931 357.044 168.931 cv
358.493 166.725 mo
357.525 166.77 356.422 166.613 356.422 167.647 cv
356.422 168.097 356.693 168.39 357.143 168.39 cv
358.065 168.323 358.56 167.737 358.493 166.725 cv
f
361.102 168.84 mo
360.382 168.84 li
360.382 162.967 li
361.102 162.967 li
361.102 168.84 li
f
363.803 168.93 mo
362.475 168.93 362.092 168.008 361.958 166.702 cv
361.811 165.338 362.822 164.5 363.83 164.5 cv
364.368 164.5 364.905 164.738 365.265 165.263 cv
365.355 165.42 365.377 165.578 365.423 165.758 cv
364.703 165.825 li
364.612 165.352 364.342 165.037 363.78 165.037 cv
362.88 165.037 362.7 165.78 362.7 166.68 cv
362.7 167.58 362.902 168.367 363.78 168.367 cv
364.32 168.367 364.703 168.052 364.747 167.512 cv
365.467 167.558 li
365.332 168.39 364.77 168.93 363.803 168.93 cv
f
367.464 168.932 mo
365.582 168.932 366.342 166.291 366.188 164.565 cv
366.907 164.565 li
366.907 167.265 li
366.907 167.945 367.057 168.368 367.732 168.368 cv
367.749 168.368 367.767 168.368 367.785 168.367 cv
369.405 168.323 368.797 166.095 368.91 164.565 cv
369.607 164.565 li
369.63 168.84 li
368.955 168.84 li
368.932 168.615 368.977 168.278 368.91 168.097 cv
368.662 168.593 368.28 168.908 367.56 168.93 cv
367.527 168.931 367.495 168.932 367.464 168.932 cv
f
371.43 168.84 mo
370.71 168.84 li
370.71 162.967 li
371.43 162.967 li
371.43 168.84 li
f
373.649 168.931 mo
373.63 168.931 373.61 168.931 373.59 168.93 cv
372.78 168.908 372.285 168.458 372.285 167.647 cv
372.263 166.251 373.617 166.23 374.971 166.23 cv
375.013 166.23 375.055 166.23 375.098 166.23 cv
375.165 165.443 374.895 165.015 374.175 165.015 cv
373.635 165.037 373.253 165.172 373.23 165.713 cv
372.487 165.645 li
372.6 164.813 373.23 164.475 374.197 164.475 cv
375.21 164.475 375.817 164.925 375.817 165.915 cv
375.817 167.76 li
375.798 168.141 375.925 168.393 376.25 168.393 cv
376.309 168.393 376.375 168.385 376.447 168.367 cv
376.447 168.817 li
376.292 168.863 376.138 168.885 375.993 168.885 cv
375.485 168.885 375.085 168.607 375.12 168.03 cv
374.791 168.491 374.44 168.931 373.649 168.931 cv
375.098 166.725 mo
374.13 166.77 373.027 166.613 373.027 167.647 cv
373.027 168.097 373.297 168.39 373.747 168.39 cv
374.67 168.323 375.165 167.737 375.098 166.725 cv
f
378.019 168.915 mo
377.494 168.915 377.055 168.659 377.055 167.94 cv
377.055 165.082 li
376.56 165.082 li
376.56 164.565 li
377.1 164.565 li
377.302 163.598 li
377.775 163.598 li
377.775 164.565 li
378.563 164.565 li
378.563 165.082 li
377.775 165.082 li
377.775 167.782 li
377.742 168.177 377.973 168.343 378.275 168.343 cv
378.387 168.343 378.508 168.32 378.63 168.278 cv
378.63 168.817 li
378.427 168.879 378.217 168.915 378.019 168.915 cv
f
379.957 168.84 mo
379.237 168.84 li
379.237 164.565 li
379.957 164.565 li
379.957 168.84 li
379.957 163.643 mo
379.237 163.643 li
379.237 162.967 li
379.957 162.967 li
379.957 163.643 li
f
382.702 168.93 mo
381.375 168.93 380.835 168.052 380.813 166.702 cv
380.813 165.217 381.443 164.475 382.725 164.475 cv
382.743 164.475 382.761 164.475 382.778 164.475 cv
384.133 164.475 384.637 165.326 384.637 166.702 cv
384.66 168.12 384.03 168.93 382.702 168.93 cv
382.747 165.015 mo
381.78 165.015 381.555 165.735 381.555 166.702 cv
381.555 167.67 381.78 168.367 382.702 168.39 cv
382.717 168.39 382.732 168.391 382.747 168.391 cv
383.699 168.391 383.895 167.678 383.895 166.702 cv
383.895 165.735 383.715 165.015 382.747 165.015 cv
f
388.958 168.84 mo
388.237 168.84 li
388.237 166.117 li
388.237 165.438 388.067 165.037 387.414 165.037 cv
387.396 165.037 387.378 165.037 387.36 165.037 cv
385.74 165.082 386.37 167.332 386.257 168.84 cv
385.537 168.84 li
385.515 164.565 li
386.19 164.565 li
386.212 164.79 386.167 165.105 386.235 165.285 cv
386.482 164.79 386.887 164.497 387.608 164.475 cv
387.64 164.474 387.672 164.473 387.703 164.473 cv
389.584 164.473 388.802 167.114 388.958 168.84 cv
f
394.38 170.527 mo
393.682 170.527 li
392.827 169.582 392.22 168.458 392.22 166.725 cv
392.22 165.015 392.85 163.89 393.682 162.967 cv
394.38 162.967 li
393.525 163.89 392.94 165.037 392.94 166.747 cv
392.94 168.458 393.525 169.605 394.38 170.527 cv
f
395.82 168.84 mo
395.077 168.84 li
395.077 163.26 li
399.015 163.26 li
399.015 163.89 li
395.82 163.89 li
395.82 165.96 li
398.925 165.96 li
398.925 166.59 li
395.82 166.59 li
395.82 168.84 li
f
402.457 168.93 mo
400.657 168.93 399.825 167.805 399.735 166.028 cv
399.633 164.255 400.964 163.192 402.476 163.192 cv
402.96 163.192 403.462 163.301 403.942 163.53 cv
404.37 163.732 404.64 164.115 404.82 164.565 cv
404.1 164.813 li
403.875 164.182 403.313 163.8 402.457 163.8 cv
401.13 163.8 400.5 164.7 400.5 166.028 cv
400.5 167.378 401.152 168.3 402.502 168.3 cv
403.47 168.3 403.898 167.76 404.257 167.13 cv
404.865 167.445 li
404.46 168.3 403.717 168.93 402.457 168.93 cv
f
405.9 170.527 mo
405.202 170.527 li
406.035 169.605 406.642 168.458 406.642 166.747 cv
406.642 165.037 406.035 163.89 405.202 162.967 cv
405.9 162.967 li
406.755 163.89 407.363 165.037 407.363 166.747 cv
407.363 168.458 406.755 169.605 405.9 170.527 cv
f
162 189.9 mo
162 188.64 162.99 187.65 164.25 187.65 cv
177.75 187.65 li
179.01 187.65 180 188.64 180 189.9 cv
180 203.4 li
180 204.66 179.01 205.65 177.75 205.65 cv
164.25 205.65 li
162.99 205.65 162 204.66 162 203.4 cv
cp
.901 .901 .901 rgb
f
.9 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
162 189.9 mo
162 188.64 162.99 187.65 164.25 187.65 cv
177.75 187.65 li
179.01 187.65 180 188.64 180 189.9 cv
180 203.4 li
180 204.66 179.01 205.65 177.75 205.65 cv
164.25 205.65 li
162.99 205.65 162 204.66 162 203.4 cv
cp
0 0 0 rgb
@
233.55 189.9 mo
233.55 188.64 234.54 187.65 235.8 187.65 cv
249.3 187.65 li
250.56 187.65 251.55 188.64 251.55 189.9 cv
251.55 203.4 li
251.55 204.66 250.56 205.65 249.3 205.65 cv
235.8 205.65 li
234.54 205.65 233.55 204.66 233.55 203.4 cv
cp
.4 .8 0 rgb
f
233.55 189.9 mo
233.55 188.64 234.54 187.65 235.8 187.65 cv
249.3 187.65 li
250.56 187.65 251.55 188.64 251.55 189.9 cv
251.55 203.4 li
251.55 204.66 250.56 205.65 249.3 205.65 cv
235.8 205.65 li
234.54 205.65 233.55 204.66 233.55 203.4 cv
cp
0 0 0 rgb
@
191.032 187.397 mo
190.893 186.065 187.616 185.898 187.589 187.453 cv
187.977 189.535 191.976 187.842 192.114 190.757 cv
192.198 192.923 188.755 193.173 187.255 192.284 cv
186.783 192.006 186.478 191.562 186.339 191.007 cv
187.255 190.813 li
187.394 192.367 191.17 192.562 191.17 190.785 cv
191.17 188.619 186.867 190.396 186.672 187.508 cv
186.534 185.232 190.698 185.176 191.642 186.564 cv
191.781 186.759 191.864 187.009 191.948 187.259 cv
f
196.473 191.645 mo
196.057 192.229 195.613 192.784 194.585 192.756 cv
193.586 192.728 192.975 192.173 192.975 191.173 cv
192.947 189.396 194.724 189.424 196.446 189.424 cv
196.529 188.452 196.196 187.925 195.307 187.925 cv
194.641 187.953 194.169 188.119 194.141 188.786 cv
193.225 188.702 li
193.364 187.675 194.141 187.259 195.335 187.259 cv
196.585 187.259 197.334 187.814 197.334 189.036 cv
197.334 191.312 li
197.306 191.868 197.529 192.201 198.112 192.062 cv
198.112 192.617 li
197.251 192.867 196.418 192.562 196.473 191.645 cv
cp
193.891 191.173 mo
193.891 191.729 194.225 192.09 194.78 192.09 cv
195.918 192.006 196.529 191.285 196.446 190.035 cv
195.252 190.091 193.891 189.896 193.891 191.173 cv
f
203.942 187.953 mo
202.082 188.036 202.887 190.868 202.721 192.645 cv
201.86 192.645 li
201.86 189.285 li
201.86 188.48 201.721 187.897 200.888 187.953 cv
199.056 188.064 199.833 190.84 199.666 192.645 cv
198.806 192.645 li
198.778 187.37 li
199.611 187.37 li
199.639 187.647 199.583 188.036 199.666 188.258 cv
199.944 187.036 202.415 186.87 202.637 188.258 cv
202.943 187.675 203.387 187.286 204.248 187.259 cv
206.608 187.203 205.553 190.563 205.775 192.645 cv
204.914 192.645 li
204.914 189.285 li
204.914 188.48 204.775 187.925 203.942 187.953 cv
f
209.606 187.259 mo
211.133 187.286 211.55 188.397 211.55 189.98 cv
211.55 191.562 211.106 192.701 209.606 192.756 cv
208.746 192.756 208.246 192.395 207.94 191.812 cv
207.968 194.727 li
207.08 194.727 li
207.052 187.37 li
207.913 187.37 li
207.968 188.203 li
208.246 187.62 208.746 187.259 209.606 187.259 cv
cp
209.384 192.09 mo
210.495 192.09 210.634 191.146 210.634 190.007 cv
210.634 188.869 210.467 187.98 209.384 187.953 cv
208.218 187.953 207.968 188.841 207.968 190.063 cv
207.968 191.257 208.246 192.09 209.384 192.09 cv
f
212.633 192.645 mo
212.633 185.398 li
213.521 185.398 li
213.521 192.645 li
212.633 192.645 li
f
216.936 187.259 mo
218.685 187.259 219.324 188.425 219.269 190.202 cv
215.52 190.202 li
215.52 191.312 215.909 192.062 216.992 192.09 cv
217.714 192.117 218.186 191.757 218.352 191.285 cv
219.13 191.507 li
218.824 192.284 218.102 192.756 216.992 192.756 cv
215.381 192.756 214.548 191.729 214.576 189.98 cv
214.604 188.286 215.298 187.259 216.936 187.259 cv
cp
218.38 189.508 mo
218.547 187.842 216.27 187.37 215.687 188.73 cv
215.604 188.924 215.52 189.202 215.52 189.508 cv
218.38 189.508 li
f
222.073 187.259 mo
222.934 187.259 223.405 187.62 223.739 188.175 cv
223.711 185.398 li
224.599 185.398 li
224.627 192.645 li
223.794 192.645 li
223.739 192.367 223.794 192.006 223.711 191.784 cv
223.433 192.423 222.934 192.756 222.073 192.756 cv
220.601 192.756 220.157 191.673 220.129 190.035 cv
220.129 188.203 220.768 187.259 222.073 187.259 cv
cp
222.323 187.925 mo
221.212 187.925 221.045 188.869 221.045 190.007 cv
221.045 191.118 221.212 192.062 222.295 192.062 cv
223.461 192.062 223.711 191.173 223.711 189.952 cv
223.711 188.786 223.461 187.897 222.323 187.925 cv
f
186.728 197.729 mo
190.004 197.535 192.725 197.951 192.642 201.117 cv
192.559 203.282 191.448 204.615 189.282 204.615 cv
186.728 204.615 li
186.728 197.729 li
cp
187.644 203.865 mo
190.115 204.087 191.698 203.421 191.698 201.117 cv
191.698 198.812 190.032 198.312 187.644 198.479 cv
187.644 203.865 li
f
197.001 203.615 mo
196.585 204.199 196.14 204.754 195.113 204.726 cv
194.113 204.698 193.503 204.143 193.503 203.143 cv
193.475 201.366 195.252 201.394 196.973 201.394 cv
197.057 200.422 196.723 199.895 195.835 199.895 cv
195.169 199.923 194.697 200.089 194.669 200.756 cv
193.752 200.672 li
193.891 199.645 194.669 199.229 195.863 199.229 cv
197.112 199.229 197.862 199.784 197.862 201.006 cv
197.862 203.282 li
197.834 203.838 198.056 204.171 198.639 204.032 cv
198.639 204.587 li
197.778 204.837 196.945 204.532 197.001 203.615 cv
cp
194.419 203.143 mo
194.419 203.699 194.752 204.06 195.307 204.06 cv
196.446 203.976 197.057 203.255 196.973 202.005 cv
195.779 202.061 194.419 201.866 194.419 203.143 cv
f
200.277 203.31 mo
200.222 203.976 200.777 204.115 201.332 203.921 cv
201.332 204.587 li
200.416 204.865 199.389 204.726 199.389 203.504 cv
199.389 199.978 li
198.778 199.978 li
198.778 199.34 li
199.444 199.34 li
199.694 198.146 li
200.277 198.146 li
200.277 199.34 li
201.249 199.34 li
201.249 199.978 li
200.277 199.978 li
200.277 203.31 li
f
205.33 203.615 mo
204.914 204.199 204.47 204.754 203.442 204.726 cv
202.443 204.698 201.832 204.143 201.832 203.143 cv
201.804 201.366 203.581 201.394 205.303 201.394 cv
205.386 200.422 205.053 199.895 204.164 199.895 cv
203.498 199.923 203.026 200.089 202.998 200.756 cv
202.082 200.672 li
202.221 199.645 202.998 199.229 204.192 199.229 cv
205.442 199.229 206.191 199.784 206.191 201.006 cv
206.191 203.282 li
206.163 203.838 206.386 204.171 206.969 204.032 cv
206.969 204.587 li
206.108 204.837 205.275 204.532 205.33 203.615 cv
cp
202.748 203.143 mo
202.748 203.699 203.082 204.06 203.637 204.06 cv
204.775 203.976 205.386 203.255 205.303 202.005 cv
204.109 202.061 202.748 201.866 202.748 203.143 cv
f
260.92 192.756 mo
258.644 192.756 257.561 191.423 257.45 189.174 cv
257.311 186.204 260.226 184.899 262.808 186.092 cv
263.28 186.315 263.614 186.787 263.836 187.286 cv
262.947 187.536 li
262.586 186.842 261.92 186.426 260.837 186.426 cv
259.143 186.426 258.394 187.508 258.394 189.174 cv
258.394 190.868 259.199 191.951 260.92 191.979 cv
261.892 191.979 262.642 191.673 263.114 191.229 cv
263.114 189.98 li
261.059 189.98 li
261.059 189.202 li
263.975 189.202 li
263.975 191.59 li
263.28 192.284 262.281 192.756 260.92 192.756 cv
f
265.557 185.759 mo
267.973 185.787 270.86 185.343 270.86 187.842 cv
270.86 190.007 268.722 190.063 266.473 189.952 cv
266.473 192.645 li
265.557 192.645 li
265.557 185.759 li
cp
266.473 189.23 mo
268.056 189.23 269.916 189.535 269.916 187.842 cv
269.916 186.204 268.028 186.537 266.473 186.509 cv
266.473 189.23 li
f
277.829 190.063 mo
277.801 191.868 276.719 192.756 274.942 192.756 cv
273.248 192.756 272.165 191.868 272.165 190.146 cv
272.165 185.759 li
273.081 185.759 li
273.304 188.23 272.165 191.979 274.942 191.979 cv
277.774 191.979 276.719 188.286 276.913 185.759 cv
277.829 185.759 li
277.829 190.063 li
f
262.336 204.615 mo
259.588 201.283 li
258.699 201.977 li
258.699 204.615 li
257.783 204.615 li
257.783 197.729 li
258.699 197.729 li
258.699 201.172 li
262.003 197.729 li
263.114 197.729 li
260.198 200.728 li
263.503 204.615 li
262.336 204.615 li
f
266.39 199.229 mo
268.139 199.229 268.778 200.395 268.722 202.172 cv
264.974 202.172 li
264.974 203.282 265.363 204.032 266.446 204.06 cv
267.167 204.087 267.639 203.727 267.806 203.255 cv
268.583 203.477 li
268.278 204.254 267.556 204.726 266.446 204.726 cv
264.835 204.726 264.002 203.699 264.03 201.95 cv
264.058 200.256 264.752 199.229 266.39 199.229 cv
cp
267.834 201.478 mo
268 199.812 265.724 199.34 265.141 200.7 cv
265.057 200.894 264.974 201.172 264.974 201.478 cv
267.834 201.478 li
f
272.332 200.089 mo
270.166 199.645 270.86 202.616 270.749 204.615 cv
269.861 204.615 li
269.833 199.34 li
270.666 199.34 li
270.694 199.673 270.638 200.145 270.721 200.422 cv
270.888 199.673 271.36 199.062 272.332 199.284 cv
272.332 200.089 li
f
275.719 199.229 mo
278.19 199.118 277.191 202.449 277.385 204.615 cv
276.497 204.615 li
276.497 201.255 li
276.497 200.395 276.274 199.895 275.414 199.923 cv
273.415 199.978 274.192 202.755 274.053 204.615 cv
273.165 204.615 li
273.137 199.34 li
273.97 199.34 li
273.998 199.617 273.942 200.006 274.025 200.228 cv
274.331 199.617 274.831 199.256 275.719 199.229 cv
f
280.8 199.229 mo
282.549 199.229 283.188 200.395 283.132 202.172 cv
279.384 202.172 li
279.384 203.282 279.773 204.032 280.856 204.06 cv
281.578 204.087 282.05 203.727 282.216 203.255 cv
282.994 203.477 li
282.688 204.254 281.966 204.726 280.856 204.726 cv
279.245 204.726 278.412 203.699 278.44 201.95 cv
278.468 200.256 279.162 199.229 280.8 199.229 cv
cp
282.244 201.478 mo
282.41 199.812 280.134 199.34 279.551 200.7 cv
279.467 200.894 279.384 201.172 279.384 201.478 cv
282.244 201.478 li
f
284.243 204.615 mo
284.243 197.368 li
285.131 197.368 li
285.131 204.615 li
284.243 204.615 li
f
1.125 82.935 mo
1.125 81.675 2.11499 80.685 3.375 80.685 cv
32.13 80.685 li
33.39 80.685 34.38 81.675 34.38 82.935 cv
34.38 102.555 li
34.38 103.77 33.39 104.805 32.13 104.805 cv
3.375 104.805 li
2.11499 104.805 1.125 103.77 1.125 102.555 cv
cp
.901 .901 .901 rgb
f
1.125 82.935 mo
1.125 81.675 2.11499 80.685 3.375 80.685 cv
32.13 80.685 li
33.39 80.685 34.38 81.675 34.38 82.935 cv
34.38 102.555 li
34.38 103.77 33.39 104.805 32.13 104.805 cv
3.375 104.805 li
2.11499 104.805 1.125 103.77 1.125 102.555 cv
cp
0 0 0 rgb
@
18.0983 91.8227 mo
18.0983 93.825 li
17.4373 93.825 li
17.4373 91.8227 li
15.5905 89.0039 li
16.3098 89.0039 li
17.7678 91.2978 li
19.2258 89.0039 li
19.9451 89.0039 li
f
.899998 50.58 mo
.899998 49.32 1.89 48.33 3.15 48.33 cv
32.355 48.33 li
33.615 48.33 34.605 49.32 34.605 50.58 cv
34.605 70.2 li
34.605 71.415 33.615 72.45 32.355 72.45 cv
3.15 72.45 li
1.89 72.45 .899998 71.415 .899998 70.2 cv
cp
.901 .901 .901 rgb
f
.899998 50.58 mo
.899998 49.32 1.89 48.33 3.15 48.33 cv
32.355 48.33 li
33.615 48.33 34.605 49.32 34.605 50.58 cv
34.605 70.2 li
34.605 71.415 33.615 72.45 32.355 72.45 cv
3.15 72.45 li
1.89 72.45 .899998 71.415 .899998 70.2 cv
cp
0 0 0 rgb
@
18.2063 57.9902 mo
18.0119 57.4459 17.5259 57.1154 16.7872 57.1154 cv
15.6402 57.1154 15.0959 57.8931 15.0959 59.04 cv
15.0959 60.2064 15.6596 61.0034 16.826 61.0034 cv
17.662 61.0034 18.0313 60.5369 18.3424 59.9926 cv
18.8672 60.2647 li
18.5173 61.0034 17.8758 61.5478 16.7872 61.5478 cv
15.232 61.5478 14.5127 60.5758 14.4349 59.04 cv
14.3183 57.0182 16.3595 56.0657 18.0702 56.8822 cv
18.4396 57.0571 18.6728 57.3876 18.8284 57.7764 cv
f
21.3361 58.3013 mo
19.8198 57.9902 20.3058 60.0703 20.228 61.47 cv
19.606 61.47 li
19.5865 57.7764 li
20.1697 57.7764 li
20.1892 58.0097 20.1503 58.3402 20.2086 58.5346 cv
20.3252 58.0097 20.6557 57.582 21.3361 57.7375 cv
21.3361 58.3013 li
f
1.08 18.225 mo
1.08 16.965 2.07 15.975 3.33 15.975 cv
32.355 15.975 li
33.57 15.975 34.605 16.965 34.605 18.225 cv
34.605 37.845 li
34.605 39.06 33.57 40.095 32.355 40.095 cv
3.33 40.095 li
2.07 40.095 1.08 39.06 1.08 37.845 cv
cp
.901 .901 .901 rgb
f
1.08 18.225 mo
1.08 16.965 2.07 15.975 3.33 15.975 cv
32.355 15.975 li
33.57 15.975 34.605 16.965 34.605 18.225 cv
34.605 37.845 li
34.605 39.06 33.57 40.095 32.355 40.095 cv
3.33 40.095 li
2.07 40.095 1.08 39.06 1.08 37.845 cv
cp
0 0 0 rgb
@
17.3963 25.6352 mo
17.2019 25.0909 16.7159 24.7604 15.9772 24.7604 cv
14.8302 24.7604 14.2859 25.538 14.2859 26.685 cv
14.2859 27.8514 14.8496 28.6484 16.016 28.6484 cv
16.852 28.6484 17.2213 28.1819 17.5324 27.6376 cv
18.0572 27.9097 li
17.7073 28.6484 17.0658 29.1928 15.9772 29.1928 cv
14.422 29.1928 13.7027 28.2208 13.6249 26.685 cv
13.5083 24.6632 15.5495 23.7107 17.2602 24.5272 cv
17.6296 24.7021 17.8628 25.0326 18.0184 25.4214 cv
f
20.5456 25.3436 mo
21.5759 25.3436 21.8869 26.1018 21.9064 27.2488 cv
21.9064 28.5318 21.4592 29.1928 20.5456 29.1928 cv
19.9429 29.1733 19.593 28.9789 19.3986 28.5318 cv
19.3597 29.115 li
18.7571 29.115 li
18.7765 24.0412 li
19.3986 24.0412 li
19.3986 26.0046 li
19.593 25.5575 19.9429 25.3436 20.5456 25.3436 cv
cp
20.39 28.7262 mo
21.1676 28.7262 21.2648 28.0652 21.2648 27.2682 cv
21.2648 26.4906 21.1676 25.8102 20.39 25.8296 cv
19.5736 25.8296 19.3986 26.4517 19.3986 27.3071 cv
19.3986 28.143 19.593 28.7262 20.39 28.7262 cv
f
136.575 82.305 mo
136.575 81.09 137.61 80.055 138.825 80.055 cv
205.92 80.055 li
207.135 80.055 208.17 81.09 208.17 82.305 cv
208.17 103.365 li
208.17 104.58 207.135 105.615 205.92 105.615 cv
138.825 105.615 li
137.61 105.615 136.575 104.58 136.575 103.365 cv
cp
.4 .8 0 rgb
f
136.575 82.305 mo
136.575 81.09 137.61 80.055 138.825 80.055 cv
205.92 80.055 li
207.135 80.055 208.17 81.09 208.17 82.305 cv
208.17 103.365 li
208.17 104.58 207.135 105.615 205.92 105.615 cv
138.825 105.615 li
137.61 105.615 136.575 104.58 136.575 103.365 cv
cp
0 0 0 rgb
@
163.763 90.765 mo
163.102 90.765 li
161.139 85.9439 li
161.819 85.9439 li
163.433 90.1818 li
165.046 85.9439 li
165.746 85.9439 li
f
167.321 86.9937 mo
168.546 86.9937 168.993 87.8101 168.954 89.0543 cv
166.329 89.0543 li
166.329 89.8319 166.602 90.3568 167.36 90.3762 cv
167.865 90.3956 168.196 90.1429 168.312 89.8125 cv
168.857 89.968 li
168.643 90.5123 168.137 90.8428 167.36 90.8428 cv
166.232 90.8428 165.649 90.1235 165.668 88.8988 cv
165.688 87.7129 166.174 86.9937 167.321 86.9937 cv
cp
168.332 88.5683 mo
168.448 87.4019 166.854 87.0714 166.446 88.024 cv
166.388 88.16 166.329 88.3544 166.329 88.5683 cv
168.332 88.5683 li
f
171.481 87.5963 mo
169.965 87.2852 170.451 89.3653 170.373 90.765 cv
169.751 90.765 li
169.731 87.0714 li
170.315 87.0714 li
170.334 87.3047 170.295 87.6352 170.353 87.8296 cv
170.47 87.3047 170.801 86.877 171.481 87.0325 cv
171.481 87.5963 li
f
172.725 89.8513 mo
172.686 90.3179 173.075 90.4151 173.464 90.279 cv
173.464 90.7456 li
172.822 90.94 172.103 90.8428 172.103 89.9874 cv
172.103 87.5185 li
171.675 87.5185 li
171.675 87.0714 li
172.142 87.0714 li
172.317 86.2355 li
172.725 86.2355 li
172.725 87.0714 li
173.406 87.0714 li
173.406 87.5185 li
172.725 87.5185 li
172.725 89.8513 li
f
173.989 86.2744 mo
173.989 85.6912 li
174.611 85.6912 li
174.611 86.2744 li
173.989 86.2744 li
cp
173.989 90.765 mo
173.989 87.0714 li
174.611 87.0714 li
174.611 90.765 li
173.989 90.765 li
f
176.924 87.4796 mo
176.147 87.4796 175.991 88.1212 175.991 88.8988 cv
175.991 89.6764 176.166 90.3568 176.924 90.3568 cv
177.391 90.3568 177.721 90.0846 177.76 89.618 cv
178.382 89.6569 li
178.266 90.3762 177.779 90.8428 176.944 90.8428 cv
175.797 90.8428 175.466 90.0457 175.35 88.9182 cv
175.155 87.1103 177.313 86.3716 178.207 87.674 cv
178.285 87.8101 178.304 87.9462 178.343 88.1017 cv
177.721 88.16 li
177.643 87.7518 177.41 87.4796 176.924 87.4796 cv
f
181.298 90.0652 mo
181.007 90.4734 180.696 90.8622 179.976 90.8428 cv
179.276 90.8233 178.849 90.4345 178.849 89.7347 cv
178.829 88.4905 180.073 88.51 181.279 88.51 cv
181.337 87.8296 181.104 87.4602 180.482 87.4602 cv
180.015 87.4796 179.685 87.5963 179.665 88.0629 cv
179.024 88.0045 li
179.121 87.2852 179.665 86.9937 180.501 86.9937 cv
181.376 86.9937 181.901 87.3824 181.901 88.2378 cv
181.901 89.8319 li
181.881 90.2207 182.037 90.454 182.445 90.3568 cv
182.445 90.7456 li
181.842 90.9205 181.259 90.7067 181.298 90.0652 cv
cp
179.49 89.7347 mo
179.49 90.1235 179.724 90.3762 180.112 90.3762 cv
180.909 90.3179 181.337 89.8125 181.279 88.9377 cv
180.443 88.9765 179.49 88.8405 179.49 89.7347 cv
f
182.912 90.765 mo
182.912 85.6912 li
183.534 85.6912 li
183.534 90.765 li
182.912 90.765 li
f
159.206 95.5058 mo
159.109 94.5727 156.815 94.4561 156.796 95.5447 cv
157.068 97.0027 159.867 95.8169 159.965 97.8581 cv
160.023 99.3744 157.612 99.5494 156.563 98.9273 cv
156.232 98.7329 156.018 98.4218 155.921 98.033 cv
156.563 97.897 li
156.66 98.9856 159.304 99.1217 159.304 97.8775 cv
159.304 96.3612 156.29 97.6054 156.154 95.5836 cv
156.057 93.9895 158.973 93.9506 159.634 94.9226 cv
159.731 95.0587 159.79 95.2337 159.848 95.4086 cv
f
164.358 95.8946 mo
163.055 95.953 163.619 97.9358 163.503 99.18 cv
162.9 99.18 li
162.9 96.8278 li
162.9 96.264 162.803 95.8558 162.22 95.8946 cv
160.937 95.9724 161.481 97.9164 161.364 99.18 cv
160.762 99.18 li
160.742 95.4864 li
161.325 95.4864 li
161.345 95.6808 161.306 95.953 161.364 96.1085 cv
161.559 95.2531 163.289 95.1365 163.444 96.1085 cv
163.658 95.7002 163.969 95.4281 164.572 95.4086 cv
166.224 95.3698 165.486 97.722 165.641 99.18 cv
165.038 99.18 li
165.038 96.8278 li
165.038 96.264 164.941 95.8752 164.358 95.8946 cv
f
168.032 95.4086 mo
169.237 95.3892 169.685 96.1279 169.685 97.3332 cv
169.704 98.5579 169.16 99.2578 168.013 99.2578 cv
166.866 99.2578 166.399 98.4996 166.38 97.3332 cv
166.38 96.0502 166.924 95.4086 168.032 95.4086 cv
cp
168.013 98.7912 mo
168.868 98.8106 169.043 98.1886 169.043 97.3332 cv
169.043 96.4973 168.887 95.8752 168.052 95.8752 cv
167.216 95.8752 167.021 96.4973 167.021 97.3332 cv
167.021 98.1691 167.216 98.7718 168.013 98.7912 cv
f
171.92 95.4086 mo
173.125 95.3892 173.573 96.1279 173.573 97.3332 cv
173.592 98.5579 173.048 99.2578 171.901 99.2578 cv
170.754 99.2578 170.287 98.4996 170.268 97.3332 cv
170.268 96.0502 170.812 95.4086 171.92 95.4086 cv
cp
171.901 98.7912 mo
172.756 98.8106 172.931 98.1886 172.931 97.3332 cv
172.931 96.4973 172.775 95.8752 171.94 95.8752 cv
171.104 95.8752 170.909 96.4973 170.909 97.3332 cv
170.909 98.1691 171.104 98.7718 171.901 98.7912 cv
f
175.011 98.2663 mo
174.972 98.7329 175.361 98.8301 175.75 98.694 cv
175.75 99.1606 li
175.108 99.355 174.389 99.2578 174.389 98.4024 cv
174.389 95.9335 li
173.961 95.9335 li
173.961 95.4864 li
174.428 95.4864 li
174.603 94.6505 li
175.011 94.6505 li
175.011 95.4864 li
175.691 95.4864 li
175.691 95.9335 li
175.011 95.9335 li
175.011 98.2663 li
f
177.869 95.8946 mo
176.469 95.8946 177.013 97.8775 176.916 99.18 cv
176.294 99.18 li
176.294 94.1062 li
176.916 94.1062 li
176.897 96.1085 li
177.13 95.7002 177.441 95.4086 178.083 95.4086 cv
179.813 95.4086 179.113 97.6637 179.249 99.18 cv
178.627 99.18 li
178.627 96.8278 li
178.666 96.2057 178.471 95.8752 177.869 95.8946 cv
f
180.163 94.6894 mo
180.163 94.1062 li
180.785 94.1062 li
180.785 94.6894 li
180.163 94.6894 li
cp
180.163 99.18 mo
180.163 95.4864 li
180.785 95.4864 li
180.785 99.18 li
180.163 99.18 li
f
183.506 95.4086 mo
185.237 95.3309 184.537 97.6637 184.673 99.18 cv
184.051 99.18 li
184.051 96.8278 li
184.051 96.2251 183.895 95.8752 183.293 95.8946 cv
181.893 95.9335 182.437 97.8775 182.34 99.18 cv
181.718 99.18 li
181.698 95.4864 li
182.282 95.4864 li
182.301 95.6808 182.262 95.953 182.321 96.1085 cv
182.534 95.6808 182.884 95.4281 183.506 95.4086 cv
f
188.561 95.4864 mo
188.366 97.9164 189.358 101.182 186.422 100.56 cv
185.975 100.444 185.684 100.171 185.567 99.7243 cv
186.189 99.6271 li
186.481 100.541 188.133 100.249 187.919 99.0828 cv
187.919 98.4996 li
187.705 98.9078 187.355 99.1994 186.733 99.1994 cv
185.684 99.1994 185.411 98.4024 185.411 97.3332 cv
185.411 96.2446 185.723 95.4475 186.792 95.4281 cv
187.355 95.4086 187.725 95.7391 187.939 96.1085 cv
187.958 95.9141 187.939 95.6614 187.978 95.4864 cv
188.561 95.4864 li
cp
186.947 98.7523 mo
187.647 98.7523 187.919 98.1302 187.919 97.3332 cv
187.919 96.5167 187.647 95.8752 186.947 95.8752 cv
186.189 95.8752 186.053 96.5362 186.053 97.3332 cv
186.053 98.1302 186.17 98.7523 186.947 98.7523 cv
f
288.765 95.985 mo
288.765 94.77 289.755 93.735 291.015 93.735 cv
322.605 93.735 li
323.82 93.735 324.855 94.77 324.855 95.985 cv
324.855 116.415 li
324.855 117.675 323.82 118.665 322.605 118.665 cv
291.015 118.665 li
289.755 118.665 288.765 117.675 288.765 116.415 cv
cp
1 1 1 rgb
f
288.765 95.985 mo
289.035 95.13 li
291.105 93.735 mo
292.005 93.735 li
294.705 93.735 mo
295.605 93.735 li
298.305 93.735 mo
299.205 93.735 li
301.905 93.735 mo
302.805 93.735 li
305.505 93.735 mo
306.405 93.735 li
309.105 93.735 mo
310.005 93.735 li
312.705 93.735 mo
313.605 93.735 li
316.305 93.735 mo
317.205 93.735 li
319.905 93.735 mo
320.805 93.735 li
323.46 94.005 mo
323.91 94.185 li
324.18 94.5 li
324.855 97.02 mo
324.855 97.92 li
324.855 100.62 mo
324.855 101.52 li
324.855 104.22 mo
324.855 105.12 li
324.855 107.82 mo
324.855 108.72 li
324.855 111.42 mo
324.855 112.32 li
324.855 115.02 mo
324.855 115.92 li
323.775 118.215 mo
323.325 118.53 li
322.965 118.62 li
320.265 118.665 mo
319.365 118.665 li
316.665 118.665 mo
315.765 118.665 li
313.065 118.665 mo
312.165 118.665 li
309.465 118.665 mo
308.565 118.665 li
305.865 118.665 mo
304.965 118.665 li
302.265 118.665 mo
301.365 118.665 li
298.665 118.665 mo
297.765 118.665 li
295.065 118.665 mo
294.165 118.665 li
291.465 118.665 mo
291.015 118.665 li
290.61 118.53 li
288.81 116.775 mo
288.765 116.415 li
288.765 115.875 li
288.765 113.175 mo
288.765 112.275 li
288.765 109.575 mo
288.765 108.675 li
288.765 105.975 mo
288.765 105.075 li
288.765 102.375 mo
288.765 101.475 li
288.765 98.775 mo
288.765 97.875 li
0 0 0 rgb
@
307.166 103.516 mo
307.069 102.583 304.775 102.466 304.756 103.555 cv
305.028 105.013 307.827 103.827 307.925 105.868 cv
307.983 107.384 305.572 107.559 304.523 106.937 cv
304.192 106.743 303.978 106.432 303.881 106.043 cv
304.523 105.907 li
304.62 106.996 307.264 107.132 307.264 105.888 cv
307.264 104.371 304.25 105.615 304.114 103.594 cv
304.017 102 306.933 101.961 307.594 102.933 cv
307.691 103.069 307.75 103.244 307.808 103.419 cv
f
308.877 107.19 mo
308.877 102.369 li
309.538 102.369 li
309.538 107.19 li
308.877 107.19 li
f
289.305 124.515 mo
289.305 123.3 290.295 122.265 291.555 122.265 cv
322.245 122.265 li
323.505 122.265 324.495 123.3 324.495 124.515 cv
324.495 144.675 li
324.495 145.89 323.505 146.925 322.245 146.925 cv
291.555 146.925 li
290.295 146.925 289.305 145.89 289.305 144.675 cv
cp
1 1 1 rgb
f
289.305 124.515 mo
289.575 123.66 li
291.69 122.265 mo
292.59 122.265 li
295.29 122.265 mo
296.19 122.265 li
298.89 122.265 mo
299.79 122.265 li
302.49 122.265 mo
303.39 122.265 li
306.09 122.265 mo
306.99 122.265 li
309.69 122.265 mo
310.59 122.265 li
313.29 122.265 mo
314.19 122.265 li
316.89 122.265 mo
317.79 122.265 li
320.49 122.265 mo
321.39 122.265 li
323.82 123.075 mo
324.36 123.795 li
324.495 126.45 mo
324.495 127.35 li
324.495 130.05 mo
324.495 130.95 li
324.495 133.65 mo
324.495 134.55 li
324.495 137.25 mo
324.495 138.15 li
324.495 140.85 mo
324.495 141.75 li
324.495 144.45 mo
324.495 144.675 li
324.27 145.35 li
322.335 146.88 mo
322.245 146.925 li
321.435 146.925 li
318.735 146.925 mo
317.835 146.925 li
315.135 146.925 mo
314.235 146.925 li
311.535 146.925 mo
310.635 146.925 li
307.935 146.925 mo
307.035 146.925 li
304.335 146.925 mo
303.435 146.925 li
300.735 146.925 mo
299.835 146.925 li
297.135 146.925 mo
296.235 146.925 li
293.535 146.925 mo
292.635 146.925 li
290.07 146.295 mo
289.575 145.53 li
289.305 142.92 mo
289.305 142.02 li
289.305 139.32 mo
289.305 138.42 li
289.305 135.72 mo
289.305 134.82 li
289.305 132.12 mo
289.305 131.22 li
289.305 128.52 mo
289.305 127.62 li
289.305 124.92 mo
289.305 124.515 li
0 0 0 rgb
@
305.71 135.585 mo
305.166 134.185 li
302.969 134.185 li
302.425 135.585 li
301.744 135.585 li
303.708 130.764 li
304.447 130.764 li
306.371 135.585 li
305.71 135.585 li
cp
304.971 133.66 mo
304.058 131.269 li
303.825 132.144 303.455 132.863 303.164 133.66 cv
304.971 133.66 li
f
308.335 131.308 mo
308.335 135.585 li
307.674 135.585 li
307.674 131.308 li
306.021 131.308 li
306.021 130.764 li
309.987 130.764 li
309.987 131.308 li
308.335 131.308 li
f
310.765 135.585 mo
310.765 130.764 li
311.426 130.764 li
311.426 135.585 li
310.765 135.585 li
f
341.685 53.91 mo
341.685 52.695 342.72 51.66 343.935 51.66 cv
411.66 51.66 li
412.875 51.66 413.91 52.695 413.91 53.91 cv
413.91 75.24 li
413.91 76.5 412.875 77.49 411.66 77.49 cv
343.935 77.49 li
342.72 77.49 341.685 76.5 341.685 75.24 cv
cp
.4 .8 0 rgb
f
341.685 53.91 mo
341.685 52.695 342.72 51.66 343.935 51.66 cv
411.66 51.66 li
412.875 51.66 413.91 52.695 413.91 53.91 cv
413.91 75.24 li
413.91 76.5 412.875 77.49 411.66 77.49 cv
343.935 77.49 li
342.72 77.49 341.685 76.5 341.685 75.24 cv
cp
0 0 0 rgb
@
352.999 59.6761 mo
353.641 59.7928 354.127 60.0649 354.127 60.8231 cv
354.127 62.5338 351.425 62.6116 350.939 61.3869 cv
350.88 61.2313 350.842 61.0758 350.822 60.9008 cv
351.444 60.8425 li
351.561 61.3674 351.852 61.6979 352.494 61.6979 cv
353.116 61.6979 353.505 61.4063 353.505 60.8036 cv
353.505 60.0649 352.805 59.9094 351.969 59.9677 cv
351.969 59.4234 li
352.727 59.4429 353.369 59.3457 353.369 58.6069 cv
353.369 58.082 353.038 57.771 352.475 57.771 cv
351.93 57.771 351.561 58.0626 351.522 58.5681 cv
350.9 58.5097 li
351.017 57.6933 351.58 57.285 352.475 57.2656 cv
353.408 57.2461 354.01 57.6738 354.01 58.5292 cv
354.01 59.229 353.602 59.5401 352.999 59.6761 cv
f
355.021 57.3239 mo
357.315 57.1878 359.22 57.4794 359.162 59.6956 cv
359.104 61.2119 358.326 62.145 356.81 62.145 cv
355.021 62.145 li
355.021 57.3239 li
cp
355.663 61.6201 mo
357.393 61.7757 358.501 61.3091 358.501 59.6956 cv
358.501 58.082 357.335 57.7321 355.663 57.8488 cv
355.663 61.6201 li
f
364.55 59.5984 mo
365.231 59.6956 365.736 60.0455 365.736 60.7842 cv
365.736 62.4755 363.676 62.1061 362.023 62.145 cv
362.023 57.3239 li
363.501 57.3822 365.464 56.9934 365.464 58.4903 cv
365.464 59.1318 365.095 59.4623 364.55 59.5984 cv
cp
362.665 59.3845 mo
363.637 59.3651 364.803 59.5595 364.803 58.5681 cv
364.803 57.6544 363.578 57.8682 362.665 57.8488 cv
362.665 59.3845 li
cp
362.665 61.6201 mo
363.734 61.5813 365.075 61.8923 365.075 60.7453 cv
365.075 59.6567 363.714 59.9288 362.665 59.89 cv
362.665 61.6201 li
f
366.572 62.145 mo
366.572 57.0712 li
367.194 57.0712 li
367.194 62.145 li
366.572 62.145 li
f
369.585 58.3737 mo
370.791 58.3542 371.238 59.0929 371.238 60.2982 cv
371.257 61.5229 370.713 62.2228 369.566 62.2228 cv
368.419 62.2228 367.952 61.4646 367.933 60.2982 cv
367.933 59.0152 368.477 58.3737 369.585 58.3737 cv
cp
369.566 61.7562 mo
370.421 61.7757 370.596 61.1536 370.596 60.2982 cv
370.596 59.4623 370.441 58.8402 369.605 58.8402 cv
368.769 58.8402 368.574 59.4623 368.574 60.2982 cv
368.574 61.1341 368.769 61.7368 369.566 61.7562 cv
f
373.396 58.8596 mo
372.618 58.8596 372.462 59.5012 372.462 60.2788 cv
372.462 61.0564 372.637 61.7368 373.396 61.7368 cv
373.862 61.7368 374.193 61.4646 374.232 60.998 cv
374.854 61.0369 li
374.737 61.7562 374.251 62.2228 373.415 62.2228 cv
372.268 62.2228 371.938 61.4257 371.821 60.2982 cv
371.627 58.4903 373.784 57.7516 374.679 59.054 cv
374.756 59.1901 374.776 59.3262 374.815 59.4817 cv
374.193 59.5401 li
374.115 59.1318 373.882 58.8596 373.396 58.8596 cv
f
377.808 62.145 mo
376.564 60.4537 li
376.117 60.8231 li
376.117 62.145 li
375.495 62.145 li
375.495 57.0712 li
376.117 57.0712 li
376.117 60.2399 li
377.731 58.4514 li
378.45 58.4514 li
376.953 60.0455 li
378.547 62.145 li
377.808 62.145 li
f
384.071 58.4709 mo
383.974 57.5377 381.68 57.4211 381.661 58.5097 cv
381.933 59.9677 384.732 58.7819 384.83 60.8231 cv
384.888 62.3394 382.477 62.5144 381.428 61.8923 cv
381.097 61.6979 380.883 61.3869 380.786 60.998 cv
381.428 60.862 li
381.525 61.9506 384.169 62.0867 384.169 60.8425 cv
384.169 59.3262 381.155 60.5704 381.019 58.5486 cv
380.922 56.9545 383.838 56.9156 384.499 57.8876 cv
384.596 58.0237 384.655 58.1987 384.713 58.3737 cv
f
386.288 61.2313 mo
386.249 61.6979 386.637 61.7951 387.026 61.659 cv
387.026 62.1256 li
386.385 62.32 385.665 62.2228 385.665 61.3674 cv
385.665 58.8985 li
385.238 58.8985 li
385.238 58.4514 li
385.704 58.4514 li
385.879 57.6155 li
386.288 57.6155 li
386.288 58.4514 li
386.968 58.4514 li
386.968 58.8985 li
386.288 58.8985 li
386.288 61.2313 li
f
389.826 61.4452 mo
389.534 61.8534 389.223 62.2422 388.504 62.2228 cv
387.804 62.2033 387.376 61.8145 387.376 61.1147 cv
387.357 59.8705 388.601 59.89 389.806 59.89 cv
389.864 59.2096 389.631 58.8402 389.009 58.8402 cv
388.543 58.8596 388.212 58.9763 388.193 59.4429 cv
387.551 59.3845 li
387.648 58.6653 388.193 58.3737 389.029 58.3737 cv
389.903 58.3737 390.428 58.7625 390.428 59.6178 cv
390.428 61.2119 li
390.409 61.6007 390.564 61.834 390.973 61.7368 cv
390.973 62.1256 li
390.37 62.3005 389.787 62.0867 389.826 61.4452 cv
cp
388.018 61.1147 mo
388.018 61.5035 388.251 61.7562 388.64 61.7562 cv
389.437 61.6979 389.864 61.1925 389.806 60.3177 cv
388.97 60.3565 388.018 60.2205 388.018 61.1147 cv
f
392.12 61.2313 mo
392.081 61.6979 392.469 61.7951 392.858 61.659 cv
392.858 62.1256 li
392.217 62.32 391.497 62.2228 391.497 61.3674 cv
391.497 58.8985 li
391.07 58.8985 li
391.07 58.4514 li
391.536 58.4514 li
391.711 57.6155 li
392.12 57.6155 li
392.12 58.4514 li
392.8 58.4514 li
392.8 58.8985 li
392.12 58.8985 li
392.12 61.2313 li
f
393.383 57.6544 mo
393.383 57.0712 li
394.005 57.0712 li
394.005 57.6544 li
393.383 57.6544 li
cp
393.383 62.145 mo
393.383 58.4514 li
394.005 58.4514 li
394.005 62.145 li
393.383 62.145 li
f
397.077 59.3651 mo
397.018 58.7041 395.405 58.6264 395.385 59.3651 cv
395.677 60.3954 397.621 59.5984 397.699 61.1147 cv
397.777 62.631 394.783 62.5533 394.647 61.2702 cv
395.191 61.173 li
395.269 61.8728 397.077 62.0478 397.096 61.173 cv
396.902 60.0844 394.899 60.8814 394.802 59.4234 cv
394.724 58.3153 396.396 58.1987 397.174 58.6069 cv
397.407 58.743 397.582 58.9763 397.64 59.2873 cv
f
399.098 61.2313 mo
399.06 61.6979 399.448 61.7951 399.837 61.659 cv
399.837 62.1256 li
399.196 62.32 398.476 62.2228 398.476 61.3674 cv
398.476 58.8985 li
398.049 58.8985 li
398.049 58.4514 li
398.515 58.4514 li
398.69 57.6155 li
399.098 57.6155 li
399.098 58.4514 li
399.779 58.4514 li
399.779 58.8985 li
399.098 58.8985 li
399.098 61.2313 li
f
400.362 57.6544 mo
400.362 57.0712 li
400.984 57.0712 li
400.984 57.6544 li
400.362 57.6544 li
cp
400.362 62.145 mo
400.362 58.4514 li
400.984 58.4514 li
400.984 62.145 li
400.362 62.145 li
f
403.298 58.8596 mo
402.52 58.8596 402.364 59.5012 402.364 60.2788 cv
402.364 61.0564 402.539 61.7368 403.298 61.7368 cv
403.764 61.7368 404.095 61.4646 404.133 60.998 cv
404.756 61.0369 li
404.639 61.7562 404.153 62.2228 403.317 62.2228 cv
402.17 62.2228 401.84 61.4257 401.723 60.2982 cv
401.529 58.4903 403.686 57.7516 404.581 59.054 cv
404.658 59.1901 404.678 59.3262 404.717 59.4817 cv
404.095 59.5401 li
404.017 59.1318 403.784 58.8596 403.298 58.8596 cv
f
368.396 72.018 mo
367.658 71.2015 367.133 70.2295 367.133 68.7327 cv
367.133 67.2552 367.677 66.2832 368.396 65.4862 cv
368.999 65.4862 li
368.26 66.2832 367.755 67.2746 367.755 68.7521 cv
367.755 70.2295 368.26 71.221 368.999 72.018 cv
368.396 72.018 li
f
373.101 67.2746 mo
371.798 67.333 372.362 69.3158 372.245 70.56 cv
371.643 70.56 li
371.643 68.2078 li
371.643 67.644 371.546 67.2358 370.962 67.2746 cv
369.679 67.3524 370.224 69.2964 370.107 70.56 cv
369.504 70.56 li
369.485 66.8664 li
370.068 66.8664 li
370.088 67.0608 370.049 67.333 370.107 67.4885 cv
370.301 66.6331 372.032 66.5165 372.187 67.4885 cv
372.401 67.0802 372.712 66.8081 373.315 66.7887 cv
374.967 66.7498 374.228 69.102 374.384 70.56 cv
373.781 70.56 li
373.781 68.2078 li
373.781 67.644 373.684 67.2552 373.101 67.2746 cv
f
376.775 66.7887 mo
378 66.7887 378.447 67.6051 378.408 68.8493 cv
375.783 68.8493 li
375.783 69.6269 376.056 70.1518 376.814 70.1712 cv
377.319 70.1906 377.65 69.9379 377.766 69.6075 cv
378.311 69.763 li
378.097 70.3073 377.591 70.6378 376.814 70.6378 cv
375.686 70.6378 375.103 69.9185 375.122 68.6938 cv
375.142 67.5079 375.628 66.7887 376.775 66.7887 cv
cp
377.786 68.3633 mo
377.902 67.1969 376.308 66.8664 375.9 67.819 cv
375.842 67.955 375.783 68.1494 375.783 68.3633 cv
377.786 68.3633 li
f
381.46 69.8602 mo
381.168 70.2684 380.857 70.6572 380.138 70.6378 cv
379.438 70.6183 379.01 70.2295 379.01 69.5297 cv
378.991 68.2855 380.235 68.305 381.44 68.305 cv
381.499 67.6246 381.266 67.2552 380.643 67.2552 cv
380.177 67.2746 379.846 67.3913 379.827 67.8578 cv
379.185 67.7995 li
379.283 67.0802 379.827 66.7887 380.663 66.7887 cv
381.538 66.7887 382.063 67.1774 382.063 68.0328 cv
382.063 69.6269 li
382.043 70.0157 382.199 70.249 382.607 70.1518 cv
382.607 70.5406 li
382.004 70.7155 381.421 70.5017 381.46 69.8602 cv
cp
379.652 69.5297 mo
379.652 69.9185 379.885 70.1712 380.274 70.1712 cv
381.071 70.1129 381.499 69.6075 381.44 68.7327 cv
380.605 68.7715 379.652 68.6355 379.652 69.5297 cv
f
384.881 66.7887 mo
386.612 66.7109 385.912 69.0437 386.048 70.56 cv
385.426 70.56 li
385.426 68.2078 li
385.426 67.6051 385.27 67.2552 384.668 67.2746 cv
383.268 67.3135 383.812 69.2575 383.715 70.56 cv
383.093 70.56 li
383.073 66.8664 li
383.657 66.8664 li
383.676 67.0608 383.637 67.333 383.696 67.4885 cv
383.909 67.0608 384.259 66.8081 384.881 66.7887 cv
f
387.136 65.4862 mo
387.875 66.2832 388.4 67.2746 388.4 68.7521 cv
388.4 70.2295 387.875 71.221 387.136 72.018 cv
386.534 72.018 li
387.253 71.221 387.778 70.2295 387.778 68.7521 cv
387.778 67.2746 387.253 66.2832 386.534 65.4862 cv
387.136 65.4862 li
f
341.685 112.455 mo
341.685 111.24 342.72 110.205 343.935 110.205 cv
411.66 110.205 li
412.875 110.205 413.91 111.24 413.91 112.455 cv
413.91 134.505 li
413.91 135.765 412.875 136.755 411.66 136.755 cv
343.935 136.755 li
342.72 136.755 341.685 135.765 341.685 134.505 cv
cp
.4 .8 0 rgb
f
341.685 112.455 mo
341.685 111.24 342.72 110.205 343.935 110.205 cv
411.66 110.205 li
412.875 110.205 413.91 111.24 413.91 112.455 cv
413.91 134.505 li
413.91 135.765 412.875 136.755 411.66 136.755 cv
343.935 136.755 li
342.72 136.755 341.685 135.765 341.685 134.505 cv
cp
0 0 0 rgb
@
352.999 118.311 mo
353.641 118.428 354.127 118.7 354.127 119.458 cv
354.127 121.169 351.425 121.247 350.939 120.022 cv
350.88 119.866 350.842 119.711 350.822 119.536 cv
351.444 119.478 li
351.561 120.002 351.852 120.333 352.494 120.333 cv
353.116 120.333 353.505 120.041 353.505 119.439 cv
353.505 118.7 352.805 118.544 351.969 118.603 cv
351.969 118.058 li
352.727 118.078 353.369 117.981 353.369 117.242 cv
353.369 116.717 353.038 116.406 352.475 116.406 cv
351.93 116.406 351.561 116.698 351.522 117.203 cv
350.9 117.145 li
351.017 116.328 351.58 115.92 352.475 115.901 cv
353.408 115.881 354.01 116.309 354.01 117.164 cv
354.01 117.864 353.602 118.175 352.999 118.311 cv
f
355.021 115.959 mo
357.315 115.823 359.22 116.114 359.162 118.331 cv
359.104 119.847 358.326 120.78 356.81 120.78 cv
355.021 120.78 li
355.021 115.959 li
cp
355.663 120.255 mo
357.393 120.411 358.501 119.944 358.501 118.331 cv
358.501 116.717 357.335 116.367 355.663 116.484 cv
355.663 120.255 li
f
364.55 118.233 mo
365.231 118.331 365.736 118.68 365.736 119.419 cv
365.736 121.11 363.676 120.741 362.023 120.78 cv
362.023 115.959 li
363.501 116.017 365.464 115.628 365.464 117.125 cv
365.464 117.767 365.095 118.097 364.55 118.233 cv
cp
362.665 118.02 mo
363.637 118 364.803 118.194 364.803 117.203 cv
364.803 116.289 363.578 116.503 362.665 116.484 cv
362.665 118.02 li
cp
362.665 120.255 mo
363.734 120.216 365.075 120.527 365.075 119.38 cv
365.075 118.292 363.714 118.564 362.665 118.525 cv
362.665 120.255 li
f
366.572 120.78 mo
366.572 115.706 li
367.194 115.706 li
367.194 120.78 li
366.572 120.78 li
f
369.585 117.009 mo
370.791 116.989 371.238 117.728 371.238 118.933 cv
371.257 120.158 370.713 120.858 369.566 120.858 cv
368.419 120.858 367.952 120.1 367.933 118.933 cv
367.933 117.65 368.477 117.009 369.585 117.009 cv
cp
369.566 120.391 mo
370.421 120.411 370.596 119.789 370.596 118.933 cv
370.596 118.097 370.441 117.475 369.605 117.475 cv
368.769 117.475 368.574 118.097 368.574 118.933 cv
368.574 119.769 368.769 120.372 369.566 120.391 cv
f
373.396 117.495 mo
372.618 117.495 372.462 118.136 372.462 118.914 cv
372.462 119.691 372.637 120.372 373.396 120.372 cv
373.862 120.372 374.193 120.1 374.232 119.633 cv
374.854 119.672 li
374.737 120.391 374.251 120.858 373.415 120.858 cv
372.268 120.858 371.938 120.061 371.821 118.933 cv
371.627 117.125 373.784 116.387 374.679 117.689 cv
374.756 117.825 374.776 117.961 374.815 118.117 cv
374.193 118.175 li
374.115 117.767 373.882 117.495 373.396 117.495 cv
f
377.808 120.78 mo
376.564 119.089 li
376.117 119.458 li
376.117 120.78 li
375.495 120.78 li
375.495 115.706 li
376.117 115.706 li
376.117 118.875 li
377.731 117.086 li
378.45 117.086 li
376.953 118.68 li
378.547 120.78 li
377.808 120.78 li
f
384.071 117.106 mo
383.974 116.173 381.68 116.056 381.661 117.145 cv
381.933 118.603 384.732 117.417 384.83 119.458 cv
384.888 120.974 382.477 121.149 381.428 120.527 cv
381.097 120.333 380.883 120.022 380.786 119.633 cv
381.428 119.497 li
381.525 120.586 384.169 120.722 384.169 119.478 cv
384.169 117.961 381.155 119.205 381.019 117.184 cv
380.922 115.59 383.838 115.551 384.499 116.523 cv
384.596 116.659 384.655 116.834 384.713 117.009 cv
f
386.288 119.866 mo
386.249 120.333 386.637 120.43 387.026 120.294 cv
387.026 120.761 li
386.385 120.955 385.665 120.858 385.665 120.002 cv
385.665 117.534 li
385.238 117.534 li
385.238 117.086 li
385.704 117.086 li
385.879 116.25 li
386.288 116.25 li
386.288 117.086 li
386.968 117.086 li
386.968 117.534 li
386.288 117.534 li
386.288 119.866 li
f
389.826 120.08 mo
389.534 120.488 389.223 120.877 388.504 120.858 cv
387.804 120.838 387.376 120.45 387.376 119.75 cv
387.357 118.506 388.601 118.525 389.806 118.525 cv
389.864 117.845 389.631 117.475 389.009 117.475 cv
388.543 117.495 388.212 117.611 388.193 118.078 cv
387.551 118.02 li
387.648 117.3 388.193 117.009 389.029 117.009 cv
389.903 117.009 390.428 117.397 390.428 118.253 cv
390.428 119.847 li
390.409 120.236 390.564 120.469 390.973 120.372 cv
390.973 120.761 li
390.37 120.936 389.787 120.722 389.826 120.08 cv
cp
388.018 119.75 mo
388.018 120.138 388.251 120.391 388.64 120.391 cv
389.437 120.333 389.864 119.827 389.806 118.953 cv
388.97 118.992 388.018 118.855 388.018 119.75 cv
f
392.12 119.866 mo
392.081 120.333 392.469 120.43 392.858 120.294 cv
392.858 120.761 li
392.217 120.955 391.497 120.858 391.497 120.002 cv
391.497 117.534 li
391.07 117.534 li
391.07 117.086 li
391.536 117.086 li
391.711 116.25 li
392.12 116.25 li
392.12 117.086 li
392.8 117.086 li
392.8 117.534 li
392.12 117.534 li
392.12 119.866 li
f
393.383 116.289 mo
393.383 115.706 li
394.005 115.706 li
394.005 116.289 li
393.383 116.289 li
cp
393.383 120.78 mo
393.383 117.086 li
394.005 117.086 li
394.005 120.78 li
393.383 120.78 li
f
397.077 118 mo
397.018 117.339 395.405 117.261 395.385 118 cv
395.677 119.03 397.621 118.233 397.699 119.75 cv
397.777 121.266 394.783 121.188 394.647 119.905 cv
395.191 119.808 li
395.269 120.508 397.077 120.683 397.096 119.808 cv
396.902 118.719 394.899 119.516 394.802 118.058 cv
394.724 116.95 396.396 116.834 397.174 117.242 cv
397.407 117.378 397.582 117.611 397.64 117.922 cv
f
399.098 119.866 mo
399.06 120.333 399.448 120.43 399.837 120.294 cv
399.837 120.761 li
399.196 120.955 398.476 120.858 398.476 120.002 cv
398.476 117.534 li
398.049 117.534 li
398.049 117.086 li
398.515 117.086 li
398.69 116.25 li
399.098 116.25 li
399.098 117.086 li
399.779 117.086 li
399.779 117.534 li
399.098 117.534 li
399.098 119.866 li
f
400.362 116.289 mo
400.362 115.706 li
400.984 115.706 li
400.984 116.289 li
400.362 116.289 li
cp
400.362 120.78 mo
400.362 117.086 li
400.984 117.086 li
400.984 120.78 li
400.362 120.78 li
f
403.298 117.495 mo
402.52 117.495 402.364 118.136 402.364 118.914 cv
402.364 119.691 402.539 120.372 403.298 120.372 cv
403.764 120.372 404.095 120.1 404.133 119.633 cv
404.756 119.672 li
404.639 120.391 404.153 120.858 403.317 120.858 cv
402.17 120.858 401.84 120.061 401.723 118.933 cv
401.529 117.125 403.686 116.387 404.581 117.689 cv
404.658 117.825 404.678 117.961 404.717 118.117 cv
404.095 118.175 li
404.017 117.767 403.784 117.495 403.298 117.495 cv
f
372.446 130.653 mo
371.708 129.837 371.183 128.865 371.183 127.368 cv
371.183 125.89 371.727 124.918 372.446 124.121 cv
373.049 124.121 li
372.31 124.918 371.805 125.91 371.805 127.387 cv
371.805 128.865 372.31 129.856 373.049 130.653 cv
372.446 130.653 li
f
375.693 126.415 mo
375.634 125.754 374.021 125.676 374.001 126.415 cv
374.293 127.445 376.237 126.648 376.315 128.165 cv
376.393 129.681 373.399 129.603 373.263 128.32 cv
373.807 128.223 li
373.885 128.923 375.693 129.098 375.712 128.223 cv
375.518 127.134 373.515 127.931 373.418 126.473 cv
373.341 125.365 375.012 125.249 375.79 125.657 cv
376.023 125.793 376.198 126.026 376.257 126.337 cv
f
377.715 128.281 mo
377.676 128.748 378.064 128.845 378.453 128.709 cv
378.453 129.176 li
377.812 129.37 377.092 129.273 377.092 128.417 cv
377.092 125.949 li
376.665 125.949 li
376.665 125.501 li
377.131 125.501 li
377.306 124.665 li
377.715 124.665 li
377.715 125.501 li
378.395 125.501 li
378.395 125.949 li
377.715 125.949 li
377.715 128.281 li
f
380.164 125.424 mo
380.767 125.424 381.097 125.676 381.33 126.065 cv
381.311 124.121 li
381.933 124.121 li
381.952 129.195 li
381.369 129.195 li
381.33 129.001 381.369 128.748 381.311 128.592 cv
381.117 129.039 380.767 129.273 380.164 129.273 cv
379.134 129.273 378.823 128.515 378.803 127.368 cv
378.803 126.085 379.25 125.424 380.164 125.424 cv
cp
380.339 125.89 mo
379.561 125.89 379.445 126.551 379.445 127.348 cv
379.445 128.126 379.561 128.787 380.319 128.787 cv
381.136 128.787 381.311 128.165 381.311 127.309 cv
381.311 126.493 381.136 125.871 380.339 125.89 cv
f
383.041 124.121 mo
383.78 124.918 384.305 125.91 384.305 127.387 cv
384.305 128.865 383.78 129.856 383.041 130.653 cv
382.438 130.653 li
383.158 129.856 383.683 128.865 383.683 127.387 cv
383.683 125.91 383.158 124.918 382.438 124.121 cv
383.041 124.121 li
f
522.54 89.775 mo
522.54 88.56 523.53 87.525 524.79 87.525 cv
592.65 87.525 li
593.91 87.525 594.9 88.56 594.9 89.775 cv
594.9 106.605 li
594.9 107.82 593.91 108.855 592.65 108.855 cv
524.79 108.855 li
523.53 108.855 522.54 107.82 522.54 106.605 cv
cp
1 1 1 rgb
f
522.54 89.775 mo
522.54 88.56 523.53 87.525 524.79 87.525 cv
592.65 87.525 li
593.91 87.525 594.9 88.56 594.9 89.775 cv
594.9 106.605 li
594.9 107.82 593.91 108.855 592.65 108.855 cv
524.79 108.855 li
523.53 108.855 522.54 107.82 522.54 106.605 cv
cp
0 0 0 rgb
@
547.075 91.0782 mo
547.075 92.8667 li
549.757 92.8667 li
549.757 93.411 li
547.075 93.411 li
547.075 95.355 li
546.433 95.355 li
546.433 90.5339 li
549.835 90.5339 li
549.835 91.0782 li
547.075 91.0782 li
f
552.051 91.5836 mo
553.276 91.5836 553.723 92.4001 553.684 93.6443 cv
551.06 93.6443 li
551.06 94.4219 551.332 94.9468 552.09 94.9662 cv
552.596 94.9856 552.926 94.7329 553.043 94.4025 cv
553.587 94.558 li
553.373 95.1023 552.868 95.4328 552.09 95.4328 cv
550.963 95.4328 550.38 94.7135 550.399 93.4888 cv
550.418 92.3029 550.904 91.5836 552.051 91.5836 cv
cp
553.062 93.1583 mo
553.179 91.9919 551.585 91.6614 551.177 92.614 cv
551.118 92.75 551.06 92.9444 551.06 93.1583 cv
553.062 93.1583 li
f
556.736 94.6552 mo
556.445 95.0634 556.134 95.4522 555.414 95.4328 cv
554.715 95.4133 554.287 95.0245 554.287 94.3247 cv
554.268 93.0805 555.512 93.1 556.717 93.1 cv
556.775 92.4196 556.542 92.0502 555.92 92.0502 cv
555.453 92.0696 555.123 92.1863 555.103 92.6528 cv
554.462 92.5945 li
554.559 91.8752 555.103 91.5836 555.939 91.5836 cv
556.814 91.5836 557.339 91.9724 557.339 92.8278 cv
557.339 94.4219 li
557.32 94.8107 557.475 95.044 557.883 94.9468 cv
557.883 95.3356 li
557.281 95.5105 556.698 95.2967 556.736 94.6552 cv
cp
554.928 94.3247 mo
554.928 94.7135 555.162 94.9662 555.551 94.9662 cv
556.348 94.9079 556.775 94.4025 556.717 93.5276 cv
555.881 93.5665 554.928 93.4305 554.928 94.3247 cv
f
559.03 94.4413 mo
558.991 94.9079 559.38 95.0051 559.769 94.869 cv
559.769 95.3356 li
559.128 95.53 558.408 95.4328 558.408 94.5774 cv
558.408 92.1085 li
557.981 92.1085 li
557.981 91.6614 li
558.447 91.6614 li
558.622 90.8255 li
559.03 90.8255 li
559.03 91.6614 li
559.711 91.6614 li
559.711 92.1085 li
559.03 92.1085 li
559.03 94.4413 li
f
561.46 95.4328 mo
559.73 95.5105 560.411 93.1777 560.274 91.6614 cv
560.896 91.6614 li
560.896 93.9942 li
560.896 94.5968 561.033 94.9662 561.655 94.9468 cv
563.054 94.9079 562.529 92.9833 562.627 91.6614 cv
563.229 91.6614 li
563.249 95.355 li
562.666 95.355 li
562.646 95.1606 562.685 94.869 562.627 94.7135 cv
562.413 95.1412 562.082 95.4133 561.46 95.4328 cv
f
565.931 92.1863 mo
564.415 91.8752 564.901 93.9553 564.823 95.355 cv
564.201 95.355 li
564.182 91.6614 li
564.765 91.6614 li
564.784 91.8947 564.746 92.2252 564.804 92.4196 cv
564.921 91.8947 565.251 91.467 565.931 91.6225 cv
565.931 92.1863 li
f
567.973 91.5836 mo
569.197 91.5836 569.644 92.4001 569.606 93.6443 cv
566.981 93.6443 li
566.981 94.4219 567.253 94.9468 568.012 94.9662 cv
568.517 94.9856 568.847 94.7329 568.964 94.4025 cv
569.508 94.558 li
569.295 95.1023 568.789 95.4328 568.012 95.4328 cv
566.884 95.4328 566.301 94.7135 566.32 93.4888 cv
566.34 92.3029 566.826 91.5836 567.973 91.5836 cv
cp
568.984 93.1583 mo
569.1 91.9919 567.506 91.6614 567.098 92.614 cv
567.04 92.75 566.981 92.9444 566.981 93.1583 cv
568.984 93.1583 li
f
570.558 92.3612 mo
570.558 91.6614 li
571.219 91.6614 li
571.219 92.3612 li
570.558 92.3612 li
cp
570.558 95.355 mo
570.558 94.6552 li
571.219 94.6552 li
571.219 95.355 li
570.558 95.355 li
f
555.296 100.096 mo
555.199 99.1627 552.905 99.0461 552.886 100.135 cv
553.158 101.593 555.957 100.407 556.055 102.448 cv
556.113 103.964 553.702 104.139 552.653 103.517 cv
552.322 103.323 552.108 103.012 552.011 102.623 cv
552.653 102.487 li
552.75 103.576 555.394 103.712 555.394 102.468 cv
555.394 100.951 552.38 102.195 552.244 100.174 cv
552.147 98.5795 555.063 98.5406 555.724 99.5126 cv
555.821 99.6487 555.88 99.8237 555.938 99.9987 cv
f
557.007 103.77 mo
557.007 98.9489 li
557.668 98.9489 li
557.668 103.77 li
557.007 103.77 li
f
558.834 103.77 mo
558.834 103.245 li
560.079 103.245 li
560.079 99.5515 li
558.99 100.31 li
558.99 99.7459 li
560.117 98.9489 li
560.681 98.9489 li
560.681 103.245 li
561.867 103.245 li
561.867 103.77 li
558.834 103.77 li
f
564.647 101.301 mo
565.289 101.418 565.775 101.69 565.775 102.448 cv
565.775 104.159 563.072 104.237 562.586 103.012 cv
562.528 102.856 562.489 102.701 562.47 102.526 cv
563.092 102.468 li
563.208 102.992 563.5 103.323 564.142 103.323 cv
564.764 103.323 565.152 103.031 565.152 102.429 cv
565.152 101.69 564.453 101.534 563.617 101.593 cv
563.617 101.048 li
564.375 101.068 565.016 100.971 565.016 100.232 cv
565.016 99.707 564.686 99.396 564.122 99.396 cv
563.578 99.396 563.208 99.6876 563.17 100.193 cv
562.548 100.135 li
562.664 99.3183 563.228 98.91 564.122 98.8906 cv
565.055 98.8711 565.658 99.2988 565.658 100.154 cv
565.658 100.854 565.25 101.165 564.647 101.301 cv
f
474.75 24.48 mo
474.75 23.22 475.74 22.23 477 22.23 cv
508.14 22.23 li
509.4 22.23 510.39 23.22 510.39 24.48 cv
510.39 43.92 li
510.39 45.18 509.4 46.17 508.14 46.17 cv
477 46.17 li
475.74 46.17 474.75 45.18 474.75 43.92 cv
cp
1 1 1 rgb
f
474.75 24.48 mo
475.02 23.625 li
477.135 22.23 mo
478.035 22.23 li
480.735 22.23 mo
481.635 22.23 li
484.335 22.23 mo
485.235 22.23 li
487.935 22.23 mo
488.835 22.23 li
491.535 22.23 mo
492.435 22.23 li
495.135 22.23 mo
496.035 22.23 li
498.735 22.23 mo
499.635 22.23 li
502.335 22.23 mo
503.235 22.23 li
505.935 22.23 mo
506.835 22.23 li
509.445 22.635 mo
509.49 22.635 li
509.985 23.355 li
510.39 25.965 mo
510.39 26.865 li
510.39 29.565 mo
510.39 30.465 li
510.39 33.165 mo
510.39 34.065 li
510.39 36.765 mo
510.39 37.665 li
510.39 40.365 mo
510.39 41.265 li
510.39 43.965 mo
510.12 44.82 li
508.005 46.17 mo
507.105 46.17 li
504.405 46.17 mo
503.505 46.17 li
500.805 46.17 mo
499.905 46.17 li
497.205 46.17 mo
496.305 46.17 li
493.605 46.17 mo
492.705 46.17 li
490.005 46.17 mo
489.105 46.17 li
486.405 46.17 mo
485.505 46.17 li
482.805 46.17 mo
481.905 46.17 li
479.205 46.17 mo
478.305 46.17 li
475.695 45.765 mo
475.65 45.765 li
475.155 45.045 li
474.75 42.435 mo
474.75 41.535 li
474.75 38.835 mo
474.75 37.935 li
474.75 35.235 mo
474.75 34.335 li
474.75 31.635 mo
474.75 30.735 li
474.75 28.035 mo
474.75 27.135 li
0 0 0 rgb
@
491.606 31.8902 mo
491.412 31.3459 490.926 31.0154 490.187 31.0154 cv
489.04 31.0154 488.496 31.793 488.496 32.94 cv
488.496 34.1064 489.06 34.9034 490.226 34.9034 cv
491.062 34.9034 491.431 34.4369 491.742 33.8926 cv
492.267 34.1647 li
491.917 34.9034 491.276 35.4478 490.187 35.4478 cv
488.632 35.4478 487.913 34.4758 487.835 32.94 cv
487.718 30.9182 489.759 29.9657 491.47 30.7822 cv
491.84 30.9571 492.073 31.2876 492.228 31.6764 cv
f
497.049 31.9291 mo
497.03 32.7262 496.602 33.1733 495.883 33.2899 cv
497.244 35.37 li
496.505 35.37 li
495.242 33.3677 li
493.745 33.3677 li
493.745 35.37 li
493.103 35.37 li
493.103 30.5489 li
494.814 30.6072 497.088 30.1406 497.049 31.9291 cv
cp
493.745 32.8622 mo
494.911 32.8234 496.408 33.115 496.408 31.9486 cv
496.408 30.7627 494.853 31.1321 493.745 31.0738 cv
493.745 32.8622 li
f
432.945 3.15001 mo
432.945 1.89 433.98 .900009 435.195 .900009 cv
465.66 .900009 li
466.92 .900009 467.91 1.89 467.91 3.15001 cv
467.91 24.03 li
467.91 25.29 466.92 26.28 465.66 26.28 cv
435.195 26.28 li
433.98 26.28 432.945 25.29 432.945 24.03 cv
cp
1 1 1 rgb
f
432.945 3.15001 mo
433.215 2.29501 li
435.33 .900009 mo
436.23 .900009 li
438.93 .900009 mo
439.83 .900009 li
442.53 .900009 mo
443.43 .900009 li
446.13 .900009 mo
447.03 .900009 li
449.73 .900009 mo
450.63 .900009 li
453.33 .900009 mo
454.23 .900009 li
456.93 .900009 mo
457.83 .900009 li
460.53 .900009 mo
461.43 .900009 li
464.13 .900009 mo
465.03 .900009 li
467.37 1.845 mo
467.82 2.43001 li
467.82 2.61 li
467.91 5.31001 mo
467.91 6.21001 li
467.91 8.91 mo
467.91 9.81001 li
467.91 12.51 mo
467.91 13.41 li
467.91 16.11 mo
467.91 17.01 li
467.91 19.71 mo
467.91 20.61 li
467.91 23.31 mo
467.91 24.03 li
467.865 24.21 li
466.29 26.19 mo
465.66 26.28 li
465.39 26.28 li
462.69 26.28 mo
461.79 26.28 li
459.09 26.28 mo
458.19 26.28 li
455.49 26.28 mo
454.59 26.28 li
451.89 26.28 mo
450.99 26.28 li
448.29 26.28 mo
447.39 26.28 li
444.69 26.28 mo
443.79 26.28 li
441.09 26.28 mo
440.19 26.28 li
437.49 26.28 mo
436.59 26.28 li
433.98 25.875 mo
433.89 25.875 li
433.395 25.2 li
432.945 22.635 mo
432.945 21.735 li
432.945 19.035 mo
432.945 18.135 li
432.945 15.435 mo
432.945 14.535 li
432.945 11.835 mo
432.945 10.935 li
432.945 8.235 mo
432.945 7.33501 li
432.945 4.63501 mo
432.945 3.735 li
0 0 0 rgb
@
449.711 11.0102 mo
449.517 10.4659 449.031 10.1354 448.292 10.1354 cv
447.145 10.1354 446.601 10.913 446.601 12.06 cv
446.601 13.2264 447.165 14.0234 448.331 14.0234 cv
449.167 14.0234 449.536 13.5569 449.847 13.0126 cv
450.372 13.2847 li
450.022 14.0234 449.381 14.5678 448.292 14.5678 cv
446.737 14.5678 446.018 13.5958 445.94 12.06 cv
445.823 10.0382 447.864 9.08568 449.575 9.90216 cv
449.945 10.0771 450.178 10.4076 450.333 10.7964 cv
f
453.735 11.9434 mo
454.416 12.0406 454.921 12.3905 454.921 13.1292 cv
454.921 14.8205 452.861 14.4511 451.208 14.49 cv
451.208 9.66888 li
452.686 9.7272 454.649 9.33839 454.649 10.8353 cv
454.649 11.4768 454.28 11.8073 453.735 11.9434 cv
cp
451.85 11.7295 mo
452.822 11.7101 453.988 11.9045 453.988 10.913 cv
453.988 9.99936 452.763 10.2132 451.85 10.1938 cv
451.85 11.7295 li
cp
451.85 13.9651 mo
452.919 13.9262 454.26 14.2373 454.26 13.0903 cv
454.26 12.0017 452.899 12.2738 451.85 12.235 cv
451.85 13.9651 li
f
34.605 60.39 mo
41.67 60.39 li
42.93 60.39 43.92 59.355 43.92 58.14 cv
43.92 30.375 li
43.92 29.16 44.955 28.125 46.17 28.125 cv
341.685 28.125 li
@
341.685 28.125 mo
335.295 30.195 li
335.295 26.055 li
cp
f
341.685 28.125 mo
335.295 30.195 li
335.295 26.055 li
cp
@
34.605 28.035 mo
341.685 28.125 li
@
34.605 27.585 mo
34.605 28.035 li
34.605 27.585 li
cp
f
341.685 28.125 mo
335.295 30.195 li
335.295 26.055 li
cp
f
341.685 28.125 mo
335.295 30.195 li
335.295 26.055 li
cp
@
413.91 64.575 mo
421.65 64.575 li
422.91 64.575 423.9 65.61 423.9 66.825 cv
423.9 68.58 li
423.9 69.57 424.665 70.335 425.655 70.335 cv
474.795 70.335 li
@
474.795 70.335 mo
468.405 72.45 li
468.405 68.265 li
cp
f
474.795 70.335 mo
468.405 72.45 li
468.405 68.265 li
cp
@
413.91 64.575 mo
421.65 64.575 li
422.91 64.575 423.9 63.585 423.9 62.325 cv
423.9 53.73 li
423.9 52.47 424.89 51.48 426.15 51.48 cv
433.845 51.48 li
@
433.845 51.48 mo
427.455 53.55 li
427.455 49.41 li
cp
f
433.845 51.48 mo
427.455 53.55 li
427.455 49.41 li
cp
@
413.91 28.125 mo
421.65 28.125 li
422.91 28.125 423.9 29.16 423.9 30.375 cv
423.9 32.31 li
423.9 33.345 424.755 34.2 425.79 34.2 cv
474.75 34.2 li
@
413.91 28.125 mo
412.56 28.125 li
@
474.75 34.2 mo
468.315 36.27 li
468.315 32.13 li
cp
f
474.75 33.705 mo
474.75 34.695 li
467.865 36.9 li
467.865 31.5 li
cp
468.765 35.685 mo
473.31 34.2 li
468.765 32.715 li
cp
f
413.91 28.125 mo
421.65 28.125 li
422.91 28.125 423.9 27.135 423.9 25.875 cv
423.9 15.84 li
423.9 14.625 424.89 13.59 426.15 13.59 cv
432.945 13.59 li
@
413.91 28.125 mo
412.56 28.125 li
@
432.945 13.59 mo
426.555 15.705 li
426.555 11.52 li
cp
f
432.945 13.14 mo
432.945 14.085 li
426.105 16.29 li
426.105 10.89 li
cp
427.005 15.075 mo
431.505 13.59 li
427.005 12.15 li
cp
f
53.46 124.335 mo
53.46 123.075 54.45 122.085 55.71 122.085 cv
123.39 122.085 li
124.65 122.085 125.64 123.075 125.64 124.335 cv
125.64 144.765 li
125.64 146.025 124.65 147.015 123.39 147.015 cv
55.71 147.015 li
54.45 147.015 53.46 146.025 53.46 144.765 cv
cp
.4 .8 0 rgb
f
53.46 124.335 mo
53.46 123.075 54.45 122.085 55.71 122.085 cv
123.39 122.085 li
124.65 122.085 125.64 123.075 125.64 124.335 cv
125.64 144.765 li
125.64 146.025 124.65 147.015 123.39 147.015 cv
55.71 147.015 li
54.45 147.015 53.46 146.025 53.46 144.765 cv
cp
0 0 0 rgb
@
77.6639 128.428 mo
77.6639 132.705 li
77.0029 132.705 li
77.0029 128.428 li
75.3505 128.428 li
75.3505 127.884 li
79.3163 127.884 li
79.3163 128.428 li
77.6639 128.428 li
f
80.6188 128.934 mo
81.8435 128.934 82.2906 129.75 82.2517 130.994 cv
79.6273 130.994 li
79.6273 131.772 79.8995 132.297 80.6576 132.316 cv
81.1631 132.336 81.4936 132.083 81.6102 131.752 cv
82.1545 131.908 li
81.9407 132.452 81.4352 132.783 80.6576 132.783 cv
79.5301 132.783 78.9469 132.063 78.9664 130.839 cv
78.9858 129.653 79.4718 128.934 80.6188 128.934 cv
cp
81.6296 130.508 mo
81.7463 129.342 80.1522 129.011 79.744 129.964 cv
79.6856 130.1 79.6273 130.294 79.6273 130.508 cv
81.6296 130.508 li
f
86.6452 129.42 mo
85.3427 129.478 85.9064 131.461 85.7898 132.705 cv
85.1872 132.705 li
85.1872 130.353 li
85.1872 129.789 85.09 129.381 84.5068 129.42 cv
83.2237 129.497 83.768 131.441 83.6514 132.705 cv
83.0488 132.705 li
83.0293 129.011 li
83.6125 129.011 li
83.632 129.206 83.5931 129.478 83.6514 129.633 cv
83.8458 128.778 85.576 128.661 85.7315 129.633 cv
85.9453 129.225 86.2564 128.953 86.859 128.934 cv
88.5114 128.895 87.7727 131.247 87.9282 132.705 cv
87.3256 132.705 li
87.3256 130.353 li
87.3256 129.789 87.2284 129.4 86.6452 129.42 cv
f
90.6109 128.934 mo
91.6801 128.953 91.9717 129.731 91.9717 130.839 cv
91.9717 131.947 91.6607 132.744 90.6109 132.783 cv
90.0083 132.783 89.6584 132.53 89.4445 132.122 cv
89.464 134.163 li
88.8419 134.163 li
88.8224 129.011 li
89.4251 129.011 li
89.464 129.595 li
89.6584 129.186 90.0083 128.934 90.6109 128.934 cv
cp
90.4554 132.316 mo
91.233 132.316 91.3302 131.655 91.3302 130.858 cv
91.3302 130.061 91.2136 129.439 90.4554 129.42 cv
89.6389 129.42 89.464 130.042 89.464 130.897 cv
89.464 131.733 89.6584 132.316 90.4554 132.316 cv
f
94.2073 128.934 mo
95.4126 128.914 95.8597 129.653 95.8597 130.858 cv
95.8792 132.083 95.3348 132.783 94.1879 132.783 cv
93.0409 132.783 92.5744 132.025 92.5549 130.858 cv
92.5549 129.575 93.0992 128.934 94.2073 128.934 cv
cp
94.1879 132.316 mo
95.0432 132.336 95.2182 131.714 95.2182 130.858 cv
95.2182 130.022 95.0627 129.4 94.2268 129.4 cv
93.3908 129.4 93.1964 130.022 93.1964 130.858 cv
93.1964 131.694 93.3908 132.297 94.1879 132.316 cv
f
98.3675 129.536 mo
96.8512 129.225 97.3372 131.305 97.2594 132.705 cv
96.6373 132.705 li
96.6179 129.011 li
97.2011 129.011 li
97.2205 129.245 97.1816 129.575 97.24 129.77 cv
97.3566 129.245 97.6871 128.817 98.3675 128.973 cv
98.3675 129.536 li
f
101.206 132.005 mo
100.914 132.413 100.603 132.802 99.8838 132.783 cv
99.1839 132.763 98.7563 132.375 98.7563 131.675 cv
98.7368 130.431 99.981 130.45 101.186 130.45 cv
101.245 129.77 101.011 129.4 100.389 129.4 cv
99.9227 129.42 99.5922 129.536 99.5728 130.003 cv
98.9312 129.945 li
99.0284 129.225 99.5728 128.934 100.409 128.934 cv
101.283 128.934 101.808 129.322 101.808 130.178 cv
101.808 131.772 li
101.789 132.161 101.944 132.394 102.353 132.297 cv
102.353 132.686 li
101.75 132.861 101.167 132.647 101.206 132.005 cv
cp
99.3978 131.675 mo
99.3978 132.063 99.6311 132.316 100.02 132.316 cv
100.817 132.258 101.245 131.752 101.186 130.878 cv
100.35 130.917 99.3978 130.78 99.3978 131.675 cv
f
102.819 132.705 mo
102.819 127.631 li
103.441 127.631 li
103.441 132.705 li
102.819 132.705 li
f
83.0347 136.843 mo
83.0347 138.632 li
85.7174 138.632 li
85.7174 139.176 li
83.0347 139.176 li
83.0347 141.12 li
82.3932 141.12 li
82.3932 136.299 li
85.7952 136.299 li
85.7952 136.843 li
83.0347 136.843 li
f
86.5339 136.629 mo
86.5339 136.046 li
87.156 136.046 li
87.156 136.629 li
86.5339 136.629 li
cp
86.5339 141.12 mo
86.5339 137.426 li
87.156 137.426 li
87.156 141.12 li
86.5339 141.12 li
f
88.0697 141.12 mo
88.0697 136.046 li
88.6917 136.046 li
88.6917 141.12 li
88.0697 141.12 li
f
90.2858 140.206 mo
90.2469 140.673 90.6357 140.77 91.0245 140.634 cv
91.0245 141.101 li
90.383 141.295 89.6637 141.198 89.6637 140.342 cv
89.6637 137.874 li
89.2361 137.874 li
89.2361 137.426 li
89.7026 137.426 li
89.8776 136.59 li
90.2858 136.59 li
90.2858 137.426 li
90.9662 137.426 li
90.9662 137.874 li
90.2858 137.874 li
90.2858 140.206 li
f
93.0269 137.349 mo
94.2516 137.349 94.6987 138.165 94.6598 139.409 cv
92.0354 139.409 li
92.0354 140.187 92.3076 140.712 93.0658 140.731 cv
93.5712 140.751 93.9017 140.498 94.0183 140.167 cv
94.5626 140.323 li
94.3488 140.867 93.8433 141.198 93.0658 141.198 cv
91.9382 141.198 91.355 140.478 91.3745 139.254 cv
91.3939 138.068 91.8799 137.349 93.0269 137.349 cv
cp
94.0378 138.923 mo
94.1544 137.757 92.5603 137.426 92.1521 138.379 cv
92.0938 138.515 92.0354 138.709 92.0354 138.923 cv
94.0378 138.923 li
f
97.187 137.951 mo
95.6707 137.64 96.1567 139.72 96.0789 141.12 cv
95.4569 141.12 li
95.4374 137.426 li
96.0206 137.426 li
96.0401 137.66 96.0012 137.99 96.0595 138.185 cv
96.1761 137.66 96.5066 137.232 97.187 137.388 cv
97.187 137.951 li
f
136.485 52.56 mo
136.485 51.345 137.52 50.31 138.735 50.31 cv
205.92 50.31 li
207.135 50.31 208.17 51.345 208.17 52.56 cv
208.17 73.215 li
208.17 74.43 207.135 75.465 205.92 75.465 cv
138.735 75.465 li
137.52 75.465 136.485 74.43 136.485 73.215 cv
cp
.4 .8 0 rgb
f
136.485 52.56 mo
136.485 51.345 137.52 50.31 138.735 50.31 cv
205.92 50.31 li
207.135 50.31 208.17 51.345 208.17 52.56 cv
208.17 73.215 li
208.17 74.43 207.135 75.465 205.92 75.465 cv
138.735 75.465 li
137.52 75.465 136.485 74.43 136.485 73.215 cv
cp
0 0 0 rgb
@
160.43 60.93 mo
160.43 58.6944 li
157.825 58.6944 li
157.825 60.93 li
157.183 60.93 li
157.183 56.1089 li
157.825 56.1089 li
157.825 58.1501 li
160.43 58.1501 li
160.43 56.1089 li
161.091 56.1089 li
161.091 60.93 li
160.43 60.93 li
f
163.579 57.1586 mo
164.784 57.1392 165.231 57.8779 165.231 59.0832 cv
165.251 60.3079 164.706 61.0078 163.559 61.0078 cv
162.413 61.0078 161.946 60.2496 161.927 59.0832 cv
161.927 57.8002 162.471 57.1586 163.579 57.1586 cv
cp
163.559 60.5412 mo
164.415 60.5606 164.59 59.9386 164.59 59.0832 cv
164.59 58.2473 164.434 57.6252 163.598 57.6252 cv
162.762 57.6252 162.568 58.2473 162.568 59.0832 cv
162.568 59.9191 162.762 60.5218 163.559 60.5412 cv
f
167.739 57.7613 mo
166.223 57.4502 166.709 59.5303 166.631 60.93 cv
166.009 60.93 li
165.99 57.2364 li
166.573 57.2364 li
166.592 57.4697 166.553 57.8002 166.612 57.9946 cv
166.728 57.4697 167.059 57.042 167.739 57.1975 cv
167.739 57.7613 li
f
168.303 56.4394 mo
168.303 55.8562 li
168.925 55.8562 li
168.925 56.4394 li
168.303 56.4394 li
cp
168.303 60.93 mo
168.303 57.2364 li
168.925 57.2364 li
168.925 60.93 li
168.303 60.93 li
f
169.547 60.93 mo
169.547 60.4634 li
171.802 57.703 li
169.683 57.703 li
169.683 57.2364 li
172.482 57.2364 li
172.482 57.703 li
170.227 60.4634 li
172.619 60.4634 li
172.619 60.93 li
169.547 60.93 li
f
174.815 57.1586 mo
176.021 57.1392 176.468 57.8779 176.468 59.0832 cv
176.487 60.3079 175.943 61.0078 174.796 61.0078 cv
173.649 61.0078 173.182 60.2496 173.163 59.0832 cv
173.163 57.8002 173.707 57.1586 174.815 57.1586 cv
cp
174.796 60.5412 mo
175.651 60.5606 175.826 59.9386 175.826 59.0832 cv
175.826 58.2473 175.671 57.6252 174.835 57.6252 cv
173.999 57.6252 173.804 58.2473 173.804 59.0832 cv
173.804 59.9191 173.999 60.5218 174.796 60.5412 cv
f
179.034 57.1586 mo
180.764 57.0809 180.064 59.4137 180.2 60.93 cv
179.578 60.93 li
179.578 58.5778 li
179.578 57.9751 179.423 57.6252 178.82 57.6446 cv
177.42 57.6835 177.965 59.6275 177.867 60.93 cv
177.245 60.93 li
177.226 57.2364 li
177.809 57.2364 li
177.828 57.4308 177.79 57.703 177.848 57.8585 cv
178.062 57.4308 178.412 57.1781 179.034 57.1586 cv
f
181.794 60.0163 mo
181.755 60.4829 182.144 60.5801 182.533 60.444 cv
182.533 60.9106 li
181.891 61.105 181.172 61.0078 181.172 60.1524 cv
181.172 57.6835 li
180.744 57.6835 li
180.744 57.2364 li
181.211 57.2364 li
181.386 56.4005 li
181.794 56.4005 li
181.794 57.2364 li
182.475 57.2364 li
182.475 57.6835 li
181.794 57.6835 li
181.794 60.0163 li
f
185.332 60.2302 mo
185.041 60.6384 184.73 61.0272 184.01 61.0078 cv
183.311 60.9883 182.883 60.5995 182.883 59.8997 cv
182.863 58.6555 184.108 58.675 185.313 58.675 cv
185.371 57.9946 185.138 57.6252 184.516 57.6252 cv
184.049 57.6446 183.719 57.7613 183.699 58.2278 cv
183.058 58.1695 li
183.155 57.4502 183.699 57.1586 184.535 57.1586 cv
185.41 57.1586 185.935 57.5474 185.935 58.4028 cv
185.935 59.9969 li
185.916 60.3857 186.071 60.619 186.479 60.5218 cv
186.479 60.9106 li
185.877 61.0855 185.293 60.8717 185.332 60.2302 cv
cp
183.524 59.8997 mo
183.524 60.2885 183.758 60.5412 184.146 60.5412 cv
184.944 60.4829 185.371 59.9774 185.313 59.1026 cv
184.477 59.1415 183.524 59.0054 183.524 59.8997 cv
f
186.946 60.93 mo
186.946 55.8562 li
187.568 55.8562 li
187.568 60.93 li
186.946 60.93 li
f
159.206 65.6709 mo
159.109 64.7377 156.815 64.6211 156.796 65.7097 cv
157.068 67.1677 159.867 65.9819 159.965 68.0231 cv
160.023 69.5394 157.612 69.7144 156.563 69.0923 cv
156.232 68.8979 156.018 68.5869 155.921 68.198 cv
156.563 68.062 li
156.66 69.1506 159.304 69.2867 159.304 68.0425 cv
159.304 66.5262 156.29 67.7704 156.154 65.7486 cv
156.057 64.1545 158.973 64.1156 159.634 65.0876 cv
159.731 65.2237 159.79 65.3987 159.848 65.5737 cv
f
164.358 66.0596 mo
163.055 66.118 163.619 68.1008 163.503 69.345 cv
162.9 69.345 li
162.9 66.9928 li
162.9 66.429 162.803 66.0208 162.22 66.0596 cv
160.937 66.1374 161.481 68.0814 161.364 69.345 cv
160.762 69.345 li
160.742 65.6514 li
161.325 65.6514 li
161.345 65.8458 161.306 66.118 161.364 66.2735 cv
161.559 65.4181 163.289 65.3015 163.444 66.2735 cv
163.658 65.8652 163.969 65.5931 164.572 65.5737 cv
166.224 65.5348 165.486 67.887 165.641 69.345 cv
165.038 69.345 li
165.038 66.9928 li
165.038 66.429 164.941 66.0402 164.358 66.0596 cv
f
168.032 65.5737 mo
169.237 65.5542 169.685 66.2929 169.685 67.4982 cv
169.704 68.7229 169.16 69.4228 168.013 69.4228 cv
166.866 69.4228 166.399 68.6646 166.38 67.4982 cv
166.38 66.2152 166.924 65.5737 168.032 65.5737 cv
cp
168.013 68.9562 mo
168.868 68.9756 169.043 68.3536 169.043 67.4982 cv
169.043 66.6623 168.887 66.0402 168.052 66.0402 cv
167.216 66.0402 167.021 66.6623 167.021 67.4982 cv
167.021 68.3341 167.216 68.9368 168.013 68.9562 cv
f
171.92 65.5737 mo
173.125 65.5542 173.573 66.2929 173.573 67.4982 cv
173.592 68.7229 173.048 69.4228 171.901 69.4228 cv
170.754 69.4228 170.287 68.6646 170.268 67.4982 cv
170.268 66.2152 170.812 65.5737 171.92 65.5737 cv
cp
171.901 68.9562 mo
172.756 68.9756 172.931 68.3536 172.931 67.4982 cv
172.931 66.6623 172.775 66.0402 171.94 66.0402 cv
171.104 66.0402 170.909 66.6623 170.909 67.4982 cv
170.909 68.3341 171.104 68.9368 171.901 68.9562 cv
f
175.011 68.4313 mo
174.972 68.8979 175.361 68.9951 175.75 68.859 cv
175.75 69.3256 li
175.108 69.52 174.389 69.4228 174.389 68.5674 cv
174.389 66.0985 li
173.961 66.0985 li
173.961 65.6514 li
174.428 65.6514 li
174.603 64.8155 li
175.011 64.8155 li
175.011 65.6514 li
175.691 65.6514 li
175.691 66.0985 li
175.011 66.0985 li
175.011 68.4313 li
f
177.869 66.0596 mo
176.469 66.0596 177.013 68.0425 176.916 69.345 cv
176.294 69.345 li
176.294 64.2712 li
176.916 64.2712 li
176.897 66.2735 li
177.13 65.8652 177.441 65.5737 178.083 65.5737 cv
179.813 65.5737 179.113 67.8287 179.249 69.345 cv
178.627 69.345 li
178.627 66.9928 li
178.666 66.3707 178.471 66.0402 177.869 66.0596 cv
f
180.163 64.8544 mo
180.163 64.2712 li
180.785 64.2712 li
180.785 64.8544 li
180.163 64.8544 li
cp
180.163 69.345 mo
180.163 65.6514 li
180.785 65.6514 li
180.785 69.345 li
180.163 69.345 li
f
183.506 65.5737 mo
185.237 65.4959 184.537 67.8287 184.673 69.345 cv
184.051 69.345 li
184.051 66.9928 li
184.051 66.3901 183.895 66.0402 183.293 66.0596 cv
181.893 66.0985 182.437 68.0425 182.34 69.345 cv
181.718 69.345 li
181.698 65.6514 li
182.282 65.6514 li
182.301 65.8458 182.262 66.118 182.321 66.2735 cv
182.534 65.8458 182.884 65.5931 183.506 65.5737 cv
f
188.561 65.6514 mo
188.366 68.0814 189.358 71.3473 186.422 70.7253 cv
185.975 70.6086 185.684 70.3365 185.567 69.8893 cv
186.189 69.7921 li
186.481 70.7058 188.133 70.4142 187.919 69.2478 cv
187.919 68.6646 li
187.705 69.0728 187.355 69.3645 186.733 69.3645 cv
185.684 69.3645 185.411 68.5674 185.411 67.4982 cv
185.411 66.4096 185.723 65.6125 186.792 65.5931 cv
187.355 65.5737 187.725 65.9041 187.939 66.2735 cv
187.958 66.0791 187.939 65.8264 187.978 65.6514 cv
188.561 65.6514 li
cp
186.947 68.9173 mo
187.647 68.9173 187.919 68.2952 187.919 67.4982 cv
187.919 66.6817 187.647 66.0402 186.947 66.0402 cv
186.189 66.0402 186.053 66.7012 186.053 67.4982 cv
186.053 68.2952 186.17 68.9173 186.947 68.9173 cv
f
341.685 17.235 mo
341.685 15.975 342.72 14.985 343.935 14.985 cv
411.66 14.985 li
412.875 14.985 413.91 15.975 413.91 17.235 cv
413.91 39.015 li
413.91 40.275 412.875 41.265 411.66 41.265 cv
343.935 41.265 li
342.72 41.265 341.685 40.275 341.685 39.015 cv
cp
.4 .8 0 rgb
f
341.685 17.235 mo
341.685 15.975 342.72 14.985 343.935 14.985 cv
411.66 14.985 li
412.875 14.985 413.91 15.975 413.91 17.235 cv
413.91 39.015 li
413.91 40.275 412.875 41.265 411.66 41.265 cv
343.935 41.265 li
342.72 41.265 341.685 40.275 341.685 39.015 cv
cp
0 0 0 rgb
@
352.513 20.6806 mo
354.107 20.5445 354.321 22.3718 353.349 23.2466 cv
352.144 24.3158 li
351.93 24.5297 351.697 24.7435 351.58 25.0351 cv
354.088 25.0351 li
354.088 25.56 li
350.9 25.56 li
350.939 23.6355 353.388 23.7327 353.388 22.0219 cv
353.388 21.4776 353.077 21.186 352.513 21.186 cv
351.95 21.186 351.619 21.4776 351.561 21.983 cv
350.939 21.9247 li
351.055 21.1277 351.6 20.7583 352.513 20.6806 cv
f
355.021 20.7389 mo
357.315 20.6028 359.22 20.8944 359.162 23.1106 cv
359.104 24.6269 358.326 25.56 356.81 25.56 cv
355.021 25.56 li
355.021 20.7389 li
cp
355.663 25.0351 mo
357.393 25.1906 358.501 24.7241 358.501 23.1106 cv
358.501 21.497 357.335 21.1471 355.663 21.2638 cv
355.663 25.0351 li
f
364.55 23.0134 mo
365.231 23.1106 365.736 23.4605 365.736 24.1992 cv
365.736 25.8905 363.676 25.5211 362.023 25.56 cv
362.023 20.7389 li
363.501 20.7972 365.464 20.4084 365.464 21.9053 cv
365.464 22.5468 365.095 22.8773 364.55 23.0134 cv
cp
362.665 22.7995 mo
363.637 22.7801 364.803 22.9745 364.803 21.983 cv
364.803 21.0694 363.578 21.2832 362.665 21.2638 cv
362.665 22.7995 li
cp
362.665 25.0351 mo
363.734 24.9962 365.075 25.3073 365.075 24.1603 cv
365.075 23.0717 363.714 23.3438 362.665 23.305 cv
362.665 25.0351 li
f
366.572 25.56 mo
366.572 20.4862 li
367.194 20.4862 li
367.194 25.56 li
366.572 25.56 li
f
369.585 21.7887 mo
370.791 21.7692 371.238 22.5079 371.238 23.7132 cv
371.257 24.9379 370.713 25.6378 369.566 25.6378 cv
368.419 25.6378 367.952 24.8796 367.933 23.7132 cv
367.933 22.4302 368.477 21.7887 369.585 21.7887 cv
cp
369.566 25.1712 mo
370.421 25.1906 370.596 24.5686 370.596 23.7132 cv
370.596 22.8773 370.441 22.2552 369.605 22.2552 cv
368.769 22.2552 368.574 22.8773 368.574 23.7132 cv
368.574 24.5491 368.769 25.1518 369.566 25.1712 cv
f
373.396 22.2746 mo
372.618 22.2746 372.462 22.9162 372.462 23.6938 cv
372.462 24.4714 372.637 25.1518 373.396 25.1518 cv
373.862 25.1518 374.193 24.8796 374.232 24.413 cv
374.854 24.4519 li
374.737 25.1712 374.251 25.6378 373.415 25.6378 cv
372.268 25.6378 371.938 24.8407 371.821 23.7132 cv
371.627 21.9053 373.784 21.1666 374.679 22.469 cv
374.756 22.6051 374.776 22.7412 374.815 22.8967 cv
374.193 22.955 li
374.115 22.5468 373.882 22.2746 373.396 22.2746 cv
f
377.808 25.56 mo
376.564 23.8687 li
376.117 24.2381 li
376.117 25.56 li
375.495 25.56 li
375.495 20.4862 li
376.117 20.4862 li
376.117 23.6549 li
377.731 21.8664 li
378.45 21.8664 li
376.953 23.4605 li
378.547 25.56 li
377.808 25.56 li
f
384.071 21.8858 mo
383.974 20.9527 381.68 20.8361 381.661 21.9247 cv
381.933 23.3827 384.732 22.1969 384.83 24.2381 cv
384.888 25.7544 382.477 25.9294 381.428 25.3073 cv
381.097 25.1129 380.883 24.8018 380.786 24.413 cv
381.428 24.277 li
381.525 25.3656 384.169 25.5017 384.169 24.2575 cv
384.169 22.7412 381.155 23.9854 381.019 21.9636 cv
380.922 20.3695 383.838 20.3306 384.499 21.3026 cv
384.596 21.4387 384.655 21.6137 384.713 21.7887 cv
f
386.288 24.6463 mo
386.249 25.1129 386.637 25.2101 387.026 25.074 cv
387.026 25.5406 li
386.385 25.735 385.665 25.6378 385.665 24.7824 cv
385.665 22.3135 li
385.238 22.3135 li
385.238 21.8664 li
385.704 21.8664 li
385.879 21.0305 li
386.288 21.0305 li
386.288 21.8664 li
386.968 21.8664 li
386.968 22.3135 li
386.288 22.3135 li
386.288 24.6463 li
f
389.826 24.8602 mo
389.534 25.2684 389.223 25.6572 388.504 25.6378 cv
387.804 25.6183 387.376 25.2295 387.376 24.5297 cv
387.357 23.2855 388.601 23.305 389.806 23.305 cv
389.864 22.6246 389.631 22.2552 389.009 22.2552 cv
388.543 22.2746 388.212 22.3913 388.193 22.8578 cv
387.551 22.7995 li
387.648 22.0802 388.193 21.7887 389.029 21.7887 cv
389.903 21.7887 390.428 22.1774 390.428 23.0328 cv
390.428 24.6269 li
390.409 25.0157 390.564 25.249 390.973 25.1518 cv
390.973 25.5406 li
390.37 25.7155 389.787 25.5017 389.826 24.8602 cv
cp
388.018 24.5297 mo
388.018 24.9185 388.251 25.1712 388.64 25.1712 cv
389.437 25.1129 389.864 24.6075 389.806 23.7327 cv
388.97 23.7715 388.018 23.6355 388.018 24.5297 cv
f
392.12 24.6463 mo
392.081 25.1129 392.469 25.2101 392.858 25.074 cv
392.858 25.5406 li
392.217 25.735 391.497 25.6378 391.497 24.7824 cv
391.497 22.3135 li
391.07 22.3135 li
391.07 21.8664 li
391.536 21.8664 li
391.711 21.0305 li
392.12 21.0305 li
392.12 21.8664 li
392.8 21.8664 li
392.8 22.3135 li
392.12 22.3135 li
392.12 24.6463 li
f
393.383 21.0694 mo
393.383 20.4862 li
394.005 20.4862 li
394.005 21.0694 li
393.383 21.0694 li
cp
393.383 25.56 mo
393.383 21.8664 li
394.005 21.8664 li
394.005 25.56 li
393.383 25.56 li
f
397.077 22.7801 mo
397.018 22.1191 395.405 22.0414 395.385 22.7801 cv
395.677 23.8104 397.621 23.0134 397.699 24.5297 cv
397.777 26.046 394.783 25.9682 394.647 24.6852 cv
395.191 24.588 li
395.269 25.2878 397.077 25.4628 397.096 24.588 cv
396.902 23.4994 394.899 24.2964 394.802 22.8384 cv
394.724 21.7303 396.396 21.6137 397.174 22.0219 cv
397.407 22.158 397.582 22.3913 397.64 22.7023 cv
f
399.098 24.6463 mo
399.06 25.1129 399.448 25.2101 399.837 25.074 cv
399.837 25.5406 li
399.196 25.735 398.476 25.6378 398.476 24.7824 cv
398.476 22.3135 li
398.049 22.3135 li
398.049 21.8664 li
398.515 21.8664 li
398.69 21.0305 li
399.098 21.0305 li
399.098 21.8664 li
399.779 21.8664 li
399.779 22.3135 li
399.098 22.3135 li
399.098 24.6463 li
f
400.362 21.0694 mo
400.362 20.4862 li
400.984 20.4862 li
400.984 21.0694 li
400.362 21.0694 li
cp
400.362 25.56 mo
400.362 21.8664 li
400.984 21.8664 li
400.984 25.56 li
400.362 25.56 li
f
403.298 22.2746 mo
402.52 22.2746 402.364 22.9162 402.364 23.6938 cv
402.364 24.4714 402.539 25.1518 403.298 25.1518 cv
403.764 25.1518 404.095 24.8796 404.133 24.413 cv
404.756 24.4519 li
404.639 25.1712 404.153 25.6378 403.317 25.6378 cv
402.17 25.6378 401.84 24.8407 401.723 23.7132 cv
401.529 21.9053 403.686 21.1666 404.581 22.469 cv
404.658 22.6051 404.678 22.7412 404.717 22.8967 cv
404.095 22.955 li
404.017 22.5468 403.784 22.2746 403.298 22.2746 cv
f
368.396 35.388 mo
367.658 34.5715 367.133 33.5995 367.133 32.1026 cv
367.133 30.6252 367.677 29.6532 368.396 28.8562 cv
368.999 28.8562 li
368.26 29.6532 367.755 30.6446 367.755 32.1221 cv
367.755 33.5995 368.26 34.591 368.999 35.388 cv
368.396 35.388 li
f
373.101 30.6446 mo
371.798 30.703 372.362 32.6858 372.245 33.93 cv
371.643 33.93 li
371.643 31.5778 li
371.643 31.014 371.546 30.6058 370.962 30.6446 cv
369.679 30.7224 370.224 32.6664 370.107 33.93 cv
369.504 33.93 li
369.485 30.2364 li
370.068 30.2364 li
370.088 30.4308 370.049 30.703 370.107 30.8585 cv
370.301 30.0031 372.032 29.8865 372.187 30.8585 cv
372.401 30.4502 372.712 30.1781 373.315 30.1586 cv
374.967 30.1198 374.228 32.472 374.384 33.93 cv
373.781 33.93 li
373.781 31.5778 li
373.781 31.014 373.684 30.6252 373.101 30.6446 cv
f
376.775 30.1586 mo
378 30.1586 378.447 30.9751 378.408 32.2193 cv
375.783 32.2193 li
375.783 32.9969 376.056 33.5218 376.814 33.5412 cv
377.319 33.5606 377.65 33.3079 377.766 32.9774 cv
378.311 33.133 li
378.097 33.6773 377.591 34.0078 376.814 34.0078 cv
375.686 34.0078 375.103 33.2885 375.122 32.0638 cv
375.142 30.8779 375.628 30.1586 376.775 30.1586 cv
cp
377.786 31.7333 mo
377.902 30.5669 376.308 30.2364 375.9 31.189 cv
375.842 31.325 375.783 31.5194 375.783 31.7333 cv
377.786 31.7333 li
f
381.46 33.2302 mo
381.168 33.6384 380.857 34.0272 380.138 34.0078 cv
379.438 33.9883 379.01 33.5995 379.01 32.8997 cv
378.991 31.6555 380.235 31.675 381.44 31.675 cv
381.499 30.9946 381.266 30.6252 380.643 30.6252 cv
380.177 30.6446 379.846 30.7613 379.827 31.2278 cv
379.185 31.1695 li
379.283 30.4502 379.827 30.1586 380.663 30.1586 cv
381.538 30.1586 382.063 30.5474 382.063 31.4028 cv
382.063 32.9969 li
382.043 33.3857 382.199 33.619 382.607 33.5218 cv
382.607 33.9106 li
382.004 34.0855 381.421 33.8717 381.46 33.2302 cv
cp
379.652 32.8997 mo
379.652 33.2885 379.885 33.5412 380.274 33.5412 cv
381.071 33.4829 381.499 32.9774 381.44 32.1026 cv
380.605 32.1415 379.652 32.0054 379.652 32.8997 cv
f
384.881 30.1586 mo
386.612 30.0809 385.912 32.4137 386.048 33.93 cv
385.426 33.93 li
385.426 31.5778 li
385.426 30.9751 385.27 30.6252 384.668 30.6446 cv
383.268 30.6835 383.812 32.6275 383.715 33.93 cv
383.093 33.93 li
383.073 30.2364 li
383.657 30.2364 li
383.676 30.4308 383.637 30.703 383.696 30.8585 cv
383.909 30.4308 384.259 30.1781 384.881 30.1586 cv
f
387.136 28.8562 mo
387.875 29.6532 388.4 30.6446 388.4 32.1221 cv
388.4 33.5995 387.875 34.591 387.136 35.388 cv
386.534 35.388 li
387.253 34.591 387.778 33.5995 387.778 32.1221 cv
387.778 30.6446 387.253 29.6532 386.534 28.8562 cv
387.136 28.8562 li
f
53.595 82.305 mo
53.595 81.09 54.585 80.055 55.845 80.055 cv
123.345 80.055 li
124.605 80.055 125.595 81.09 125.595 82.305 cv
125.595 103.365 li
125.595 104.58 124.605 105.615 123.345 105.615 cv
55.845 105.615 li
54.585 105.615 53.595 104.58 53.595 103.365 cv
cp
.4 .8 0 rgb
f
53.595 82.305 mo
53.595 81.09 54.585 80.055 55.845 80.055 cv
123.345 80.055 li
124.605 80.055 125.595 81.09 125.595 82.305 cv
125.595 103.365 li
125.595 104.58 124.605 105.615 123.345 105.615 cv
55.845 105.615 li
54.585 105.615 53.595 104.58 53.595 103.365 cv
cp
0 0 0 rgb
@
77.6297 90.765 mo
77.6297 88.5294 li
75.0247 88.5294 li
75.0247 90.765 li
74.3832 90.765 li
74.3832 85.9439 li
75.0247 85.9439 li
75.0247 87.9851 li
77.6297 87.9851 li
77.6297 85.9439 li
78.2906 85.9439 li
78.2906 90.765 li
77.6297 90.765 li
f
80.7789 86.9937 mo
81.9842 86.9742 82.4314 87.7129 82.4314 88.9182 cv
82.4508 90.1429 81.9065 90.8428 80.7595 90.8428 cv
79.6125 90.8428 79.146 90.0846 79.1265 88.9182 cv
79.1265 87.6352 79.6709 86.9937 80.7789 86.9937 cv
cp
80.7595 90.3762 mo
81.6149 90.3956 81.7898 89.7736 81.7898 88.9182 cv
81.7898 88.0823 81.6343 87.4602 80.7984 87.4602 cv
79.9625 87.4602 79.7681 88.0823 79.7681 88.9182 cv
79.7681 89.7541 79.9625 90.3568 80.7595 90.3762 cv
f
84.9391 87.5963 mo
83.4228 87.2852 83.9088 89.3653 83.831 90.765 cv
83.2089 90.765 li
83.1895 87.0714 li
83.7727 87.0714 li
83.7922 87.3047 83.7533 87.6352 83.8116 87.8296 cv
83.9282 87.3047 84.2587 86.877 84.9391 87.0325 cv
84.9391 87.5963 li
f
85.5029 86.2744 mo
85.5029 85.6912 li
86.125 85.6912 li
86.125 86.2744 li
85.5029 86.2744 li
cp
85.5029 90.765 mo
85.5029 87.0714 li
86.125 87.0714 li
86.125 90.765 li
85.5029 90.765 li
f
86.747 90.765 mo
86.747 90.2984 li
89.0021 87.538 li
86.8831 87.538 li
86.8831 87.0714 li
89.6825 87.0714 li
89.6825 87.538 li
87.4274 90.2984 li
89.8186 90.2984 li
89.8186 90.765 li
86.747 90.765 li
f
92.0153 86.9937 mo
93.2206 86.9742 93.6677 87.7129 93.6677 88.9182 cv
93.6871 90.1429 93.1428 90.8428 91.9958 90.8428 cv
90.8489 90.8428 90.3823 90.0846 90.3629 88.9182 cv
90.3629 87.6352 90.9072 86.9937 92.0153 86.9937 cv
cp
91.9958 90.3762 mo
92.8512 90.3956 93.0262 89.7736 93.0262 88.9182 cv
93.0262 88.0823 92.8706 87.4602 92.0347 87.4602 cv
91.1988 87.4602 91.0044 88.0823 91.0044 88.9182 cv
91.0044 89.7541 91.1988 90.3568 91.9958 90.3762 cv
f
96.2337 86.9937 mo
97.9639 86.9159 97.2641 89.2487 97.4001 90.765 cv
96.7781 90.765 li
96.7781 88.4128 li
96.7781 87.8101 96.6225 87.4602 96.0199 87.4796 cv
94.6202 87.5185 95.1646 89.4625 95.0674 90.765 cv
94.4453 90.765 li
94.4258 87.0714 li
95.009 87.0714 li
95.0285 87.2658 94.9896 87.538 95.0479 87.6935 cv
95.2617 87.2658 95.6117 87.0131 96.2337 86.9937 cv
f
98.9942 89.8513 mo
98.9554 90.3179 99.3441 90.4151 99.7329 90.279 cv
99.7329 90.7456 li
99.0914 90.94 98.3721 90.8428 98.3721 89.9874 cv
98.3721 87.5185 li
97.9445 87.5185 li
97.9445 87.0714 li
98.411 87.0714 li
98.586 86.2355 li
98.9942 86.2355 li
98.9942 87.0714 li
99.6746 87.0714 li
99.6746 87.5185 li
98.9942 87.5185 li
98.9942 89.8513 li
f
102.532 90.0652 mo
102.241 90.4734 101.93 90.8622 101.21 90.8428 cv
100.511 90.8233 100.083 90.4345 100.083 89.7347 cv
100.063 88.4905 101.308 88.51 102.513 88.51 cv
102.571 87.8296 102.338 87.4602 101.716 87.4602 cv
101.249 87.4796 100.919 87.5963 100.899 88.0629 cv
100.258 88.0045 li
100.355 87.2852 100.899 86.9937 101.735 86.9937 cv
102.61 86.9937 103.135 87.3824 103.135 88.2378 cv
103.135 89.8319 li
103.116 90.2207 103.271 90.454 103.679 90.3568 cv
103.679 90.7456 li
103.077 90.9205 102.493 90.7067 102.532 90.0652 cv
cp
100.724 89.7347 mo
100.724 90.1235 100.958 90.3762 101.346 90.3762 cv
102.144 90.3179 102.571 89.8125 102.513 88.9377 cv
101.677 88.9765 100.724 88.8405 100.724 89.7347 cv
f
104.146 90.765 mo
104.146 85.6912 li
104.768 85.6912 li
104.768 90.765 li
104.146 90.765 li
f
73.2132 99.18 mo
73.2132 94.3589 li
76.8485 94.3589 li
76.8485 94.9032 li
73.8547 94.9032 li
73.8547 96.439 li
76.6541 96.439 li
76.6541 96.9638 li
73.8547 96.9638 li
73.8547 98.6551 li
77.004 98.6551 li
77.004 99.18 li
73.2132 99.18 li
f
78.948 95.4086 mo
79.5506 95.4086 79.8811 95.6614 80.1144 96.0502 cv
80.095 94.1062 li
80.717 94.1062 li
80.7365 99.18 li
80.1533 99.18 li
80.1144 98.9856 80.1533 98.7329 80.095 98.5774 cv
79.9006 99.0245 79.5506 99.2578 78.948 99.2578 cv
77.9177 99.2578 77.6066 98.4996 77.5872 97.3526 cv
77.5872 96.0696 78.0343 95.4086 78.948 95.4086 cv
cp
79.123 95.8752 mo
78.3454 95.8752 78.2287 96.5362 78.2287 97.3332 cv
78.2287 98.1108 78.3454 98.7718 79.1035 98.7718 cv
79.92 98.7718 80.095 98.1497 80.095 97.2943 cv
80.095 96.4778 79.92 95.8558 79.123 95.8752 cv
f
84.6245 95.4864 mo
84.4301 97.9164 85.4215 101.182 82.4861 100.56 cv
82.039 100.444 81.7474 100.171 81.6307 99.7243 cv
82.2528 99.6271 li
82.5444 100.541 84.1968 100.249 83.983 99.0828 cv
83.983 98.4996 li
83.7691 98.9078 83.4192 99.1994 82.7971 99.1994 cv
81.7474 99.1994 81.4752 98.4024 81.4752 97.3332 cv
81.4752 96.2446 81.7862 95.4475 82.8554 95.4281 cv
83.4192 95.4086 83.7886 95.7391 84.0024 96.1085 cv
84.0218 95.9141 84.0024 95.6614 84.0413 95.4864 cv
84.6245 95.4864 li
cp
83.011 98.7523 mo
83.7108 98.7523 83.983 98.1302 83.983 97.3332 cv
83.983 96.5167 83.7108 95.8752 83.011 95.8752 cv
82.2528 95.8752 82.1167 96.5362 82.1167 97.3332 cv
82.1167 98.1302 82.2334 98.7523 83.011 98.7523 cv
f
87.0156 95.4086 mo
88.2403 95.4086 88.6874 96.2251 88.6486 97.4693 cv
86.0241 97.4693 li
86.0241 98.2469 86.2963 98.7718 87.0545 98.7912 cv
87.5599 98.8106 87.8904 98.5579 88.007 98.2274 cv
88.5514 98.383 li
88.3375 98.9273 87.8321 99.2578 87.0545 99.2578 cv
85.9269 99.2578 85.3438 98.5385 85.3632 97.3138 cv
85.3826 96.1279 85.8686 95.4086 87.0156 95.4086 cv
cp
88.0265 96.9833 mo
88.1431 95.8169 86.549 95.4864 86.1408 96.439 cv
86.0825 96.575 86.0241 96.7694 86.0241 96.9833 cv
88.0265 96.9833 li
f
92.1697 94.9032 mo
92.1697 96.6917 li
94.8524 96.6917 li
94.8524 97.236 li
92.1697 97.236 li
92.1697 99.18 li
91.5282 99.18 li
91.5282 94.3589 li
94.9302 94.3589 li
94.9302 94.9032 li
92.1697 94.9032 li
f
95.6689 94.6894 mo
95.6689 94.1062 li
96.291 94.1062 li
96.291 94.6894 li
95.6689 94.6894 li
cp
95.6689 99.18 mo
95.6689 95.4864 li
96.291 95.4864 li
96.291 99.18 li
95.6689 99.18 li
f
97.2047 99.18 mo
97.2047 94.1062 li
97.8268 94.1062 li
97.8268 99.18 li
97.2047 99.18 li
f
99.4208 98.2663 mo
99.382 98.7329 99.7708 98.8301 100.16 98.694 cv
100.16 99.1606 li
99.518 99.355 98.7988 99.2578 98.7988 98.4024 cv
98.7988 95.9335 li
98.3711 95.9335 li
98.3711 95.4864 li
98.8376 95.4864 li
99.0126 94.6505 li
99.4208 94.6505 li
99.4208 95.4864 li
100.101 95.4864 li
100.101 95.9335 li
99.4208 95.9335 li
99.4208 98.2663 li
f
102.162 95.4086 mo
103.387 95.4086 103.834 96.2251 103.795 97.4693 cv
101.17 97.4693 li
101.17 98.2469 101.443 98.7718 102.201 98.7912 cv
102.706 98.8106 103.037 98.5579 103.153 98.2274 cv
103.698 98.383 li
103.484 98.9273 102.978 99.2578 102.201 99.2578 cv
101.073 99.2578 100.49 98.5385 100.509 97.3138 cv
100.529 96.1279 101.015 95.4086 102.162 95.4086 cv
cp
103.173 96.9833 mo
103.289 95.8169 101.695 95.4864 101.287 96.439 cv
101.229 96.575 101.17 96.7694 101.17 96.9833 cv
103.173 96.9833 li
f
106.322 96.0113 mo
104.806 95.7002 105.292 97.7803 105.214 99.18 cv
104.592 99.18 li
104.572 95.4864 li
105.156 95.4864 li
105.175 95.7197 105.136 96.0502 105.195 96.2446 cv
105.311 95.7197 105.642 95.292 106.322 95.4475 cv
106.322 96.0113 li
f
53.595 52.56 mo
53.595 51.345 54.585 50.31 55.845 50.31 cv
123.345 50.31 li
124.605 50.31 125.595 51.345 125.595 52.56 cv
125.595 73.215 li
125.595 74.43 124.605 75.465 123.345 75.465 cv
55.845 75.465 li
54.585 75.465 53.595 74.43 53.595 73.215 cv
cp
.4 .8 0 rgb
f
53.595 52.56 mo
53.595 51.345 54.585 50.31 55.845 50.31 cv
123.345 50.31 li
124.605 50.31 125.595 51.345 125.595 52.56 cv
125.595 73.215 li
125.595 74.43 124.605 75.465 123.345 75.465 cv
55.845 75.465 li
54.585 75.465 53.595 74.43 53.595 73.215 cv
cp
0 0 0 rgb
@
80.7383 60.93 mo
80.0773 60.93 li
78.1139 56.1089 li
78.7943 56.1089 li
80.4078 60.3468 li
82.0213 56.1089 li
82.7212 56.1089 li
f
84.2958 57.1586 mo
85.5205 57.1586 85.9676 57.9751 85.9288 59.2193 cv
83.3044 59.2193 li
83.3044 59.9969 83.5765 60.5218 84.3347 60.5412 cv
84.8401 60.5606 85.1706 60.3079 85.2872 59.9774 cv
85.8316 60.133 li
85.6177 60.6773 85.1123 61.0078 84.3347 61.0078 cv
83.2072 61.0078 82.624 60.2885 82.6434 59.0638 cv
82.6628 57.8779 83.1488 57.1586 84.2958 57.1586 cv
cp
85.3067 58.7333 mo
85.4233 57.5669 83.8292 57.2364 83.421 58.189 cv
83.3627 58.325 83.3044 58.5194 83.3044 58.7333 cv
85.3067 58.7333 li
f
88.456 57.7613 mo
86.9396 57.4502 87.4256 59.5303 87.3479 60.93 cv
86.7258 60.93 li
86.7064 57.2364 li
87.2896 57.2364 li
87.309 57.4697 87.2701 57.8002 87.3284 57.9946 cv
87.4451 57.4697 87.7756 57.042 88.456 57.1975 cv
88.456 57.7613 li
f
89.7001 60.0163 mo
89.6612 60.4829 90.05 60.5801 90.4388 60.444 cv
90.4388 60.9106 li
89.7973 61.105 89.078 61.0078 89.078 60.1524 cv
89.078 57.6835 li
88.6504 57.6835 li
88.6504 57.2364 li
89.1169 57.2364 li
89.2919 56.4005 li
89.7001 56.4005 li
89.7001 57.2364 li
90.3805 57.2364 li
90.3805 57.6835 li
89.7001 57.6835 li
89.7001 60.0163 li
f
90.9637 56.4394 mo
90.9637 55.8562 li
91.5858 55.8562 li
91.5858 56.4394 li
90.9637 56.4394 li
cp
90.9637 60.93 mo
90.9637 57.2364 li
91.5858 57.2364 li
91.5858 60.93 li
90.9637 60.93 li
f
93.8991 57.6446 mo
93.1216 57.6446 92.966 58.2862 92.966 59.0638 cv
92.966 59.8414 93.141 60.5218 93.8991 60.5218 cv
94.3657 60.5218 94.6962 60.2496 94.7351 59.783 cv
95.3571 59.8219 li
95.2405 60.5412 94.7545 61.0078 93.9186 61.0078 cv
92.7716 61.0078 92.4411 60.2107 92.3245 59.0832 cv
92.1301 57.2753 94.2879 56.5366 95.1822 57.839 cv
95.2599 57.9751 95.2794 58.1112 95.3183 58.2667 cv
94.6962 58.325 li
94.6184 57.9168 94.3851 57.6446 93.8991 57.6446 cv
f
98.2731 60.2302 mo
97.9816 60.6384 97.6705 61.0272 96.9512 61.0078 cv
96.2514 60.9883 95.8237 60.5995 95.8237 59.8997 cv
95.8043 58.6555 97.0484 58.675 98.2537 58.675 cv
98.312 57.9946 98.0788 57.6252 97.4567 57.6252 cv
96.9901 57.6446 96.6596 57.7613 96.6402 58.2278 cv
95.9987 58.1695 li
96.0959 57.4502 96.6402 57.1586 97.4761 57.1586 cv
98.3509 57.1586 98.8758 57.5474 98.8758 58.4028 cv
98.8758 59.9969 li
98.8564 60.3857 99.0119 60.619 99.4201 60.5218 cv
99.4201 60.9106 li
98.8175 61.0855 98.2343 60.8717 98.2731 60.2302 cv
cp
96.4652 59.8997 mo
96.4652 60.2885 96.6985 60.5412 97.0873 60.5412 cv
97.8844 60.4829 98.312 59.9774 98.2537 59.1026 cv
97.4178 59.1415 96.4652 59.0054 96.4652 59.8997 cv
f
99.8867 60.93 mo
99.8867 55.8562 li
100.509 55.8562 li
100.509 60.93 li
99.8867 60.93 li
f
73.2132 69.345 mo
73.2132 64.5239 li
76.8485 64.5239 li
76.8485 65.0682 li
73.8547 65.0682 li
73.8547 66.604 li
76.6541 66.604 li
76.6541 67.1288 li
73.8547 67.1288 li
73.8547 68.8201 li
77.004 68.8201 li
77.004 69.345 li
73.2132 69.345 li
f
78.948 65.5737 mo
79.5506 65.5737 79.8811 65.8264 80.1144 66.2152 cv
80.095 64.2712 li
80.717 64.2712 li
80.7365 69.345 li
80.1533 69.345 li
80.1144 69.1506 80.1533 68.8979 80.095 68.7424 cv
79.9006 69.1895 79.5506 69.4228 78.948 69.4228 cv
77.9177 69.4228 77.6066 68.6646 77.5872 67.5177 cv
77.5872 66.2346 78.0343 65.5737 78.948 65.5737 cv
cp
79.123 66.0402 mo
78.3454 66.0402 78.2287 66.7012 78.2287 67.4982 cv
78.2287 68.2758 78.3454 68.9368 79.1035 68.9368 cv
79.92 68.9368 80.095 68.3147 80.095 67.4593 cv
80.095 66.6429 79.92 66.0208 79.123 66.0402 cv
f
84.6245 65.6514 mo
84.4301 68.0814 85.4215 71.3473 82.4861 70.7253 cv
82.039 70.6086 81.7474 70.3365 81.6307 69.8893 cv
82.2528 69.7921 li
82.5444 70.7058 84.1968 70.4142 83.983 69.2478 cv
83.983 68.6646 li
83.7691 69.0728 83.4192 69.3645 82.7971 69.3645 cv
81.7474 69.3645 81.4752 68.5674 81.4752 67.4982 cv
81.4752 66.4096 81.7862 65.6125 82.8554 65.5931 cv
83.4192 65.5737 83.7886 65.9041 84.0024 66.2735 cv
84.0218 66.0791 84.0024 65.8264 84.0413 65.6514 cv
84.6245 65.6514 li
cp
83.011 68.9173 mo
83.7108 68.9173 83.983 68.2952 83.983 67.4982 cv
83.983 66.6817 83.7108 66.0402 83.011 66.0402 cv
82.2528 66.0402 82.1167 66.7012 82.1167 67.4982 cv
82.1167 68.2952 82.2334 68.9173 83.011 68.9173 cv
f
87.0156 65.5737 mo
88.2403 65.5737 88.6874 66.3901 88.6486 67.6343 cv
86.0241 67.6343 li
86.0241 68.4119 86.2963 68.9368 87.0545 68.9562 cv
87.5599 68.9756 87.8904 68.7229 88.007 68.3925 cv
88.5514 68.548 li
88.3375 69.0923 87.8321 69.4228 87.0545 69.4228 cv
85.9269 69.4228 85.3438 68.7035 85.3632 67.4788 cv
85.3826 66.2929 85.8686 65.5737 87.0156 65.5737 cv
cp
88.0265 67.1483 mo
88.1431 65.9819 86.549 65.6514 86.1408 66.604 cv
86.0825 66.7401 86.0241 66.9344 86.0241 67.1483 cv
88.0265 67.1483 li
f
92.1697 65.0682 mo
92.1697 66.8567 li
94.8524 66.8567 li
94.8524 67.401 li
92.1697 67.401 li
92.1697 69.345 li
91.5282 69.345 li
91.5282 64.5239 li
94.9302 64.5239 li
94.9302 65.0682 li
92.1697 65.0682 li
f
95.6689 64.8544 mo
95.6689 64.2712 li
96.291 64.2712 li
96.291 64.8544 li
95.6689 64.8544 li
cp
95.6689 69.345 mo
95.6689 65.6514 li
96.291 65.6514 li
96.291 69.345 li
95.6689 69.345 li
f
97.2047 69.345 mo
97.2047 64.2712 li
97.8268 64.2712 li
97.8268 69.345 li
97.2047 69.345 li
f
99.4208 68.4313 mo
99.382 68.8979 99.7708 68.9951 100.16 68.859 cv
100.16 69.3256 li
99.518 69.52 98.7988 69.4228 98.7988 68.5674 cv
98.7988 66.0985 li
98.3711 66.0985 li
98.3711 65.6514 li
98.8376 65.6514 li
99.0126 64.8155 li
99.4208 64.8155 li
99.4208 65.6514 li
100.101 65.6514 li
100.101 66.0985 li
99.4208 66.0985 li
99.4208 68.4313 li
f
102.162 65.5737 mo
103.387 65.5737 103.834 66.3901 103.795 67.6343 cv
101.17 67.6343 li
101.17 68.4119 101.443 68.9368 102.201 68.9562 cv
102.706 68.9756 103.037 68.7229 103.153 68.3925 cv
103.698 68.548 li
103.484 69.0923 102.978 69.4228 102.201 69.4228 cv
101.073 69.4228 100.49 68.7035 100.509 67.4788 cv
100.529 66.2929 101.015 65.5737 102.162 65.5737 cv
cp
103.173 67.1483 mo
103.289 65.9819 101.695 65.6514 101.287 66.604 cv
101.229 66.7401 101.17 66.9344 101.17 67.1483 cv
103.173 67.1483 li
f
106.322 66.1763 mo
104.806 65.8652 105.292 67.9453 105.214 69.345 cv
104.592 69.345 li
104.572 65.6514 li
105.156 65.6514 li
105.175 65.8847 105.136 66.2152 105.195 66.4096 cv
105.311 65.8847 105.642 65.457 106.322 65.6125 cv
106.322 66.1763 li
f
225.765 70.875 mo
225.765 69.615 226.755 68.625 228.015 68.625 cv
268.605 68.625 li
269.865 68.625 270.855 69.615 270.855 70.875 cv
270.855 84.87 li
270.855 86.085 269.865 87.12 268.605 87.12 cv
228.015 87.12 li
226.755 87.12 225.765 86.085 225.765 84.87 cv
cp
.4 .8 0 rgb
f
225.765 70.875 mo
225.765 69.615 226.755 68.625 228.015 68.625 cv
268.605 68.625 li
269.865 68.625 270.855 69.615 270.855 70.875 cv
270.855 84.87 li
270.855 86.085 269.865 87.12 268.605 87.12 cv
228.015 87.12 li
226.755 87.12 225.765 86.085 225.765 84.87 cv
cp
0 0 0 rgb
@
239.531 75.2558 mo
239.434 74.3227 237.14 74.2061 237.121 75.2947 cv
237.393 76.7527 240.192 75.5669 240.29 77.6081 cv
240.348 79.1244 237.937 79.2994 236.888 78.6773 cv
236.557 78.4829 236.343 78.1718 236.246 77.783 cv
236.888 77.647 li
236.985 78.7356 239.629 78.8717 239.629 77.6275 cv
239.629 76.1112 236.615 77.3554 236.479 75.3336 cv
236.382 73.7395 239.298 73.7006 239.959 74.6726 cv
240.056 74.8087 240.115 74.9837 240.173 75.1586 cv
f
241.242 78.93 mo
241.242 74.1089 li
241.903 74.1089 li
241.903 78.93 li
241.242 78.93 li
f
249.034 78.8911 mo
248.49 79.0855 247.829 78.8911 247.537 78.5412 cv
246.759 79.2994 244.641 79.1633 244.738 77.6664 cv
244.796 76.8305 245.301 76.4806 245.904 76.189 cv
245.418 75.4114 245.574 73.9728 246.818 74.0894 cv
247.498 74.1478 247.965 74.381 247.965 75.0614 cv
247.965 75.9168 247.187 76.0918 246.585 76.4028 cv
246.857 76.9082 247.207 77.3748 247.576 77.8025 cv
247.848 77.3942 248.042 76.9666 248.159 76.4028 cv
248.665 76.5583 li
248.49 77.1998 248.256 77.6664 247.926 78.1524 cv
248.179 78.4051 248.567 78.5801 249.034 78.444 cv
249.034 78.8911 li
cp
246.371 75.9946 mo
246.857 75.8002 247.382 75.6446 247.459 75.0614 cv
247.44 74.7115 247.207 74.4977 246.818 74.4977 cv
246.001 74.4977 246.06 75.4697 246.371 75.9946 cv
cp
245.301 77.647 mo
245.243 78.6384 246.682 78.7745 247.207 78.1913 cv
246.818 77.7247 246.41 77.1998 246.118 76.6361 cv
245.671 76.8305 245.34 77.1026 245.301 77.647 cv
f
254.93 78.93 mo
254.93 76.6944 li
252.325 76.6944 li
252.325 78.93 li
251.683 78.93 li
251.683 74.1089 li
252.325 74.1089 li
252.325 76.1501 li
254.93 76.1501 li
254.93 74.1089 li
255.591 74.1089 li
255.591 78.93 li
254.93 78.93 li
f
258.798 78.93 mo
258.137 78.93 li
256.174 74.1089 li
256.854 74.1089 li
258.468 78.3468 li
260.081 74.1089 li
260.781 74.1089 li
f
288.9 67.86 mo
288.9 66.6 289.935 65.61 291.15 65.61 cv
322.785 65.61 li
324 65.61 325.035 66.6 325.035 67.86 cv
325.035 87.885 li
325.035 89.1 324 90.135 322.785 90.135 cv
291.15 90.135 li
289.935 90.135 288.9 89.1 288.9 87.885 cv
cp
1 1 1 rgb
f
288.9 67.86 mo
289.215 67.005 li
291.285 65.61 mo
292.185 65.61 li
294.885 65.61 mo
295.785 65.61 li
298.485 65.61 mo
299.385 65.61 li
302.085 65.61 mo
302.985 65.61 li
305.685 65.61 mo
306.585 65.61 li
309.285 65.61 mo
310.185 65.61 li
312.885 65.61 mo
313.785 65.61 li
316.485 65.61 mo
317.385 65.61 li
320.085 65.61 mo
320.985 65.61 li
323.64 65.88 mo
324.09 66.015 li
324.36 66.375 li
325.035 68.895 mo
325.035 69.795 li
325.035 72.495 mo
325.035 73.395 li
325.035 76.095 mo
325.035 76.995 li
325.035 79.695 mo
325.035 80.595 li
325.035 83.295 mo
325.035 84.195 li
325.035 86.895 mo
325.035 87.795 li
323.595 89.91 mo
323.46 90 li
322.785 90.135 li
322.74 90.135 li
320.04 90.135 mo
319.14 90.135 li
316.44 90.135 mo
315.54 90.135 li
312.84 90.135 mo
311.94 90.135 li
309.24 90.135 mo
308.34 90.135 li
305.64 90.135 mo
304.74 90.135 li
302.04 90.135 mo
301.14 90.135 li
298.44 90.135 mo
297.54 90.135 li
294.84 90.135 mo
293.94 90.135 li
291.24 90.135 mo
291.15 90.135 li
290.385 89.865 li
288.9 87.84 mo
288.9 86.94 li
288.9 84.24 mo
288.9 83.34 li
288.9 80.64 mo
288.9 79.74 li
288.9 77.04 mo
288.9 76.14 li
288.9 73.44 mo
288.9 72.54 li
288.9 69.84 mo
288.9 68.94 li
0 0 0 rgb
@
305.87 78.93 mo
305.87 76.6944 li
303.265 76.6944 li
303.265 78.93 li
302.623 78.93 li
302.623 74.1089 li
303.265 74.1089 li
303.265 76.1501 li
305.87 76.1501 li
305.87 74.1089 li
306.531 74.1089 li
306.531 78.93 li
305.87 78.93 li
f
309.738 78.93 mo
309.077 78.93 li
307.114 74.1089 li
307.794 74.1089 li
309.408 78.3468 li
311.021 74.1089 li
311.721 74.1089 li
f
324.765 49.77 mo
330.975 49.77 li
332.235 49.77 333.225 50.805 333.225 52.02 cv
333.225 62.325 li
333.225 63.585 334.26 64.575 335.475 64.575 cv
341.685 64.575 li
@
324.765 49.77 mo
323.415 49.77 li
@
341.685 64.575 mo
335.295 66.69 li
335.295 62.505 li
cp
f
341.685 64.125 mo
341.685 65.07 li
334.845 67.32 li
334.845 61.875 li
cp
335.745 66.06 mo
340.245 64.575 li
335.745 63.135 li
cp
f
288.9 39.825 mo
288.9 38.61 289.89 37.575 291.15 37.575 cv
322.515 37.575 li
323.775 37.575 324.765 38.61 324.765 39.825 cv
324.765 59.715 li
324.765 60.975 323.775 61.965 322.515 61.965 cv
291.15 61.965 li
289.89 61.965 288.9 60.975 288.9 59.715 cv
cp
1 1 1 rgb
f
288.9 39.825 mo
289.17 38.97 li
291.285 37.575 mo
292.185 37.575 li
294.885 37.575 mo
295.785 37.575 li
298.485 37.575 mo
299.385 37.575 li
302.085 37.575 mo
302.985 37.575 li
305.685 37.575 mo
306.585 37.575 li
309.285 37.575 mo
310.185 37.575 li
312.885 37.575 mo
313.785 37.575 li
316.485 37.575 mo
317.385 37.575 li
320.085 37.575 mo
320.985 37.575 li
323.595 37.935 mo
323.865 38.025 li
324.225 38.565 li
324.765 41.085 mo
324.765 41.985 li
324.765 44.685 mo
324.765 45.585 li
324.765 48.285 mo
324.765 49.185 li
324.765 51.885 mo
324.765 52.785 li
324.765 55.485 mo
324.765 56.385 li
324.765 59.085 mo
324.765 59.715 li
324.675 59.985 li
323.01 61.92 mo
322.515 61.965 li
322.155 61.965 li
319.455 61.965 mo
318.555 61.965 li
315.855 61.965 mo
314.955 61.965 li
312.255 61.965 mo
311.355 61.965 li
308.655 61.965 mo
307.755 61.965 li
305.055 61.965 mo
304.155 61.965 li
301.455 61.965 mo
300.555 61.965 li
297.855 61.965 mo
296.955 61.965 li
294.255 61.965 mo
293.355 61.965 li
290.655 61.83 mo
289.8 61.56 li
289.8 61.515 li
288.9 59.085 mo
288.9 58.185 li
288.9 55.485 mo
288.9 54.585 li
288.9 51.885 mo
288.9 50.985 li
288.9 48.285 mo
288.9 47.385 li
288.9 44.685 mo
288.9 43.785 li
288.9 41.085 mo
288.9 40.185 li
0 0 0 rgb
@
303.53 50.895 mo
303.53 48.6594 li
300.925 48.6594 li
300.925 50.895 li
300.283 50.895 li
300.283 46.0739 li
300.925 46.0739 li
300.925 48.1151 li
303.53 48.1151 li
303.53 46.0739 li
304.191 46.0739 li
304.191 50.895 li
303.53 50.895 li
f
307.398 50.895 mo
306.737 50.895 li
304.774 46.0739 li
305.454 46.0739 li
307.068 50.3118 li
308.681 46.0739 li
309.381 46.0739 li
f
312.511 48.3484 mo
313.191 48.4456 313.697 48.7955 313.697 49.5342 cv
313.697 51.2255 311.636 50.8561 309.984 50.895 cv
309.984 46.0739 li
311.461 46.1322 313.425 45.7434 313.425 47.2403 cv
313.425 47.8818 313.055 48.2123 312.511 48.3484 cv
cp
310.625 48.1345 mo
311.597 48.1151 312.764 48.3095 312.764 47.3181 cv
312.764 46.4044 311.539 46.6182 310.625 46.5988 cv
310.625 48.1345 li
cp
310.625 50.3701 mo
311.694 50.3313 313.036 50.6423 313.036 49.4953 cv
313.036 48.4067 311.675 48.6788 310.625 48.64 cv
310.625 50.3701 li
f
522.63 61.65 mo
522.63 60.39 523.62 59.4 524.88 59.4 cv
592.56 59.4 li
593.82 59.4 594.81 60.39 594.81 61.65 cv
594.81 79.245 li
594.81 80.505 593.82 81.495 592.56 81.495 cv
524.88 81.495 li
523.62 81.495 522.63 80.505 522.63 79.245 cv
cp
1 1 1 rgb
f
522.63 61.65 mo
522.63 60.39 523.62 59.4 524.88 59.4 cv
592.56 59.4 li
593.82 59.4 594.81 60.39 594.81 61.65 cv
594.81 79.245 li
594.81 80.505 593.82 81.495 592.56 81.495 cv
524.88 81.495 li
523.62 81.495 522.63 80.505 522.63 79.245 cv
cp
0 0 0 rgb
@
547.075 62.9532 mo
547.075 64.7417 li
549.757 64.7417 li
549.757 65.286 li
547.075 65.286 li
547.075 67.23 li
546.433 67.23 li
546.433 62.4089 li
549.835 62.4089 li
549.835 62.9532 li
547.075 62.9532 li
f
552.051 63.4586 mo
553.276 63.4586 553.723 64.2751 553.684 65.5193 cv
551.06 65.5193 li
551.06 66.2969 551.332 66.8218 552.09 66.8412 cv
552.596 66.8606 552.926 66.6079 553.043 66.2775 cv
553.587 66.433 li
553.373 66.9773 552.868 67.3078 552.09 67.3078 cv
550.963 67.3078 550.38 66.5885 550.399 65.3638 cv
550.418 64.1779 550.904 63.4586 552.051 63.4586 cv
cp
553.062 65.0333 mo
553.179 63.8669 551.585 63.5364 551.177 64.489 cv
551.118 64.625 551.06 64.8194 551.06 65.0333 cv
553.062 65.0333 li
f
556.736 66.5302 mo
556.445 66.9384 556.134 67.3272 555.414 67.3078 cv
554.715 67.2883 554.287 66.8995 554.287 66.1997 cv
554.268 64.9555 555.512 64.975 556.717 64.975 cv
556.775 64.2946 556.542 63.9252 555.92 63.9252 cv
555.453 63.9446 555.123 64.0613 555.103 64.5278 cv
554.462 64.4695 li
554.559 63.7502 555.103 63.4586 555.939 63.4586 cv
556.814 63.4586 557.339 63.8474 557.339 64.7028 cv
557.339 66.2969 li
557.32 66.6857 557.475 66.919 557.883 66.8218 cv
557.883 67.2106 li
557.281 67.3855 556.698 67.1717 556.736 66.5302 cv
cp
554.928 66.1997 mo
554.928 66.5885 555.162 66.8412 555.551 66.8412 cv
556.348 66.7829 556.775 66.2775 556.717 65.4026 cv
555.881 65.4415 554.928 65.3055 554.928 66.1997 cv
f
559.03 66.3163 mo
558.991 66.7829 559.38 66.8801 559.769 66.744 cv
559.769 67.2106 li
559.128 67.405 558.408 67.3078 558.408 66.4524 cv
558.408 63.9835 li
557.981 63.9835 li
557.981 63.5364 li
558.447 63.5364 li
558.622 62.7005 li
559.03 62.7005 li
559.03 63.5364 li
559.711 63.5364 li
559.711 63.9835 li
559.03 63.9835 li
559.03 66.3163 li
f
561.46 67.3078 mo
559.73 67.3855 560.411 65.0527 560.274 63.5364 cv
560.896 63.5364 li
560.896 65.8692 li
560.896 66.4718 561.033 66.8412 561.655 66.8218 cv
563.054 66.7829 562.529 64.8583 562.627 63.5364 cv
563.229 63.5364 li
563.249 67.23 li
562.666 67.23 li
562.646 67.0356 562.685 66.744 562.627 66.5885 cv
562.413 67.0162 562.082 67.2883 561.46 67.3078 cv
f
565.931 64.0613 mo
564.415 63.7502 564.901 65.8303 564.823 67.23 cv
564.201 67.23 li
564.182 63.5364 li
564.765 63.5364 li
564.784 63.7697 564.746 64.1002 564.804 64.2946 cv
564.921 63.7697 565.251 63.342 565.931 63.4975 cv
565.931 64.0613 li
f
567.973 63.4586 mo
569.197 63.4586 569.644 64.2751 569.606 65.5193 cv
566.981 65.5193 li
566.981 66.2969 567.253 66.8218 568.012 66.8412 cv
568.517 66.8606 568.847 66.6079 568.964 66.2775 cv
569.508 66.433 li
569.295 66.9773 568.789 67.3078 568.012 67.3078 cv
566.884 67.3078 566.301 66.5885 566.32 65.3638 cv
566.34 64.1779 566.826 63.4586 567.973 63.4586 cv
cp
568.984 65.0333 mo
569.1 63.8669 567.506 63.5364 567.098 64.489 cv
567.04 64.625 566.981 64.8194 566.981 65.0333 cv
568.984 65.0333 li
f
570.558 64.2362 mo
570.558 63.5364 li
571.219 63.5364 li
571.219 64.2362 li
570.558 64.2362 li
cp
570.558 67.23 mo
570.558 66.5302 li
571.219 66.5302 li
571.219 67.23 li
570.558 67.23 li
f
553.955 75.645 mo
553.955 73.4094 li
551.35 73.4094 li
551.35 75.645 li
550.708 75.645 li
550.708 70.8239 li
551.35 70.8239 li
551.35 72.8651 li
553.955 72.8651 li
553.955 70.8239 li
554.616 70.8239 li
554.616 75.645 li
553.955 75.645 li
f
557.823 75.645 mo
557.162 75.645 li
555.199 70.8239 li
555.879 70.8239 li
557.493 75.0618 li
559.106 70.8239 li
559.806 70.8239 li
f
560.35 75.645 mo
560.35 75.1201 li
561.595 75.1201 li
561.595 71.4265 li
560.506 72.1847 li
560.506 71.6209 li
561.633 70.8239 li
562.197 70.8239 li
562.197 75.1201 li
563.383 75.1201 li
563.383 75.645 li
560.35 75.645 li
f
566.163 73.1761 mo
566.805 73.2928 567.29 73.5649 567.29 74.3231 cv
567.29 76.0338 564.588 76.1116 564.102 74.8869 cv
564.044 74.7313 564.005 74.5758 563.986 74.4008 cv
564.608 74.3425 li
564.724 74.8674 565.016 75.1979 565.658 75.1979 cv
566.28 75.1979 566.668 74.9063 566.668 74.3036 cv
566.668 73.5649 565.969 73.4094 565.133 73.4677 cv
565.133 72.9234 li
565.891 72.9429 566.532 72.8457 566.532 72.1069 cv
566.532 71.582 566.202 71.271 565.638 71.271 cv
565.094 71.271 564.724 71.5626 564.686 72.0681 cv
564.063 72.0097 li
564.18 71.1933 564.744 70.785 565.638 70.7656 cv
566.571 70.7461 567.174 71.1738 567.174 72.0292 cv
567.174 72.729 566.766 73.0401 566.163 73.1761 cv
f
522.9 24.39 mo
522.9 23.13 523.89 22.14 525.15 22.14 cv
592.83 22.14 li
594.09 22.14 595.08 23.13 595.08 24.39 cv
595.08 44.01 li
595.08 45.27 594.09 46.26 592.83 46.26 cv
525.15 46.26 li
523.89 46.26 522.9 45.27 522.9 44.01 cv
cp
1 1 1 rgb
f
522.9 24.39 mo
522.9 23.13 523.89 22.14 525.15 22.14 cv
592.83 22.14 li
594.09 22.14 595.08 23.13 595.08 24.39 cv
595.08 44.01 li
595.08 45.27 594.09 46.26 592.83 46.26 cv
525.15 46.26 li
523.89 46.26 522.9 45.27 522.9 44.01 cv
cp
0 0 0 rgb
@
547.075 25.6932 mo
547.075 27.4817 li
549.757 27.4817 li
549.757 28.026 li
547.075 28.026 li
547.075 29.97 li
546.433 29.97 li
546.433 25.1489 li
549.835 25.1489 li
549.835 25.6932 li
547.075 25.6932 li
f
552.051 26.1987 mo
553.276 26.1987 553.723 27.0151 553.684 28.2593 cv
551.06 28.2593 li
551.06 29.0369 551.332 29.5618 552.09 29.5812 cv
552.596 29.6006 552.926 29.3479 553.043 29.0175 cv
553.587 29.173 li
553.373 29.7173 552.868 30.0478 552.09 30.0478 cv
550.963 30.0478 550.38 29.3285 550.399 28.1038 cv
550.418 26.9179 550.904 26.1987 552.051 26.1987 cv
cp
553.062 27.7733 mo
553.179 26.6069 551.585 26.2764 551.177 27.229 cv
551.118 27.3651 551.06 27.5594 551.06 27.7733 cv
553.062 27.7733 li
f
556.736 29.2702 mo
556.445 29.6784 556.134 30.0672 555.414 30.0478 cv
554.715 30.0283 554.287 29.6395 554.287 28.9397 cv
554.268 27.6955 555.512 27.715 556.717 27.715 cv
556.775 27.0346 556.542 26.6652 555.92 26.6652 cv
555.453 26.6846 555.123 26.8013 555.103 27.2679 cv
554.462 27.2095 li
554.559 26.4902 555.103 26.1987 555.939 26.1987 cv
556.814 26.1987 557.339 26.5874 557.339 27.4428 cv
557.339 29.0369 li
557.32 29.4257 557.475 29.659 557.883 29.5618 cv
557.883 29.9506 li
557.281 30.1255 556.698 29.9117 556.736 29.2702 cv
cp
554.928 28.9397 mo
554.928 29.3285 555.162 29.5812 555.551 29.5812 cv
556.348 29.5229 556.775 29.0175 556.717 28.1427 cv
555.881 28.1815 554.928 28.0455 554.928 28.9397 cv
f
559.03 29.0563 mo
558.991 29.5229 559.38 29.6201 559.769 29.484 cv
559.769 29.9506 li
559.128 30.145 558.408 30.0478 558.408 29.1924 cv
558.408 26.7235 li
557.981 26.7235 li
557.981 26.2764 li
558.447 26.2764 li
558.622 25.4405 li
559.03 25.4405 li
559.03 26.2764 li
559.711 26.2764 li
559.711 26.7235 li
559.03 26.7235 li
559.03 29.0563 li
f
561.46 30.0478 mo
559.73 30.1255 560.411 27.7927 560.274 26.2764 cv
560.896 26.2764 li
560.896 28.6092 li
560.896 29.2119 561.033 29.5812 561.655 29.5618 cv
563.054 29.5229 562.529 27.5983 562.627 26.2764 cv
563.229 26.2764 li
563.249 29.97 li
562.666 29.97 li
562.646 29.7756 562.685 29.484 562.627 29.3285 cv
562.413 29.7562 562.082 30.0283 561.46 30.0478 cv
f
565.931 26.8013 mo
564.415 26.4902 564.901 28.5703 564.823 29.97 cv
564.201 29.97 li
564.182 26.2764 li
564.765 26.2764 li
564.784 26.5097 564.746 26.8402 564.804 27.0346 cv
564.921 26.5097 565.251 26.082 565.931 26.2375 cv
565.931 26.8013 li
f
567.973 26.1987 mo
569.197 26.1987 569.644 27.0151 569.606 28.2593 cv
566.981 28.2593 li
566.981 29.0369 567.253 29.5618 568.012 29.5812 cv
568.517 29.6006 568.847 29.3479 568.964 29.0175 cv
569.508 29.173 li
569.295 29.7173 568.789 30.0478 568.012 30.0478 cv
566.884 30.0478 566.301 29.3285 566.32 28.1038 cv
566.34 26.9179 566.826 26.1987 567.973 26.1987 cv
cp
568.984 27.7733 mo
569.1 26.6069 567.506 26.2764 567.098 27.229 cv
567.04 27.3651 566.981 27.5594 566.981 27.7733 cv
568.984 27.7733 li
f
570.558 26.9762 mo
570.558 26.2764 li
571.219 26.2764 li
571.219 26.9762 li
570.558 26.9762 li
cp
570.558 29.97 mo
570.558 29.2702 li
571.219 29.2702 li
571.219 29.97 li
570.558 29.97 li
f
536.021 34.9052 mo
535.827 34.3609 535.341 34.0304 534.602 34.0304 cv
533.455 34.0304 532.911 34.808 532.911 35.955 cv
532.911 37.1214 533.475 37.9184 534.641 37.9184 cv
535.477 37.9184 535.846 37.4519 536.157 36.9076 cv
536.682 37.1797 li
536.332 37.9184 535.691 38.4628 534.602 38.4628 cv
533.047 38.4628 532.328 37.4908 532.25 35.955 cv
532.133 33.9332 534.174 32.9807 535.885 33.7972 cv
536.255 33.9721 536.488 34.3026 536.643 34.6914 cv
f
539.656 33.5056 mo
541.231 33.5056 542.048 34.3998 542.048 35.955 cv
542.048 37.4908 541.192 38.4628 539.656 38.4628 cv
538.082 38.4628 537.265 37.5102 537.265 35.955 cv
537.265 34.3998 538.082 33.5056 539.656 33.5056 cv
cp
539.656 37.9184 mo
540.881 37.9184 541.387 37.1214 541.387 35.955 cv
541.387 34.7886 540.823 34.0304 539.656 34.0304 cv
538.471 34.0304 537.926 34.7886 537.926 35.955 cv
537.926 37.1214 538.471 37.899 539.656 37.9184 cv
f
542.961 38.385 mo
542.961 33.5639 li
543.603 33.5639 li
543.603 37.8601 li
546.033 37.8601 li
546.033 38.385 li
542.961 38.385 li
f
548.988 33.5056 mo
550.562 33.5056 551.379 34.3998 551.379 35.955 cv
551.379 37.4908 550.523 38.4628 548.988 38.4628 cv
547.413 38.4628 546.597 37.5102 546.597 35.955 cv
546.597 34.3998 547.413 33.5056 548.988 33.5056 cv
cp
548.988 37.9184 mo
550.212 37.9184 550.718 37.1214 550.718 35.955 cv
550.718 34.7886 550.154 34.0304 548.988 34.0304 cv
547.802 34.0304 547.258 34.7886 547.258 35.955 cv
547.258 37.1214 547.802 37.899 548.988 37.9184 cv
f
556.239 34.9441 mo
556.219 35.7412 555.792 36.1883 555.072 36.3049 cv
556.433 38.385 li
555.695 38.385 li
554.431 36.3827 li
552.934 36.3827 li
552.934 38.385 li
552.293 38.385 li
552.293 33.5639 li
554.003 33.6222 556.278 33.1556 556.239 34.9441 cv
cp
552.934 35.8772 mo
554.1 35.8384 555.597 36.13 555.597 34.9636 cv
555.597 33.7777 554.042 34.1471 552.934 34.0888 cv
552.934 35.8772 li
f
556.647 39.7847 mo
556.647 39.3376 li
560.71 39.3376 li
560.71 39.7847 li
556.647 39.7847 li
f
564.754 34.9052 mo
564.559 34.3609 564.073 34.0304 563.334 34.0304 cv
562.187 34.0304 561.643 34.808 561.643 35.955 cv
561.643 37.1214 562.207 37.9184 563.373 37.9184 cv
564.209 37.9184 564.579 37.4519 564.89 36.9076 cv
565.414 37.1797 li
565.065 37.9184 564.423 38.4628 563.334 38.4628 cv
561.779 38.4628 561.06 37.4908 560.982 35.955 cv
560.866 33.9332 562.907 32.9807 564.617 33.7972 cv
564.987 33.9721 565.22 34.3026 565.376 34.6914 cv
f
568.389 33.5056 mo
569.963 33.5056 570.78 34.3998 570.78 35.955 cv
570.78 37.4908 569.925 38.4628 568.389 38.4628 cv
566.814 38.4628 565.998 37.5102 565.998 35.955 cv
565.998 34.3998 566.814 33.5056 568.389 33.5056 cv
cp
568.389 37.9184 mo
569.614 37.9184 570.119 37.1214 570.119 35.955 cv
570.119 34.7886 569.555 34.0304 568.389 34.0304 cv
567.203 34.0304 566.659 34.7886 566.659 35.955 cv
566.659 37.1214 567.203 37.899 568.389 37.9184 cv
f
574.94 38.385 mo
574.94 36.1494 li
572.335 36.1494 li
572.335 38.385 li
571.694 38.385 li
571.694 33.5639 li
572.335 33.5639 li
572.335 35.6051 li
574.94 35.6051 li
574.94 33.5639 li
575.601 33.5639 li
575.601 38.385 li
574.94 38.385 li
f
576.729 38.385 mo
576.729 33.5639 li
580.364 33.5639 li
580.364 34.1082 li
577.37 34.1082 li
577.37 35.644 li
580.169 35.644 li
580.169 36.1688 li
577.37 36.1688 li
577.37 37.8601 li
580.519 37.8601 li
580.519 38.385 li
576.729 38.385 li
f
585.341 34.9441 mo
585.321 35.7412 584.893 36.1883 584.174 36.3049 cv
585.535 38.385 li
584.796 38.385 li
583.533 36.3827 li
582.036 36.3827 li
582.036 38.385 li
581.394 38.385 li
581.394 33.5639 li
583.105 33.6222 585.379 33.1556 585.341 34.9441 cv
cp
582.036 35.8772 mo
583.202 35.8384 584.699 36.13 584.699 34.9636 cv
584.699 33.7777 583.144 34.1471 582.036 34.0888 cv
582.036 35.8772 li
f
510.435 70.335 mo
516.465 70.335 li
516.555 70.38 li
516.555 70.425 li
522.63 70.425 li
@
510.435 70.335 mo
509.085 70.335 li
@
522.63 70.425 mo
516.195 72.45 li
516.24 68.265 li
cp
f
522.63 69.975 mo
522.63 70.92 li
515.7 73.035 li
515.79 67.635 li
cp
516.645 71.82 mo
521.19 70.425 li
516.69 68.895 li
cp
f
468.045 51.48 mo
556.47 51.48 li
557.73 51.48 558.72 52.47 558.72 53.73 cv
558.72 59.4 li
@
468.045 51.48 mo
466.695 51.48 li
@
558.72 59.4 mo
556.65 52.965 li
560.79 52.965 li
cp
f
559.215 59.4 mo
558.27 59.4 li
556.02 52.515 li
561.42 52.515 li
cp
557.235 53.415 mo
558.72 57.915 li
560.205 53.415 li
cp
f
510.39 34.2 mo
522.9 34.2 li
@
522.9 34.2 mo
516.465 36.27 li
516.465 32.13 li
cp
f
522.9 33.705 mo
522.9 34.695 li
516.015 36.9 li
516.015 31.5 li
cp
516.915 35.685 mo
521.46 34.2 li
516.915 32.715 li
cp
f
467.91 13.59 mo
556.74 13.59 li
558 13.59 558.99 14.625 558.99 15.84 cv
558.99 22.14 li
@
558.99 22.14 mo
556.92 15.705 li
561.06 15.705 li
cp
f
559.485 22.14 mo
558.54 22.14 li
556.29 15.255 li
561.69 15.255 li
cp
557.505 16.155 mo
558.99 20.7 li
560.475 16.155 li
cp
f
34.38 92.745 mo
53.595 92.835 li
@
34.38 92.295 mo
34.38 92.745 li
34.38 92.295 li
cp
f
53.595 92.835 mo
47.16 94.905 li
47.16 90.72 li
cp
f
53.595 92.385 mo
53.595 93.33 li
46.71 95.49 li
46.71 90.09 li
cp
47.61 94.275 mo
52.11 92.835 li
47.61 91.35 li
cp
f
34.38 92.745 mo
41.715 92.745 li
42.975 92.745 43.965 91.71 43.965 90.495 cv
43.965 65.16 li
43.965 63.9 45 62.91 46.215 62.91 cv
53.595 62.91 li
@
53.595 62.91 mo
47.16 64.98 li
47.16 60.795 li
cp
f
53.595 62.415 mo
53.595 63.36 li
46.71 65.61 li
46.71 60.165 li
cp
47.61 64.35 mo
52.11 62.91 li
47.61 61.425 li
cp
f
125.595 62.91 mo
136.485 62.91 li
@
136.485 62.91 mo
130.095 64.98 li
130.095 60.795 li
cp
f
136.485 62.415 mo
136.485 63.36 li
129.645 65.61 li
129.645 60.165 li
cp
130.545 64.35 mo
135.045 62.91 li
130.545 61.425 li
cp
f
125.595 92.835 mo
136.575 92.835 li
@
136.575 92.835 mo
130.185 94.905 li
130.185 90.765 li
cp
f
136.575 92.385 mo
136.575 93.33 li
129.735 95.535 li
129.735 90.135 li
cp
130.635 94.32 mo
135.135 92.835 li
130.635 91.35 li
cp
f
208.17 62.91 mo
214.695 62.91 li
215.955 62.91 216.945 63.9 216.945 65.16 cv
216.945 75.6 li
216.945 76.86 217.98 77.85 219.195 77.85 cv
225.765 77.85 li
@
225.765 77.85 mo
219.33 79.965 li
219.33 75.78 li
cp
f
225.765 77.4 mo
225.765 78.345 li
218.88 80.55 li
218.88 75.15 li
cp
219.78 79.335 mo
224.28 77.85 li
219.78 76.41 li
cp
f
208.17 92.835 mo
214.695 92.835 li
215.955 92.835 216.945 91.845 216.945 90.585 cv
216.945 80.1 li
216.945 78.885 217.98 77.85 219.195 77.85 cv
225.765 77.85 li
@
225.765 77.85 mo
219.33 79.965 li
219.33 75.78 li
cp
f
225.765 77.4 mo
225.765 78.345 li
218.88 80.55 li
218.88 75.15 li
cp
219.78 79.335 mo
224.28 77.85 li
219.78 76.41 li
cp
f
270.855 77.85 mo
277.65 77.85 li
278.91 77.85 279.9 76.86 279.9 75.6 cv
279.9 52.02 li
279.9 50.805 280.89 49.77 282.15 49.77 cv
288.9 49.77 li
@
288.9 49.77 mo
282.465 51.885 li
282.465 47.7 li
cp
f
288.9 49.32 mo
288.9 50.265 li
282.015 52.515 li
282.015 47.07 li
cp
282.915 51.255 mo
287.46 49.77 li
282.915 48.33 li
cp
f
270.855 77.85 mo
288.9 77.85 li
@
288.9 77.85 mo
282.51 79.965 li
282.51 75.78 li
cp
f
288.9 77.4 mo
288.9 78.345 li
282.06 80.55 li
282.06 75.15 li
cp
282.96 79.335 mo
287.46 77.85 li
282.96 76.41 li
cp
f
270.855 77.85 mo
277.56 77.85 li
278.82 77.85 279.81 78.885 279.81 80.1 cv
279.81 103.95 li
279.81 105.21 280.8 106.2 282.06 106.2 cv
288.765 106.2 li
@
288.765 106.2 mo
282.33 108.27 li
282.33 104.13 li
cp
f
288.765 105.75 mo
288.765 106.695 li
281.88 108.9 li
281.88 103.5 li
cp
282.78 107.685 mo
287.28 106.2 li
282.78 104.715 li
cp
f
125.64 134.55 mo
289.305 134.595 li
@
125.64 134.1 mo
125.64 134.55 li
125.64 134.1 li
cp
f
289.305 134.595 mo
282.87 136.665 li
282.87 132.525 li
cp
f
289.305 134.1 mo
289.305 135.045 li
282.42 137.295 li
282.42 131.895 li
cp
283.32 136.08 mo
287.865 134.595 li
283.32 133.11 li
cp
f
17.775 104.805 mo
17.775 132.3 li
17.775 133.56 18.765 134.55 20.025 134.55 cv
53.46 134.55 li
@
53.46 134.55 mo
47.025 136.62 li
47.025 132.48 li
cp
f
53.46 134.055 mo
53.46 135.045 li
46.575 137.25 li
46.575 131.85 li
cp
47.475 136.035 mo
52.02 134.55 li
47.475 133.065 li
cp
f
324.495 134.595 mo
330.84 134.595 li
332.1 134.595 333.09 133.605 333.09 132.345 cv
333.09 125.73 li
333.09 124.515 334.125 123.48 335.34 123.48 cv
341.685 123.48 li
@
341.685 123.48 mo
335.295 125.595 li
335.295 121.41 li
cp
f
341.685 123.03 mo
341.685 123.975 li
334.845 126.18 li
334.845 120.78 li
cp
335.745 124.965 mo
340.245 123.48 li
335.745 122.04 li
cp
f
17.775 104.805 mo
17.775 168.3 li
17.775 169.56 18.765 170.55 20.025 170.55 cv
341.685 170.55 li
342.945 170.55 343.935 169.56 343.935 168.3 cv
343.935 136.755 li
@
346.05 143.19 mo
341.865 143.19 li
343.935 136.755 li
cp
f
343.935 136.755 mo
344.43 136.755 li
346.68 143.64 li
341.235 143.64 li
343.53 136.62 li
cp
342.495 142.74 mo
345.42 142.74 li
343.935 138.195 li
cp
f
325.035 77.85 mo
331.11 77.85 li
332.37 77.85 333.36 76.86 333.36 75.6 cv
333.36 66.825 li
333.36 65.61 334.35 64.575 335.61 64.575 cv
341.685 64.575 li
@
341.685 64.575 mo
335.295 66.69 li
335.295 62.505 li
cp
f
341.685 64.125 mo
341.685 65.07 li
334.845 67.32 li
334.845 61.875 li
cp
335.745 66.06 mo
340.245 64.575 li
335.745 63.135 li
cp
f
324.855 106.2 mo
331.02 106.2 li
332.28 106.2 333.27 107.19 333.27 108.45 cv
333.27 121.23 li
333.27 122.49 334.26 123.48 335.52 123.48 cv
341.685 123.48 li
@
341.685 123.48 mo
335.295 125.595 li
335.295 121.41 li
cp
f
341.685 123.03 mo
341.685 123.975 li
334.845 126.18 li
334.845 120.78 li
cp
335.745 124.965 mo
340.245 123.48 li
335.745 122.04 li
cp
f
433.845 43.2 mo
433.845 41.985 434.88 40.95 436.095 40.95 cv
465.795 40.95 li
467.01 40.95 468.045 41.985 468.045 43.2 cv
468.045 59.76 li
468.045 60.975 467.01 62.01 465.795 62.01 cv
436.095 62.01 li
434.88 62.01 433.845 60.975 433.845 59.76 cv
cp
1 1 1 rgb
f
433.845 43.2 mo
434.16 42.345 li
436.23 40.95 mo
437.13 40.95 li
439.83 40.95 mo
440.73 40.95 li
443.43 40.95 mo
444.33 40.95 li
447.03 40.95 mo
447.93 40.95 li
450.63 40.95 mo
451.53 40.95 li
454.23 40.95 mo
455.13 40.95 li
457.83 40.95 mo
458.73 40.95 li
461.43 40.95 mo
462.33 40.95 li
465.03 40.95 mo
465.795 40.95 li
465.93 40.995 li
467.91 42.57 mo
468.045 43.2 li
468.045 43.47 li
468.045 46.17 mo
468.045 47.07 li
468.045 49.77 mo
468.045 50.67 li
468.045 53.37 mo
468.045 54.27 li
468.045 56.97 mo
468.045 57.87 li
467.775 60.525 mo
467.595 61.065 li
467.325 61.29 li
464.85 62.01 mo
463.95 62.01 li
461.25 62.01 mo
460.35 62.01 li
457.65 62.01 mo
456.75 62.01 li
454.05 62.01 mo
453.15 62.01 li
450.45 62.01 mo
449.55 62.01 li
446.85 62.01 mo
445.95 62.01 li
443.25 62.01 mo
442.35 62.01 li
439.65 62.01 mo
438.75 62.01 li
436.05 62.01 mo
435.195 61.695 li
433.845 59.58 mo
433.845 58.68 li
433.845 55.98 mo
433.845 55.08 li
433.845 52.38 mo
433.845 51.48 li
433.845 48.78 mo
433.845 47.88 li
433.845 45.18 mo
433.845 44.28 li
0 0 0 rgb
@
447.53 53.145 mo
447.53 50.9094 li
444.925 50.9094 li
444.925 53.145 li
444.283 53.145 li
444.283 48.3239 li
444.925 48.3239 li
444.925 50.3651 li
447.53 50.3651 li
447.53 48.3239 li
448.191 48.3239 li
448.191 53.145 li
447.53 53.145 li
f
451.398 53.145 mo
450.737 53.145 li
448.774 48.3239 li
449.454 48.3239 li
451.068 52.5618 li
452.681 48.3239 li
453.381 48.3239 li
f
456.511 50.5984 mo
457.191 50.6956 457.697 51.0455 457.697 51.7842 cv
457.697 53.4755 455.636 53.1061 453.984 53.145 cv
453.984 48.3239 li
455.461 48.3822 457.425 47.9934 457.425 49.4903 cv
457.425 50.1318 457.055 50.4623 456.511 50.5984 cv
cp
454.625 50.3845 mo
455.597 50.3651 456.764 50.5595 456.764 49.5681 cv
456.764 48.6544 455.539 48.8682 454.625 48.8488 cv
454.625 50.3845 li
cp
454.625 52.6201 mo
455.694 52.5813 457.036 52.8923 457.036 51.7453 cv
457.036 50.6567 455.675 50.9288 454.625 50.89 cv
454.625 52.6201 li
f
474.795 60.435 mo
474.795 59.175 475.83 58.185 477.045 58.185 cv
508.185 58.185 li
509.445 58.185 510.435 59.175 510.435 60.435 cv
510.435 80.235 li
510.435 81.495 509.445 82.485 508.185 82.485 cv
477.045 82.485 li
475.83 82.485 474.795 81.495 474.795 80.235 cv
cp
1 1 1 rgb
f
474.795 60.435 mo
475.065 59.58 li
477.18 58.185 mo
478.08 58.185 li
480.78 58.185 mo
481.68 58.185 li
484.38 58.185 mo
485.28 58.185 li
487.98 58.185 mo
488.88 58.185 li
491.58 58.185 mo
492.48 58.185 li
495.18 58.185 mo
496.08 58.185 li
498.78 58.185 mo
499.68 58.185 li
502.38 58.185 mo
503.28 58.185 li
505.98 58.185 mo
506.88 58.185 li
509.49 58.59 mo
509.535 58.635 li
510.03 59.31 li
510.435 61.92 mo
510.435 62.82 li
510.435 65.52 mo
510.435 66.42 li
510.435 69.12 mo
510.435 70.02 li
510.435 72.72 mo
510.435 73.62 li
510.435 76.32 mo
510.435 77.22 li
510.435 79.92 mo
510.435 80.235 li
510.255 80.775 li
508.41 82.485 mo
508.185 82.485 li
507.51 82.485 li
504.81 82.485 mo
503.91 82.485 li
501.21 82.485 mo
500.31 82.485 li
497.61 82.485 mo
496.71 82.485 li
494.01 82.485 mo
493.11 82.485 li
490.41 82.485 mo
489.51 82.485 li
486.81 82.485 mo
485.91 82.485 li
483.21 82.485 mo
482.31 82.485 li
479.61 82.485 mo
478.71 82.485 li
476.055 82.17 mo
475.74 82.08 li
475.425 81.63 li
474.795 79.11 mo
474.795 78.21 li
474.795 75.51 mo
474.795 74.61 li
474.795 71.91 mo
474.795 71.01 li
474.795 68.31 mo
474.795 67.41 li
474.795 64.71 mo
474.795 63.81 li
474.795 61.11 mo
474.795 60.435 li
0 0 0 rgb
@
491.495 71.505 mo
491.495 69.2694 li
488.89 69.2694 li
488.89 71.505 li
488.248 71.505 li
488.248 66.6839 li
488.89 66.6839 li
488.89 68.7251 li
491.495 68.7251 li
491.495 66.6839 li
492.156 66.6839 li
492.156 71.505 li
491.495 71.505 li
f
495.363 71.505 mo
494.702 71.505 li
492.739 66.6839 li
493.419 66.6839 li
495.033 70.9218 li
496.646 66.6839 li
497.346 66.6839 li
f
475.245 123.48 mo
475.245 122.265 476.28 121.23 477.495 121.23 cv
508.185 121.23 li
509.445 121.23 510.435 122.265 510.435 123.48 cv
510.435 143.64 li
510.435 144.855 509.445 145.89 508.185 145.89 cv
477.495 145.89 li
476.28 145.89 475.245 144.855 475.245 143.64 cv
cp
1 1 1 rgb
f
475.245 123.48 mo
475.515 122.625 li
477.63 121.23 mo
478.53 121.23 li
481.23 121.23 mo
482.13 121.23 li
484.83 121.23 mo
485.73 121.23 li
488.43 121.23 mo
489.33 121.23 li
492.03 121.23 mo
492.93 121.23 li
495.63 121.23 mo
496.53 121.23 li
499.23 121.23 mo
500.13 121.23 li
502.83 121.23 mo
503.73 121.23 li
506.43 121.23 mo
507.33 121.23 li
509.76 122.04 mo
510.3 122.76 li
510.435 125.415 mo
510.435 126.315 li
510.435 129.015 mo
510.435 129.915 li
510.435 132.615 mo
510.435 133.515 li
510.435 136.215 mo
510.435 137.115 li
510.435 139.815 mo
510.435 140.715 li
510.435 143.415 mo
510.435 143.64 li
510.21 144.315 li
508.275 145.845 mo
508.185 145.89 li
507.375 145.89 li
504.675 145.89 mo
503.775 145.89 li
501.075 145.89 mo
500.175 145.89 li
497.475 145.89 mo
496.575 145.89 li
493.875 145.89 mo
492.975 145.89 li
490.275 145.89 mo
489.375 145.89 li
486.675 145.89 mo
485.775 145.89 li
483.075 145.89 mo
482.175 145.89 li
479.475 145.89 mo
478.575 145.89 li
476.055 145.26 mo
475.515 144.54 li
475.245 141.885 mo
475.245 140.985 li
475.245 138.285 mo
475.245 137.385 li
475.245 134.685 mo
475.245 133.785 li
475.245 131.085 mo
475.245 130.185 li
475.245 127.485 mo
475.245 126.585 li
475.245 123.885 mo
475.245 123.48 li
0 0 0 rgb
@
491.56 134.55 mo
491.016 133.15 li
488.819 133.15 li
488.275 134.55 li
487.594 134.55 li
489.558 129.729 li
490.297 129.729 li
492.221 134.55 li
491.56 134.55 li
cp
490.821 132.625 mo
489.908 130.234 li
489.674 131.109 489.305 131.828 489.014 132.625 cv
490.821 132.625 li
f
494.185 130.273 mo
494.185 134.55 li
493.524 134.55 li
493.524 130.273 li
491.871 130.273 li
491.871 129.729 li
495.837 129.729 li
495.837 130.273 li
494.185 130.273 li
f
496.615 134.55 mo
496.615 129.729 li
497.276 129.729 li
497.276 134.55 li
496.615 134.55 li
f
433.755 104.85 mo
433.755 103.635 434.745 102.6 436.005 102.6 cv
466.695 102.6 li
467.91 102.6 468.945 103.635 468.945 104.85 cv
468.945 124.965 li
468.945 126.225 467.91 127.215 466.695 127.215 cv
436.005 127.215 li
434.745 127.215 433.755 126.225 433.755 124.965 cv
cp
1 1 1 rgb
f
433.755 104.85 mo
434.025 103.995 li
436.095 102.6 mo
436.995 102.6 li
439.695 102.6 mo
440.595 102.6 li
443.295 102.6 mo
444.195 102.6 li
446.895 102.6 mo
447.795 102.6 li
450.495 102.6 mo
451.395 102.6 li
454.095 102.6 mo
454.995 102.6 li
457.695 102.6 mo
458.595 102.6 li
461.295 102.6 mo
462.195 102.6 li
464.895 102.6 mo
465.795 102.6 li
468.27 103.365 mo
468.81 104.13 li
468.945 106.785 mo
468.945 107.685 li
468.945 110.385 mo
468.945 111.285 li
468.945 113.985 mo
468.945 114.885 li
468.945 117.585 mo
468.945 118.485 li
468.945 121.185 mo
468.945 122.085 li
468.945 124.785 mo
468.945 124.965 li
468.72 125.64 li
466.74 127.215 mo
466.695 127.215 li
465.84 127.215 li
463.14 127.215 mo
462.24 127.215 li
459.54 127.215 mo
458.64 127.215 li
455.94 127.215 mo
455.04 127.215 li
452.34 127.215 mo
451.44 127.215 li
448.74 127.215 mo
447.84 127.215 li
445.14 127.215 mo
444.24 127.215 li
441.54 127.215 mo
440.64 127.215 li
437.94 127.215 mo
437.04 127.215 li
434.52 126.585 mo
433.98 125.865 li
433.755 123.21 mo
433.755 122.31 li
433.755 119.61 mo
433.755 118.71 li
433.755 116.01 mo
433.755 115.11 li
433.755 112.41 mo
433.755 111.51 li
433.755 108.81 mo
433.755 107.91 li
433.755 105.21 mo
433.755 104.85 li
0 0 0 rgb
@
445.571 112.44 mo
445.377 111.896 444.891 111.565 444.152 111.565 cv
443.005 111.565 442.461 112.343 442.461 113.49 cv
442.461 114.656 443.025 115.453 444.191 115.453 cv
445.027 115.453 445.396 114.987 445.707 114.443 cv
446.232 114.715 li
445.882 115.453 445.241 115.998 444.152 115.998 cv
442.597 115.998 441.878 115.026 441.8 113.49 cv
441.683 111.468 443.724 110.516 445.435 111.332 cv
445.805 111.507 446.038 111.838 446.193 112.226 cv
f
449.207 111.041 mo
450.781 111.041 451.598 111.935 451.598 113.49 cv
451.598 115.026 450.742 115.998 449.207 115.998 cv
447.632 115.998 446.815 115.045 446.815 113.49 cv
446.815 111.935 447.632 111.041 449.207 111.041 cv
cp
449.207 115.453 mo
450.431 115.453 450.937 114.656 450.937 113.49 cv
450.937 112.324 450.373 111.565 449.207 111.565 cv
448.021 111.565 447.476 112.324 447.476 113.49 cv
447.476 114.656 448.021 115.434 449.207 115.453 cv
f
455.622 115.92 mo
453.056 111.818 li
453.075 115.92 li
452.511 115.92 li
452.511 111.099 li
453.269 111.099 li
455.855 115.24 li
455.816 111.099 li
456.419 111.099 li
456.419 115.92 li
455.622 115.92 li
f
459.432 111.643 mo
459.432 115.92 li
458.771 115.92 li
458.771 111.643 li
457.119 111.643 li
457.119 111.099 li
461.084 111.099 li
461.084 111.643 li
459.432 111.643 li
f
413.91 123.48 mo
422.775 123.48 li
423.99 123.48 425.025 124.515 425.025 125.73 cv
425.025 131.31 li
425.025 132.57 426.015 133.56 427.275 133.56 cv
475.245 133.56 li
@
475.245 133.56 mo
468.855 135.63 li
468.855 131.49 li
cp
f
475.245 133.065 mo
475.245 134.055 li
468.405 136.26 li
468.405 130.86 li
cp
469.305 135.045 mo
473.805 133.56 li
469.305 132.075 li
cp
f
413.91 123.48 mo
421.56 123.48 li
422.82 123.48 423.81 122.49 423.81 121.23 cv
423.81 117.18 li
423.81 115.92 424.845 114.93 426.06 114.93 cv
433.755 114.93 li
@
433.755 114.93 mo
427.32 117 li
427.32 112.815 li
cp
f
433.755 114.435 mo
433.755 115.38 li
426.87 117.63 li
426.87 112.23 li
cp
427.77 116.37 mo
432.27 114.93 li
427.77 113.445 li
cp
f
522.63 124.56 mo
522.63 123.3 523.62 122.31 524.88 122.31 cv
592.56 122.31 li
593.82 122.31 594.81 123.3 594.81 124.56 cv
594.81 142.56 li
594.81 143.82 593.82 144.81 592.56 144.81 cv
524.88 144.81 li
523.62 144.81 522.63 143.82 522.63 142.56 cv
cp
1 1 1 rgb
f
522.63 124.56 mo
522.63 123.3 523.62 122.31 524.88 122.31 cv
592.56 122.31 li
593.82 122.31 594.81 123.3 594.81 124.56 cv
594.81 142.56 li
594.81 143.82 593.82 144.81 592.56 144.81 cv
524.88 144.81 li
523.62 144.81 522.63 143.82 522.63 142.56 cv
cp
0 0 0 rgb
@
547.075 125.863 mo
547.075 127.652 li
549.757 127.652 li
549.757 128.196 li
547.075 128.196 li
547.075 130.14 li
546.433 130.14 li
546.433 125.319 li
549.835 125.319 li
549.835 125.863 li
547.075 125.863 li
f
552.051 126.369 mo
553.276 126.369 553.723 127.185 553.684 128.429 cv
551.06 128.429 li
551.06 129.207 551.332 129.732 552.09 129.751 cv
552.596 129.771 552.926 129.518 553.043 129.187 cv
553.587 129.343 li
553.373 129.887 552.868 130.218 552.09 130.218 cv
550.963 130.218 550.38 129.498 550.399 128.274 cv
550.418 127.088 550.904 126.369 552.051 126.369 cv
cp
553.062 127.943 mo
553.179 126.777 551.585 126.446 551.177 127.399 cv
551.118 127.535 551.06 127.729 551.06 127.943 cv
553.062 127.943 li
f
556.736 129.44 mo
556.445 129.848 556.134 130.237 555.414 130.218 cv
554.715 130.198 554.287 129.81 554.287 129.11 cv
554.268 127.866 555.512 127.885 556.717 127.885 cv
556.775 127.205 556.542 126.835 555.92 126.835 cv
555.453 126.855 555.123 126.971 555.103 127.438 cv
554.462 127.38 li
554.559 126.66 555.103 126.369 555.939 126.369 cv
556.814 126.369 557.339 126.757 557.339 127.613 cv
557.339 129.207 li
557.32 129.596 557.475 129.829 557.883 129.732 cv
557.883 130.121 li
557.281 130.296 556.698 130.082 556.736 129.44 cv
cp
554.928 129.11 mo
554.928 129.498 555.162 129.751 555.551 129.751 cv
556.348 129.693 556.775 129.187 556.717 128.313 cv
555.881 128.352 554.928 128.215 554.928 129.11 cv
f
559.03 129.226 mo
558.991 129.693 559.38 129.79 559.769 129.654 cv
559.769 130.121 li
559.128 130.315 558.408 130.218 558.408 129.362 cv
558.408 126.894 li
557.981 126.894 li
557.981 126.446 li
558.447 126.446 li
558.622 125.61 li
559.03 125.61 li
559.03 126.446 li
559.711 126.446 li
559.711 126.894 li
559.03 126.894 li
559.03 129.226 li
f
561.46 130.218 mo
559.73 130.296 560.411 127.963 560.274 126.446 cv
560.896 126.446 li
560.896 128.779 li
560.896 129.382 561.033 129.751 561.655 129.732 cv
563.054 129.693 562.529 127.768 562.627 126.446 cv
563.229 126.446 li
563.249 130.14 li
562.666 130.14 li
562.646 129.946 562.685 129.654 562.627 129.498 cv
562.413 129.926 562.082 130.198 561.46 130.218 cv
f
565.931 126.971 mo
564.415 126.66 564.901 128.74 564.823 130.14 cv
564.201 130.14 li
564.182 126.446 li
564.765 126.446 li
564.784 126.68 564.746 127.01 564.804 127.205 cv
564.921 126.68 565.251 126.252 565.931 126.408 cv
565.931 126.971 li
f
567.973 126.369 mo
569.197 126.369 569.644 127.185 569.606 128.429 cv
566.981 128.429 li
566.981 129.207 567.253 129.732 568.012 129.751 cv
568.517 129.771 568.847 129.518 568.964 129.187 cv
569.508 129.343 li
569.295 129.887 568.789 130.218 568.012 130.218 cv
566.884 130.218 566.301 129.498 566.32 128.274 cv
566.34 127.088 566.826 126.369 567.973 126.369 cv
cp
568.984 127.943 mo
569.1 126.777 567.506 126.446 567.098 127.399 cv
567.04 127.535 566.981 127.729 566.981 127.943 cv
568.984 127.943 li
f
570.558 127.146 mo
570.558 126.446 li
571.219 126.446 li
571.219 127.146 li
570.558 127.146 li
cp
570.558 130.14 mo
570.558 129.44 li
571.219 129.44 li
571.219 130.14 li
570.558 130.14 li
f
545.786 135.075 mo
545.592 134.531 545.106 134.2 544.367 134.2 cv
543.22 134.2 542.676 134.978 542.676 136.125 cv
542.676 137.291 543.24 138.088 544.406 138.088 cv
545.242 138.088 545.611 137.622 545.922 137.078 cv
546.447 137.35 li
546.097 138.088 545.456 138.633 544.367 138.633 cv
542.812 138.633 542.093 137.661 542.015 136.125 cv
541.898 134.103 543.939 133.151 545.65 133.967 cv
546.02 134.142 546.253 134.473 546.408 134.861 cv
f
549.422 133.676 mo
550.996 133.676 551.813 134.57 551.813 136.125 cv
551.813 137.661 550.957 138.633 549.422 138.633 cv
547.847 138.633 547.03 137.68 547.03 136.125 cv
547.03 134.57 547.847 133.676 549.422 133.676 cv
cp
549.422 138.088 mo
550.646 138.088 551.152 137.291 551.152 136.125 cv
551.152 134.959 550.588 134.2 549.422 134.2 cv
548.236 134.2 547.691 134.959 547.691 136.125 cv
547.691 137.291 548.236 138.069 549.422 138.088 cv
f
555.837 138.555 mo
553.271 134.453 li
553.29 138.555 li
552.726 138.555 li
552.726 133.734 li
553.484 133.734 li
556.07 137.875 li
556.031 133.734 li
556.634 133.734 li
556.634 138.555 li
555.837 138.555 li
f
559.647 134.278 mo
559.647 138.555 li
558.986 138.555 li
558.986 134.278 li
557.334 134.278 li
557.334 133.734 li
561.299 133.734 li
561.299 134.278 li
559.647 134.278 li
f
561.338 139.955 mo
561.338 139.508 li
565.401 139.508 li
565.401 139.955 li
561.338 139.955 li
f
569.309 138.555 mo
568.764 137.155 li
566.568 137.155 li
566.023 138.555 li
565.343 138.555 li
567.306 133.734 li
568.045 133.734 li
569.97 138.555 li
569.309 138.555 li
cp
568.57 136.63 mo
567.656 134.239 li
567.423 135.114 567.054 135.833 566.762 136.63 cv
568.57 136.63 li
f
571.933 134.278 mo
571.933 138.555 li
571.272 138.555 li
571.272 134.278 li
569.62 134.278 li
569.62 133.734 li
573.585 133.734 li
573.585 134.278 li
571.933 134.278 li
f
574.363 138.555 mo
574.363 133.734 li
575.024 133.734 li
575.024 138.555 li
574.363 138.555 li
f
510.435 133.56 mo
522.63 133.56 li
@
522.63 133.56 mo
516.195 135.63 li
516.195 131.49 li
cp
f
522.63 133.065 mo
522.63 134.055 li
515.745 136.26 li
515.745 130.86 li
cp
516.645 135.045 mo
521.19 133.56 li
516.645 132.075 li
cp
f
468.945 114.93 mo
556.47 114.93 li
557.73 114.93 558.72 115.92 558.72 117.18 cv
558.72 122.31 li
@
558.72 122.31 mo
556.65 115.875 li
560.79 115.875 li
cp
f
559.215 122.31 mo
558.27 122.31 li
556.02 115.425 li
561.42 115.425 li
cp
557.235 116.325 mo
558.72 120.87 li
560.205 116.325 li
cp
f
377.82 110.205 mo
377.82 100.44 li
377.82 99.18 378.81 98.19 380.07 98.19 cv
522.54 98.19 li
@
522.54 98.19 mo
516.105 100.26 li
516.105 96.12 li
cp
f
522.54 97.695 mo
522.54 98.64 li
515.655 100.89 li
515.655 95.49 li
cp
516.555 99.63 mo
521.1 98.19 li
516.555 96.705 li
cp
f
294.3 190.125 mo
294.3 188.865 295.29 187.875 296.55 187.875 cv
310.05 187.875 li
311.31 187.875 312.3 188.865 312.3 190.125 cv
312.3 203.625 li
312.3 204.885 311.31 205.875 310.05 205.875 cv
296.55 205.875 li
295.29 205.875 294.3 204.885 294.3 203.625 cv
cp
1 1 1 rgb
f
294.3 190.125 mo
294.57 189.27 li
296.685 187.875 mo
297.585 187.875 li
300.285 187.875 mo
301.185 187.875 li
303.885 187.875 mo
304.785 187.875 li
307.485 187.875 mo
308.385 187.875 li
310.995 188.19 mo
311.4 188.325 li
311.67 188.73 li
312.3 191.25 mo
312.3 192.15 li
312.3 194.85 mo
312.3 195.75 li
312.3 198.45 mo
312.3 199.35 li
312.3 202.05 mo
312.3 202.95 li
311.355 205.335 mo
310.77 205.74 li
310.59 205.785 li
307.89 205.875 mo
306.99 205.875 li
304.29 205.875 mo
303.39 205.875 li
300.69 205.875 mo
299.79 205.875 li
297.09 205.875 mo
296.55 205.875 li
296.235 205.785 li
294.39 204.075 mo
294.3 203.625 li
294.3 203.175 li
294.3 200.475 mo
294.3 199.575 li
294.3 196.875 mo
294.3 195.975 li
294.3 193.275 mo
294.3 192.375 li
0 0 0 rgb
@
318.076 192.87 mo
318.076 185.984 li
319.02 185.984 li
319.02 192.87 li
318.076 192.87 li
f
323.185 187.484 mo
325.656 187.373 324.656 190.704 324.851 192.87 cv
323.962 192.87 li
323.962 189.51 li
323.962 188.65 323.74 188.15 322.88 188.178 cv
320.88 188.233 321.658 191.01 321.519 192.87 cv
320.631 192.87 li
320.603 187.595 li
321.436 187.595 li
321.464 187.872 321.408 188.261 321.491 188.483 cv
321.797 187.872 322.296 187.511 323.185 187.484 cv
f
327.128 191.565 mo
327.072 192.231 327.627 192.37 328.183 192.176 cv
328.183 192.842 li
327.266 193.12 326.239 192.981 326.239 191.759 cv
326.239 188.233 li
325.628 188.233 li
325.628 187.595 li
326.295 187.595 li
326.545 186.401 li
327.128 186.401 li
327.128 187.595 li
328.099 187.595 li
328.099 188.233 li
327.128 188.233 li
327.128 191.565 li
f
331.042 187.484 mo
332.792 187.484 333.43 188.65 333.375 190.427 cv
329.626 190.427 li
329.626 191.537 330.015 192.287 331.098 192.315 cv
331.82 192.342 332.292 191.982 332.458 191.51 cv
333.236 191.732 li
332.93 192.509 332.209 192.981 331.098 192.981 cv
329.488 192.981 328.655 191.954 328.682 190.205 cv
328.71 188.511 329.404 187.484 331.042 187.484 cv
cp
332.486 189.733 mo
332.653 188.067 330.376 187.595 329.793 188.955 cv
329.71 189.149 329.626 189.427 329.626 189.733 cv
332.486 189.733 li
f
336.984 188.344 mo
334.818 187.9 335.513 190.871 335.402 192.87 cv
334.513 192.87 li
334.485 187.595 li
335.318 187.595 li
335.346 187.928 335.29 188.4 335.374 188.677 cv
335.54 187.928 336.012 187.317 336.984 187.539 cv
336.984 188.344 li
f
342.954 188.178 mo
341.093 188.261 341.899 191.093 341.732 192.87 cv
340.871 192.87 li
340.871 189.51 li
340.871 188.705 340.732 188.122 339.9 188.178 cv
338.067 188.289 338.844 191.065 338.678 192.87 cv
337.817 192.87 li
337.789 187.595 li
338.622 187.595 li
338.65 187.872 338.595 188.261 338.678 188.483 cv
338.956 187.261 341.427 187.095 341.649 188.483 cv
341.954 187.9 342.398 187.511 343.259 187.484 cv
345.619 187.428 344.564 190.788 344.786 192.87 cv
343.925 192.87 li
343.925 189.51 li
343.925 188.705 343.787 188.15 342.954 188.178 cv
f
348.201 187.484 mo
349.95 187.484 350.589 188.65 350.533 190.427 cv
346.785 190.427 li
346.785 191.537 347.174 192.287 348.257 192.315 cv
348.979 192.342 349.451 191.982 349.617 191.51 cv
350.395 191.732 li
350.089 192.509 349.367 192.981 348.257 192.981 cv
346.646 192.981 345.813 191.954 345.841 190.205 cv
345.869 188.511 346.563 187.484 348.201 187.484 cv
cp
349.645 189.733 mo
349.812 188.067 347.535 187.595 346.952 188.955 cv
346.868 189.149 346.785 189.427 346.785 189.733 cv
349.645 189.733 li
f
353.338 187.484 mo
354.198 187.484 354.67 187.845 355.004 188.4 cv
354.976 185.623 li
355.864 185.623 li
355.892 192.87 li
355.059 192.87 li
355.004 192.592 355.059 192.231 354.976 192.009 cv
354.698 192.648 354.198 192.981 353.338 192.981 cv
351.866 192.981 351.422 191.898 351.394 190.26 cv
351.394 188.428 352.033 187.484 353.338 187.484 cv
cp
353.588 188.15 mo
352.477 188.15 352.31 189.094 352.31 190.232 cv
352.31 191.343 352.477 192.287 353.56 192.287 cv
354.726 192.287 354.976 191.398 354.976 190.177 cv
354.976 189.011 354.726 188.122 353.588 188.15 cv
f
357.197 186.456 mo
357.197 185.623 li
358.086 185.623 li
358.086 186.456 li
357.197 186.456 li
cp
357.197 192.87 mo
357.197 187.595 li
358.086 187.595 li
358.086 192.87 li
357.197 192.87 li
f
362.639 191.87 mo
362.223 192.454 361.778 193.009 360.751 192.981 cv
359.751 192.953 359.141 192.398 359.141 191.398 cv
359.113 189.621 360.89 189.649 362.611 189.649 cv
362.695 188.677 362.361 188.15 361.473 188.15 cv
360.807 188.178 360.335 188.344 360.307 189.011 cv
359.391 188.927 li
359.529 187.9 360.307 187.484 361.501 187.484 cv
362.75 187.484 363.5 188.039 363.5 189.261 cv
363.5 191.537 li
363.472 192.093 363.694 192.426 364.277 192.287 cv
364.277 192.842 li
363.416 193.092 362.583 192.787 362.639 191.87 cv
cp
360.057 191.398 mo
360.057 191.954 360.39 192.315 360.945 192.315 cv
362.084 192.231 362.695 191.51 362.611 190.26 cv
361.417 190.316 360.057 190.121 360.057 191.398 cv
f
365.915 191.565 mo
365.86 192.231 366.415 192.37 366.97 192.176 cv
366.97 192.842 li
366.054 193.12 365.027 192.981 365.027 191.759 cv
365.027 188.233 li
364.416 188.233 li
364.416 187.595 li
365.082 187.595 li
365.332 186.401 li
365.915 186.401 li
365.915 187.595 li
366.887 187.595 li
366.887 188.233 li
365.915 188.233 li
365.915 191.565 li
f
369.83 187.484 mo
371.579 187.484 372.218 188.65 372.162 190.427 cv
368.414 190.427 li
368.414 191.537 368.803 192.287 369.886 192.315 cv
370.608 192.342 371.08 191.982 371.246 191.51 cv
372.024 191.732 li
371.718 192.509 370.996 192.981 369.886 192.981 cv
368.275 192.981 367.442 191.954 367.47 190.205 cv
367.498 188.511 368.192 187.484 369.83 187.484 cv
cp
371.274 189.733 mo
371.441 188.067 369.164 187.595 368.581 188.955 cv
368.497 189.149 368.414 189.427 368.414 189.733 cv
371.274 189.733 li
f
323.629 199.926 mo
323.601 201.064 322.991 201.703 321.963 201.869 cv
323.907 204.84 li
322.852 204.84 li
321.047 201.98 li
318.909 201.98 li
318.909 204.84 li
317.993 204.84 li
317.993 197.954 li
320.436 198.038 323.685 197.371 323.629 199.926 cv
cp
318.909 201.258 mo
320.575 201.203 322.713 201.619 322.713 199.953 cv
322.713 198.26 320.492 198.787 318.909 198.704 cv
318.909 201.258 li
f
327.128 199.454 mo
328.877 199.454 329.515 200.62 329.46 202.397 cv
325.712 202.397 li
325.712 203.507 326.1 204.257 327.183 204.285 cv
327.905 204.312 328.377 203.952 328.544 203.48 cv
329.321 203.702 li
329.016 204.479 328.294 204.951 327.183 204.951 cv
325.573 204.951 324.74 203.924 324.768 202.175 cv
324.795 200.481 325.489 199.454 327.128 199.454 cv
cp
328.571 201.703 mo
328.738 200.037 326.461 199.565 325.878 200.925 cv
325.795 201.119 325.712 201.397 325.712 201.703 cv
328.571 201.703 li
f
333.652 200.87 mo
333.569 199.926 331.265 199.815 331.237 200.87 cv
331.653 202.341 334.43 201.203 334.541 203.368 cv
334.652 205.534 330.376 205.423 330.182 203.591 cv
330.959 203.452 li
331.07 204.451 333.652 204.701 333.68 203.452 cv
333.402 201.897 330.543 203.035 330.404 200.953 cv
330.293 199.37 332.681 199.204 333.791 199.787 cv
334.124 199.981 334.374 200.314 334.458 200.759 cv
f
337.234 204.951 mo
334.763 205.062 335.735 201.73 335.54 199.565 cv
336.429 199.565 li
336.429 202.896 li
336.429 203.757 336.623 204.285 337.512 204.257 cv
339.511 204.201 338.761 201.453 338.9 199.565 cv
339.761 199.565 li
339.788 204.84 li
338.955 204.84 li
338.928 204.562 338.983 204.146 338.9 203.924 cv
338.595 204.535 338.123 204.923 337.234 204.951 cv
f
341.121 204.84 mo
341.121 197.593 li
342.01 197.593 li
342.01 204.84 li
341.121 204.84 li
f
344.286 203.535 mo
344.231 204.201 344.786 204.34 345.341 204.146 cv
345.341 204.812 li
344.425 205.09 343.398 204.951 343.398 203.729 cv
343.398 200.203 li
342.787 200.203 li
342.787 199.565 li
343.453 199.565 li
343.703 198.371 li
344.286 198.371 li
344.286 199.565 li
345.258 199.565 li
345.258 200.203 li
344.286 200.203 li
344.286 203.535 li
f
349.173 200.87 mo
349.09 199.926 346.785 199.815 346.757 200.87 cv
347.174 202.341 349.95 201.203 350.061 203.368 cv
350.173 205.534 345.897 205.423 345.702 203.591 cv
346.48 203.452 li
346.591 204.451 349.173 204.701 349.201 203.452 cv
348.923 201.897 346.063 203.035 345.924 200.953 cv
345.813 199.37 348.201 199.204 349.312 199.787 cv
349.645 199.981 349.895 200.314 349.978 200.759 cv
f
381.15 190.125 mo
381.15 188.865 382.14 187.875 383.4 187.875 cv
396.9 187.875 li
398.16 187.875 399.15 188.865 399.15 190.125 cv
399.15 203.625 li
399.15 204.885 398.16 205.875 396.9 205.875 cv
383.4 205.875 li
382.14 205.875 381.15 204.885 381.15 203.625 cv
cp
1 1 1 rgb
f
381.15 190.125 mo
381.15 188.865 382.14 187.875 383.4 187.875 cv
396.9 187.875 li
398.16 187.875 399.15 188.865 399.15 190.125 cv
399.15 203.625 li
399.15 204.885 398.16 205.875 396.9 205.875 cv
383.4 205.875 li
382.14 205.875 381.15 204.885 381.15 203.625 cv
cp
0 0 0 rgb
@
405.759 186.762 mo
405.759 189.316 li
409.591 189.316 li
409.591 190.094 li
405.759 190.094 li
405.759 192.87 li
404.843 192.87 li
404.843 185.984 li
409.702 185.984 li
409.702 186.762 li
405.759 186.762 li
f
412.867 187.484 mo
414.616 187.484 415.255 188.65 415.199 190.427 cv
411.451 190.427 li
411.451 191.537 411.84 192.287 412.923 192.315 cv
413.644 192.342 414.116 191.982 414.283 191.51 cv
415.06 191.732 li
414.755 192.509 414.033 192.981 412.923 192.981 cv
411.312 192.981 410.479 191.954 410.507 190.205 cv
410.535 188.511 411.229 187.484 412.867 187.484 cv
cp
414.311 189.733 mo
414.477 188.067 412.201 187.595 411.618 188.955 cv
411.534 189.149 411.451 189.427 411.451 189.733 cv
414.311 189.733 li
f
419.558 191.87 mo
419.142 192.454 418.698 193.009 417.67 192.981 cv
416.671 192.953 416.06 192.398 416.06 191.398 cv
416.032 189.621 417.809 189.649 419.531 189.649 cv
419.614 188.677 419.281 188.15 418.392 188.15 cv
417.726 188.178 417.254 188.344 417.226 189.011 cv
416.31 188.927 li
416.449 187.9 417.226 187.484 418.42 187.484 cv
419.669 187.484 420.419 188.039 420.419 189.261 cv
420.419 191.537 li
420.391 192.093 420.613 192.426 421.197 192.287 cv
421.197 192.842 li
420.336 193.092 419.503 192.787 419.558 191.87 cv
cp
416.976 191.398 mo
416.976 191.954 417.309 192.315 417.865 192.315 cv
419.003 192.231 419.614 191.51 419.531 190.26 cv
418.337 190.316 416.976 190.121 416.976 191.398 cv
f
422.835 191.565 mo
422.779 192.231 423.334 192.37 423.89 192.176 cv
423.89 192.842 li
422.973 193.12 421.946 192.981 421.946 191.759 cv
421.946 188.233 li
421.335 188.233 li
421.335 187.595 li
422.002 187.595 li
422.252 186.401 li
422.835 186.401 li
422.835 187.595 li
423.806 187.595 li
423.806 188.233 li
422.835 188.233 li
422.835 191.565 li
f
426.305 192.981 mo
423.834 193.092 424.806 189.76 424.612 187.595 cv
425.5 187.595 li
425.5 190.926 li
425.5 191.787 425.694 192.315 426.583 192.287 cv
428.582 192.231 427.832 189.483 427.971 187.595 cv
428.832 187.595 li
428.86 192.87 li
428.027 192.87 li
427.999 192.592 428.054 192.176 427.971 191.954 cv
427.666 192.565 427.194 192.953 426.305 192.981 cv
f
432.691 188.344 mo
430.526 187.9 431.22 190.871 431.109 192.87 cv
430.22 192.87 li
430.192 187.595 li
431.025 187.595 li
431.053 187.928 430.998 188.4 431.081 188.677 cv
431.247 187.928 431.719 187.317 432.691 187.539 cv
432.691 188.344 li
f
435.607 187.484 mo
437.356 187.484 437.994 188.65 437.939 190.427 cv
434.191 190.427 li
434.191 191.537 434.579 192.287 435.662 192.315 cv
436.384 192.342 436.856 191.982 437.023 191.51 cv
437.8 191.732 li
437.495 192.509 436.773 192.981 435.662 192.981 cv
434.052 192.981 433.219 191.954 433.247 190.205 cv
433.274 188.511 433.968 187.484 435.607 187.484 cv
cp
437.05 189.733 mo
437.217 188.067 434.94 187.595 434.357 188.955 cv
434.274 189.149 434.191 189.427 434.191 189.733 cv
437.05 189.733 li
f
409.146 199.592 mo
409.008 198.26 405.731 198.093 405.704 199.648 cv
406.092 201.73 410.09 200.037 410.229 202.952 cv
410.313 205.118 406.87 205.368 405.37 204.479 cv
404.898 204.201 404.593 203.757 404.454 203.202 cv
405.37 203.008 li
405.509 204.562 409.285 204.757 409.285 202.98 cv
409.285 200.814 404.982 202.591 404.787 199.703 cv
404.649 197.427 408.813 197.371 409.757 198.759 cv
409.896 198.954 409.979 199.204 410.063 199.454 cv
f
413.45 199.454 mo
415.199 199.454 415.838 200.62 415.782 202.397 cv
412.034 202.397 li
412.034 203.507 412.423 204.257 413.506 204.285 cv
414.227 204.312 414.699 203.952 414.866 203.48 cv
415.643 203.702 li
415.338 204.479 414.616 204.951 413.506 204.951 cv
411.895 204.951 411.062 203.924 411.09 202.175 cv
411.118 200.481 411.812 199.454 413.45 199.454 cv
cp
414.894 201.703 mo
415.06 200.037 412.784 199.565 412.201 200.925 cv
412.117 201.119 412.034 201.397 412.034 201.703 cv
414.894 201.703 li
f
417.865 203.535 mo
417.809 204.201 418.364 204.34 418.92 204.146 cv
418.92 204.812 li
418.004 205.09 416.976 204.951 416.976 203.729 cv
416.976 200.203 li
416.365 200.203 li
416.365 199.565 li
417.032 199.565 li
417.282 198.371 li
417.865 198.371 li
417.865 199.565 li
418.836 199.565 li
418.836 200.203 li
417.865 200.203 li
417.865 203.535 li
f
422.751 200.87 mo
422.668 199.926 420.364 199.815 420.336 200.87 cv
420.752 202.341 423.529 201.203 423.64 203.368 cv
423.751 205.534 419.475 205.423 419.281 203.591 cv
420.058 203.452 li
420.169 204.451 422.751 204.701 422.779 203.452 cv
422.501 201.897 419.642 203.035 419.503 200.953 cv
419.392 199.37 421.78 199.204 422.89 199.787 cv
423.223 199.981 423.473 200.314 423.557 200.759 cv
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
